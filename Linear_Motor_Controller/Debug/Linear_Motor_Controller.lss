
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000091e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  0000091e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000915  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071f  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fd  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000026d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_11>
  30:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_14>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
  88:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <driverTimers_Init>:
volatile uint16_t T_ON;
volatile bool isNegativeCycle = false;
volatile float MAGNITUDE_DELAY;

void driverTimers_Init(){
	TCCR0B |= (1<<CS00); //Set up 8bit timer to use 8MHZ clock
  90:	85 b5       	in	r24, 0x25	; 37
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEAD_TIME_COUNT_HIGH;	
  96:	80 ed       	ldi	r24, 0xD0	; 208
  98:	87 bd       	out	0x27, r24	; 39
	OCR0B = DEAD_TIME_COUNT_LOW;			//Initializing dead times which remain constant		
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	88 bd       	out	0x28, r24	; 40
	TCCR1B |= (1<<CS11);//Set up 16 bit timer with pre-scaler 8
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	OCR1B = T_ON;
  a8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <T_ON>
  ac:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <T_ON+0x1>
  b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	DDRB = (1 << DDB0); //Configuring driver pins to output
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
  bc:	80 ee       	ldi	r24, 0xE0	; 224
  be:	8a b9       	out	0x0a, r24	; 10
			//CLEAR ALL OUTPUT PINS except for switch 4
	PORTB &= ~(1<<PB0);
  c0:	28 98       	cbi	0x05, 0	; 5
	PORTD &= ~(1<<PD5);
  c2:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<PD7);
  c4:	5f 98       	cbi	0x0b, 7	; 11
	PORTD = (1<<PD6);
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	8b b9       	out	0x0b, r24	; 11
  ca:	08 95       	ret

000000cc <setFrequency>:
	
}

void setFrequency(float frequency, float dutyCycle){
  cc:	4f 92       	push	r4
  ce:	5f 92       	push	r5
  d0:	6f 92       	push	r6
  d2:	7f 92       	push	r7
  d4:	8f 92       	push	r8
  d6:	9f 92       	push	r9
  d8:	af 92       	push	r10
  da:	bf 92       	push	r11
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	69 01       	movw	r12, r18
  ea:	7a 01       	movw	r14, r20
	MAGNITUDE_DELAY = 0.2; 
  ec:	0f 2e       	mov	r0, r31
  ee:	fd ec       	ldi	r31, 0xCD	; 205
  f0:	8f 2e       	mov	r8, r31
  f2:	fc ec       	ldi	r31, 0xCC	; 204
  f4:	9f 2e       	mov	r9, r31
  f6:	fc e4       	ldi	r31, 0x4C	; 76
  f8:	af 2e       	mov	r10, r31
  fa:	fe e3       	ldi	r31, 0x3E	; 62
  fc:	bf 2e       	mov	r11, r31
  fe:	f0 2d       	mov	r31, r0
 100:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <MAGNITUDE_DELAY>
 104:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <MAGNITUDE_DELAY+0x1>
 108:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <MAGNITUDE_DELAY+0x2>
 10c:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <MAGNITUDE_DELAY+0x3>
	double OFFTime = ((1/frequency) - 4*dutyCycle + 200)/ (4 + MAGNITUDE_DELAY); //Find T_ON, T_OFF1, T_OFF2 from given frequency
 110:	40 90 01 01 	lds	r4, 0x0101	; 0x800101 <MAGNITUDE_DELAY>
 114:	50 90 02 01 	lds	r5, 0x0102	; 0x800102 <MAGNITUDE_DELAY+0x1>
 118:	60 90 03 01 	lds	r6, 0x0103	; 0x800103 <MAGNITUDE_DELAY+0x2>
 11c:	70 90 04 01 	lds	r7, 0x0104	; 0x800104 <MAGNITUDE_DELAY+0x3>
 120:	9b 01       	movw	r18, r22
 122:	ac 01       	movw	r20, r24
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	9f e3       	ldi	r25, 0x3F	; 63
 12c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__divsf3>
 130:	4b 01       	movw	r8, r22
 132:	5c 01       	movw	r10, r24
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e8       	ldi	r20, 0x80	; 128
 13a:	50 e4       	ldi	r21, 0x40	; 64
 13c:	c7 01       	movw	r24, r14
 13e:	b6 01       	movw	r22, r12
 140:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
 148:	c5 01       	movw	r24, r10
 14a:	b4 01       	movw	r22, r8
 14c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	48 e4       	ldi	r20, 0x48	; 72
 156:	53 e4       	ldi	r21, 0x43	; 67
 158:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3>
 15c:	4b 01       	movw	r8, r22
 15e:	5c 01       	movw	r10, r24
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e8       	ldi	r20, 0x80	; 128
 166:	50 e4       	ldi	r21, 0x40	; 64
 168:	c3 01       	movw	r24, r6
 16a:	b2 01       	movw	r22, r4
 16c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3>
 170:	9b 01       	movw	r18, r22
 172:	ac 01       	movw	r20, r24
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__divsf3>
 17c:	4b 01       	movw	r8, r22
 17e:	5c 01       	movw	r10, r24
	T_OFF1 = (uint16_t) (round(OFFTime));
 180:	0e 94 06 04 	call	0x80c	; 0x80c <round>
 184:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 188:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <T_OFF1+0x1>
 18c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <T_OFF1>
	T_OFF2 = (uint16_t) (round(OFFTime*(1.0+MAGNITUDE_DELAY)));
 190:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <MAGNITUDE_DELAY>
 194:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <MAGNITUDE_DELAY+0x1>
 198:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <MAGNITUDE_DELAY+0x2>
 19c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <MAGNITUDE_DELAY+0x3>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e8       	ldi	r20, 0x80	; 128
 1a6:	5f e3       	ldi	r21, 0x3F	; 63
 1a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3>
 1ac:	a5 01       	movw	r20, r10
 1ae:	94 01       	movw	r18, r8
 1b0:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 1b4:	0e 94 06 04 	call	0x80c	; 0x80c <round>
 1b8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 1bc:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <T_OFF2+0x1>
 1c0:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <T_OFF2>
	T_ON = 2*(dutyCycle-50) + T_OFF1;
 1c4:	c0 91 05 01 	lds	r28, 0x0105	; 0x800105 <T_OFF1>
 1c8:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <T_OFF1+0x1>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	48 e4       	ldi	r20, 0x48	; 72
 1d2:	52 e4       	ldi	r21, 0x42	; 66
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__subsf3>
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3>
 1e4:	6b 01       	movw	r12, r22
 1e6:	7c 01       	movw	r14, r24
 1e8:	be 01       	movw	r22, r28
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 0b 03 	call	0x616	; 0x616 <__floatunsisf>
 1f2:	9b 01       	movw	r18, r22
 1f4:	ac 01       	movw	r20, r24
 1f6:	c7 01       	movw	r24, r14
 1f8:	b6 01       	movw	r22, r12
 1fa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3>
 1fe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 202:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <T_ON+0x1>
 206:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <T_ON>
	OCR1B = T_ON;
 20a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <T_ON>
 20e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <T_ON+0x1>
 212:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 216:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR1A = T_ON + DEAD_TIME_COUNT_HIGH*8 + T_OFF1;
 21a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <T_ON>
 21e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <T_ON+0x1>
 222:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <T_OFF1>
 226:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <T_OFF1+0x1>
 22a:	82 0f       	add	r24, r18
 22c:	93 1f       	adc	r25, r19
 22e:	80 58       	subi	r24, 0x80	; 128
 230:	99 4f       	sbci	r25, 0xF9	; 249
 232:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 236:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	9f 90       	pop	r9
 24c:	8f 90       	pop	r8
 24e:	7f 90       	pop	r7
 250:	6f 90       	pop	r6
 252:	5f 90       	pop	r5
 254:	4f 90       	pop	r4
 256:	08 95       	ret

00000258 <driverTimersInterrupts_Init>:

void driverTimersInterrupts_Init(){
	sei();																		//Enable global interrupts	
 258:	78 94       	sei
	TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);										// Enable on/off time timer compare match interrupts
 25a:	ef e6       	ldi	r30, 0x6F	; 111
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	86 60       	ori	r24, 0x06	; 6
 262:	80 83       	st	Z, r24
	TOGGLE_SW1;
 264:	95 b1       	in	r25, 0x05	; 5
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	89 27       	eor	r24, r25
 26a:	85 b9       	out	0x05, r24	; 5
 26c:	08 95       	ret

0000026e <__vector_15>:
}

ISR(TIMER0_COMPB_vect){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
	TIMSK0 &=~ (1<<OCIE0B);	//disable low dead time interrupt
 280:	ee e6       	ldi	r30, 0x6E	; 110
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8b 7f       	andi	r24, 0xFB	; 251
 288:	80 83       	st	Z, r24
		isNegativeCycle = ~isNegativeCycle; //switching to next half cycle
 28a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if (isNegativeCycle){		//Set pins for next half cycle
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 298:	88 23       	and	r24, r24
 29a:	29 f0       	breq	.+10     	; 0x2a6 <__vector_15+0x38>
			TOGGLE_SW2; //sets pins for positive cycle
 29c:	9b b1       	in	r25, 0x0b	; 11
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	89 27       	eor	r24, r25
 2a2:	8b b9       	out	0x0b, r24	; 11
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <__vector_15+0x40>
			} else {
			TOGGLE_SW1;//set pins on for positive cycle
 2a6:	95 b1       	in	r25, 0x05	; 5
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	89 27       	eor	r24, r25
 2ac:	85 b9       	out	0x05, r24	; 5
		}
		
		TCNT1 = 0; //Reset on/off timer for second half of cycle
 2ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__vector_14>:
																		
ISR(TIMER0_COMPA_vect){
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
	TIMSK0 &=~ (1<<OCIE0A);	
 2da:	ee e6       	ldi	r30, 0x6E	; 110
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	8d 7f       	andi	r24, 0xFD	; 253
 2e2:	80 83       	st	Z, r24
	if (isNegativeCycle){
 2e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e8:	88 23       	and	r24, r24
 2ea:	29 f0       	breq	.+10     	; 0x2f6 <__vector_14+0x2e>
		TOGGLE_SW4;
 2ec:	9b b1       	in	r25, 0x0b	; 11
 2ee:	80 e4       	ldi	r24, 0x40	; 64
 2f0:	89 27       	eor	r24, r25
 2f2:	8b b9       	out	0x0b, r24	; 11
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <__vector_14+0x34>
	} else {
		TOGGLE_SW3; 
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	80 58       	subi	r24, 0x80	; 128
 2fa:	8b b9       	out	0x0b, r24	; 11
	}									// Disable high dead time timer interrupts

}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_12>:

ISR(TIMER1_COMPB_vect){// Set up timer0 compare match ISRs
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
	if (isNegativeCycle){		//set timer 1 on/off timer compare value to correct value 
 324:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 328:	88 23       	and	r24, r24
 32a:	a9 f0       	breq	.+42     	; 0x356 <__vector_12+0x48>
		TOGGLE_SW2;
 32c:	9b b1       	in	r25, 0x0b	; 11
 32e:	80 e2       	ldi	r24, 0x20	; 32
 330:	89 27       	eor	r24, r25
 332:	8b b9       	out	0x0b, r24	; 11
		OCR1A = T_ON + (DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8 + T_OFF1;
 334:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <T_ON>
 338:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <T_ON+0x1>
 33c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <T_OFF1>
 340:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <T_OFF1+0x1>
 344:	82 0f       	add	r24, r18
 346:	93 1f       	adc	r25, r19
 348:	80 5c       	subi	r24, 0xC0	; 192
 34a:	98 4f       	sbci	r25, 0xF8	; 248
 34c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 350:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 354:	14 c0       	rjmp	.+40     	; 0x37e <__vector_12+0x70>
	} else {
		OCR1A = T_ON + (DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8 + T_OFF2;
 356:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <T_ON>
 35a:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <T_ON+0x1>
 35e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <T_OFF2>
 362:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <T_OFF2+0x1>
 366:	82 0f       	add	r24, r18
 368:	93 1f       	adc	r25, r19
 36a:	80 5c       	subi	r24, 0xC0	; 192
 36c:	98 4f       	sbci	r25, 0xF8	; 248
 36e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 372:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TOGGLE_SW1; //TURN OFF SWITCH 1
 376:	95 b1       	in	r25, 0x05	; 5
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	89 27       	eor	r24, r25
 37c:	85 b9       	out	0x05, r24	; 5
	}
	
	
	
	TCNT0=0; 													//clear counter to start dead time timer
 37e:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A);										// Enable dead time timer compare match A interrupts
 380:	ee e6       	ldi	r30, 0x6E	; 110
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	82 60       	ori	r24, 0x02	; 2
 388:	80 83       	st	Z, r24
}	
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_11>:

	
ISR(TIMER1_COMPA_vect){
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
		if (isNegativeCycle){
 3ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3b2:	88 23       	and	r24, r24
 3b4:	21 f0       	breq	.+8      	; 0x3be <__vector_11+0x1e>
			TOGGLE_SW3;
 3b6:	8b b1       	in	r24, 0x0b	; 11
 3b8:	80 58       	subi	r24, 0x80	; 128
 3ba:	8b b9       	out	0x0b, r24	; 11
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__vector_11+0x26>
			} else {
			TOGGLE_SW4;
 3be:	9b b1       	in	r25, 0x0b	; 11
 3c0:	80 e4       	ldi	r24, 0x40	; 64
 3c2:	89 27       	eor	r24, r25
 3c4:	8b b9       	out	0x0b, r24	; 11
		}
			TCNT0 = 0 ; //reset timer 0
 3c6:	16 bc       	out	0x26, r1	; 38
			TIMSK0 = (1<<OCIE0B); //enable low deadtime timer interrupts
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <main>:
	*/
	
	float frequency = 12;
	float dutyCycle= 50;
	
	setFrequency(frequency, dutyCycle);//acquire on/off times or alternatively could manually set on and off times
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	48 e4       	ldi	r20, 0x48	; 72
 3e2:	52 e4       	ldi	r21, 0x42	; 66
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	80 e4       	ldi	r24, 0x40	; 64
 3ea:	91 e4       	ldi	r25, 0x41	; 65
 3ec:	0e 94 66 00 	call	0xcc	; 0xcc <setFrequency>
	driverTimers_Init();
 3f0:	0e 94 48 00 	call	0x90	; 0x90 <driverTimers_Init>
	driverTimersInterrupts_Init();
 3f4:	0e 94 2c 01 	call	0x258	; 0x258 <driverTimersInterrupts_Init>
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <main+0x1c>

000003fa <__subsf3>:
 3fa:	50 58       	subi	r21, 0x80	; 128

000003fc <__addsf3>:
 3fc:	bb 27       	eor	r27, r27
 3fe:	aa 27       	eor	r26, r26
 400:	0e 94 15 02 	call	0x42a	; 0x42a <__addsf3x>
 404:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 408:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 40c:	38 f0       	brcs	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 412:	20 f0       	brcs	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	39 f4       	brne	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	9f 3f       	cpi	r25, 0xFF	; 255
 418:	19 f4       	brne	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41a:	26 f4       	brtc	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>
 420:	0e f4       	brtc	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	e0 95       	com	r30
 424:	e7 fb       	bst	r30, 7
 426:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>

0000042a <__addsf3x>:
 42a:	e9 2f       	mov	r30, r25
 42c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 430:	58 f3       	brcs	.-42     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 432:	ba 17       	cp	r27, r26
 434:	62 07       	cpc	r22, r18
 436:	73 07       	cpc	r23, r19
 438:	84 07       	cpc	r24, r20
 43a:	95 07       	cpc	r25, r21
 43c:	20 f0       	brcs	.+8      	; 0x446 <__addsf3x+0x1c>
 43e:	79 f4       	brne	.+30     	; 0x45e <__addsf3x+0x34>
 440:	a6 f5       	brtc	.+104    	; 0x4aa <__addsf3x+0x80>
 442:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 446:	0e f4       	brtc	.+2      	; 0x44a <__addsf3x+0x20>
 448:	e0 95       	com	r30
 44a:	0b 2e       	mov	r0, r27
 44c:	ba 2f       	mov	r27, r26
 44e:	a0 2d       	mov	r26, r0
 450:	0b 01       	movw	r0, r22
 452:	b9 01       	movw	r22, r18
 454:	90 01       	movw	r18, r0
 456:	0c 01       	movw	r0, r24
 458:	ca 01       	movw	r24, r20
 45a:	a0 01       	movw	r20, r0
 45c:	11 24       	eor	r1, r1
 45e:	ff 27       	eor	r31, r31
 460:	59 1b       	sub	r21, r25
 462:	99 f0       	breq	.+38     	; 0x48a <__addsf3x+0x60>
 464:	59 3f       	cpi	r21, 0xF9	; 249
 466:	50 f4       	brcc	.+20     	; 0x47c <__addsf3x+0x52>
 468:	50 3e       	cpi	r21, 0xE0	; 224
 46a:	68 f1       	brcs	.+90     	; 0x4c6 <__addsf3x+0x9c>
 46c:	1a 16       	cp	r1, r26
 46e:	f0 40       	sbci	r31, 0x00	; 0
 470:	a2 2f       	mov	r26, r18
 472:	23 2f       	mov	r18, r19
 474:	34 2f       	mov	r19, r20
 476:	44 27       	eor	r20, r20
 478:	58 5f       	subi	r21, 0xF8	; 248
 47a:	f3 cf       	rjmp	.-26     	; 0x462 <__addsf3x+0x38>
 47c:	46 95       	lsr	r20
 47e:	37 95       	ror	r19
 480:	27 95       	ror	r18
 482:	a7 95       	ror	r26
 484:	f0 40       	sbci	r31, 0x00	; 0
 486:	53 95       	inc	r21
 488:	c9 f7       	brne	.-14     	; 0x47c <__addsf3x+0x52>
 48a:	7e f4       	brtc	.+30     	; 0x4aa <__addsf3x+0x80>
 48c:	1f 16       	cp	r1, r31
 48e:	ba 0b       	sbc	r27, r26
 490:	62 0b       	sbc	r22, r18
 492:	73 0b       	sbc	r23, r19
 494:	84 0b       	sbc	r24, r20
 496:	ba f0       	brmi	.+46     	; 0x4c6 <__addsf3x+0x9c>
 498:	91 50       	subi	r25, 0x01	; 1
 49a:	a1 f0       	breq	.+40     	; 0x4c4 <__addsf3x+0x9a>
 49c:	ff 0f       	add	r31, r31
 49e:	bb 1f       	adc	r27, r27
 4a0:	66 1f       	adc	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	c2 f7       	brpl	.-16     	; 0x498 <__addsf3x+0x6e>
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__addsf3x+0x9c>
 4aa:	ba 0f       	add	r27, r26
 4ac:	62 1f       	adc	r22, r18
 4ae:	73 1f       	adc	r23, r19
 4b0:	84 1f       	adc	r24, r20
 4b2:	48 f4       	brcc	.+18     	; 0x4c6 <__addsf3x+0x9c>
 4b4:	87 95       	ror	r24
 4b6:	77 95       	ror	r23
 4b8:	67 95       	ror	r22
 4ba:	b7 95       	ror	r27
 4bc:	f7 95       	ror	r31
 4be:	9e 3f       	cpi	r25, 0xFE	; 254
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <__addsf3x+0x9a>
 4c2:	b0 cf       	rjmp	.-160    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 4c4:	93 95       	inc	r25
 4c6:	88 0f       	add	r24, r24
 4c8:	08 f0       	brcs	.+2      	; 0x4cc <__addsf3x+0xa2>
 4ca:	99 27       	eor	r25, r25
 4cc:	ee 0f       	add	r30, r30
 4ce:	97 95       	ror	r25
 4d0:	87 95       	ror	r24
 4d2:	08 95       	ret

000004d4 <__divsf3>:
 4d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__divsf3x>
 4d8:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 4dc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 4e0:	58 f0       	brcs	.+22     	; 0x4f8 <__divsf3+0x24>
 4e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 4e6:	40 f0       	brcs	.+16     	; 0x4f8 <__divsf3+0x24>
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <__divsf3+0x20>
 4ea:	5f 3f       	cpi	r21, 0xFF	; 255
 4ec:	29 f0       	breq	.+10     	; 0x4f8 <__divsf3+0x24>
 4ee:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 4f2:	51 11       	cpse	r21, r1
 4f4:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 4f8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>

000004fc <__divsf3x>:
 4fc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 500:	68 f3       	brcs	.-38     	; 0x4dc <__divsf3+0x8>

00000502 <__divsf3_pse>:
 502:	99 23       	and	r25, r25
 504:	b1 f3       	breq	.-20     	; 0x4f2 <__divsf3+0x1e>
 506:	55 23       	and	r21, r21
 508:	91 f3       	breq	.-28     	; 0x4ee <__divsf3+0x1a>
 50a:	95 1b       	sub	r25, r21
 50c:	55 0b       	sbc	r21, r21
 50e:	bb 27       	eor	r27, r27
 510:	aa 27       	eor	r26, r26
 512:	62 17       	cp	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	38 f0       	brcs	.+14     	; 0x528 <__divsf3_pse+0x26>
 51a:	9f 5f       	subi	r25, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	22 0f       	add	r18, r18
 520:	33 1f       	adc	r19, r19
 522:	44 1f       	adc	r20, r20
 524:	aa 1f       	adc	r26, r26
 526:	a9 f3       	breq	.-22     	; 0x512 <__divsf3_pse+0x10>
 528:	35 d0       	rcall	.+106    	; 0x594 <__divsf3_pse+0x92>
 52a:	0e 2e       	mov	r0, r30
 52c:	3a f0       	brmi	.+14     	; 0x53c <__divsf3_pse+0x3a>
 52e:	e0 e8       	ldi	r30, 0x80	; 128
 530:	32 d0       	rcall	.+100    	; 0x596 <__divsf3_pse+0x94>
 532:	91 50       	subi	r25, 0x01	; 1
 534:	50 40       	sbci	r21, 0x00	; 0
 536:	e6 95       	lsr	r30
 538:	00 1c       	adc	r0, r0
 53a:	ca f7       	brpl	.-14     	; 0x52e <__divsf3_pse+0x2c>
 53c:	2b d0       	rcall	.+86     	; 0x594 <__divsf3_pse+0x92>
 53e:	fe 2f       	mov	r31, r30
 540:	29 d0       	rcall	.+82     	; 0x594 <__divsf3_pse+0x92>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	bb 1f       	adc	r27, r27
 54a:	26 17       	cp	r18, r22
 54c:	37 07       	cpc	r19, r23
 54e:	48 07       	cpc	r20, r24
 550:	ab 07       	cpc	r26, r27
 552:	b0 e8       	ldi	r27, 0x80	; 128
 554:	09 f0       	breq	.+2      	; 0x558 <__divsf3_pse+0x56>
 556:	bb 0b       	sbc	r27, r27
 558:	80 2d       	mov	r24, r0
 55a:	bf 01       	movw	r22, r30
 55c:	ff 27       	eor	r31, r31
 55e:	93 58       	subi	r25, 0x83	; 131
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	3a f0       	brmi	.+14     	; 0x572 <__divsf3_pse+0x70>
 564:	9e 3f       	cpi	r25, 0xFE	; 254
 566:	51 05       	cpc	r21, r1
 568:	78 f0       	brcs	.+30     	; 0x588 <__divsf3_pse+0x86>
 56a:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 56e:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 572:	5f 3f       	cpi	r21, 0xFF	; 255
 574:	e4 f3       	brlt	.-8      	; 0x56e <__divsf3_pse+0x6c>
 576:	98 3e       	cpi	r25, 0xE8	; 232
 578:	d4 f3       	brlt	.-12     	; 0x56e <__divsf3_pse+0x6c>
 57a:	86 95       	lsr	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b7 95       	ror	r27
 582:	f7 95       	ror	r31
 584:	9f 5f       	subi	r25, 0xFF	; 255
 586:	c9 f7       	brne	.-14     	; 0x57a <__divsf3_pse+0x78>
 588:	88 0f       	add	r24, r24
 58a:	91 1d       	adc	r25, r1
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	97 f9       	bld	r25, 7
 592:	08 95       	ret
 594:	e1 e0       	ldi	r30, 0x01	; 1
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	bb 1f       	adc	r27, r27
 59e:	62 17       	cp	r22, r18
 5a0:	73 07       	cpc	r23, r19
 5a2:	84 07       	cpc	r24, r20
 5a4:	ba 07       	cpc	r27, r26
 5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__divsf3_pse+0xae>
 5a8:	62 1b       	sub	r22, r18
 5aa:	73 0b       	sbc	r23, r19
 5ac:	84 0b       	sbc	r24, r20
 5ae:	ba 0b       	sbc	r27, r26
 5b0:	ee 1f       	adc	r30, r30
 5b2:	88 f7       	brcc	.-30     	; 0x596 <__divsf3_pse+0x94>
 5b4:	e0 95       	com	r30
 5b6:	08 95       	ret

000005b8 <__fixunssfsi>:
 5b8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 5bc:	88 f0       	brcs	.+34     	; 0x5e0 <__fixunssfsi+0x28>
 5be:	9f 57       	subi	r25, 0x7F	; 127
 5c0:	98 f0       	brcs	.+38     	; 0x5e8 <__fixunssfsi+0x30>
 5c2:	b9 2f       	mov	r27, r25
 5c4:	99 27       	eor	r25, r25
 5c6:	b7 51       	subi	r27, 0x17	; 23
 5c8:	b0 f0       	brcs	.+44     	; 0x5f6 <__fixunssfsi+0x3e>
 5ca:	e1 f0       	breq	.+56     	; 0x604 <__fixunssfsi+0x4c>
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	1a f0       	brmi	.+6      	; 0x5dc <__fixunssfsi+0x24>
 5d6:	ba 95       	dec	r27
 5d8:	c9 f7       	brne	.-14     	; 0x5cc <__fixunssfsi+0x14>
 5da:	14 c0       	rjmp	.+40     	; 0x604 <__fixunssfsi+0x4c>
 5dc:	b1 30       	cpi	r27, 0x01	; 1
 5de:	91 f0       	breq	.+36     	; 0x604 <__fixunssfsi+0x4c>
 5e0:	0e 94 92 03 	call	0x724	; 0x724 <__fp_zero>
 5e4:	b1 e0       	ldi	r27, 0x01	; 1
 5e6:	08 95       	ret
 5e8:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 5ec:	67 2f       	mov	r22, r23
 5ee:	78 2f       	mov	r23, r24
 5f0:	88 27       	eor	r24, r24
 5f2:	b8 5f       	subi	r27, 0xF8	; 248
 5f4:	39 f0       	breq	.+14     	; 0x604 <__fixunssfsi+0x4c>
 5f6:	b9 3f       	cpi	r27, 0xF9	; 249
 5f8:	cc f3       	brlt	.-14     	; 0x5ec <__fixunssfsi+0x34>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b3 95       	inc	r27
 602:	d9 f7       	brne	.-10     	; 0x5fa <__fixunssfsi+0x42>
 604:	3e f4       	brtc	.+14     	; 0x614 <__fixunssfsi+0x5c>
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	08 95       	ret

00000616 <__floatunsisf>:
 616:	e8 94       	clt
 618:	09 c0       	rjmp	.+18     	; 0x62c <__floatsisf+0x12>

0000061a <__floatsisf>:
 61a:	97 fb       	bst	r25, 7
 61c:	3e f4       	brtc	.+14     	; 0x62c <__floatsisf+0x12>
 61e:	90 95       	com	r25
 620:	80 95       	com	r24
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	99 23       	and	r25, r25
 62e:	a9 f0       	breq	.+42     	; 0x65a <__floatsisf+0x40>
 630:	f9 2f       	mov	r31, r25
 632:	96 e9       	ldi	r25, 0x96	; 150
 634:	bb 27       	eor	r27, r27
 636:	93 95       	inc	r25
 638:	f6 95       	lsr	r31
 63a:	87 95       	ror	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b7 95       	ror	r27
 642:	f1 11       	cpse	r31, r1
 644:	f8 cf       	rjmp	.-16     	; 0x636 <__floatsisf+0x1c>
 646:	fa f4       	brpl	.+62     	; 0x686 <__floatsisf+0x6c>
 648:	bb 0f       	add	r27, r27
 64a:	11 f4       	brne	.+4      	; 0x650 <__floatsisf+0x36>
 64c:	60 ff       	sbrs	r22, 0
 64e:	1b c0       	rjmp	.+54     	; 0x686 <__floatsisf+0x6c>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	16 c0       	rjmp	.+44     	; 0x686 <__floatsisf+0x6c>
 65a:	88 23       	and	r24, r24
 65c:	11 f0       	breq	.+4      	; 0x662 <__floatsisf+0x48>
 65e:	96 e9       	ldi	r25, 0x96	; 150
 660:	11 c0       	rjmp	.+34     	; 0x684 <__floatsisf+0x6a>
 662:	77 23       	and	r23, r23
 664:	21 f0       	breq	.+8      	; 0x66e <__floatsisf+0x54>
 666:	9e e8       	ldi	r25, 0x8E	; 142
 668:	87 2f       	mov	r24, r23
 66a:	76 2f       	mov	r23, r22
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__floatsisf+0x5e>
 66e:	66 23       	and	r22, r22
 670:	71 f0       	breq	.+28     	; 0x68e <__floatsisf+0x74>
 672:	96 e8       	ldi	r25, 0x86	; 134
 674:	86 2f       	mov	r24, r22
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	2a f0       	brmi	.+10     	; 0x686 <__floatsisf+0x6c>
 67c:	9a 95       	dec	r25
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	da f7       	brpl	.-10     	; 0x67c <__floatsisf+0x62>
 686:	88 0f       	add	r24, r24
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret

00000690 <__fp_inf>:
 690:	97 f9       	bld	r25, 7
 692:	9f 67       	ori	r25, 0x7F	; 127
 694:	80 e8       	ldi	r24, 0x80	; 128
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	08 95       	ret

0000069c <__fp_nan>:
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	80 ec       	ldi	r24, 0xC0	; 192
 6a0:	08 95       	ret

000006a2 <__fp_pscA>:
 6a2:	00 24       	eor	r0, r0
 6a4:	0a 94       	dec	r0
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	09 06       	cpc	r0, r25
 6ae:	08 95       	ret

000006b0 <__fp_pscB>:
 6b0:	00 24       	eor	r0, r0
 6b2:	0a 94       	dec	r0
 6b4:	12 16       	cp	r1, r18
 6b6:	13 06       	cpc	r1, r19
 6b8:	14 06       	cpc	r1, r20
 6ba:	05 06       	cpc	r0, r21
 6bc:	08 95       	ret

000006be <__fp_round>:
 6be:	09 2e       	mov	r0, r25
 6c0:	03 94       	inc	r0
 6c2:	00 0c       	add	r0, r0
 6c4:	11 f4       	brne	.+4      	; 0x6ca <__fp_round+0xc>
 6c6:	88 23       	and	r24, r24
 6c8:	52 f0       	brmi	.+20     	; 0x6de <__fp_round+0x20>
 6ca:	bb 0f       	add	r27, r27
 6cc:	40 f4       	brcc	.+16     	; 0x6de <__fp_round+0x20>
 6ce:	bf 2b       	or	r27, r31
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <__fp_round+0x18>
 6d2:	60 ff       	sbrs	r22, 0
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <__fp_round+0x20>
 6d6:	6f 5f       	subi	r22, 0xFF	; 255
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	08 95       	ret

000006e0 <__fp_split3>:
 6e0:	57 fd       	sbrc	r21, 7
 6e2:	90 58       	subi	r25, 0x80	; 128
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	59 f0       	breq	.+22     	; 0x700 <__fp_splitA+0x10>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	71 f0       	breq	.+28     	; 0x70a <__fp_splitA+0x1a>
 6ee:	47 95       	ror	r20

000006f0 <__fp_splitA>:
 6f0:	88 0f       	add	r24, r24
 6f2:	97 fb       	bst	r25, 7
 6f4:	99 1f       	adc	r25, r25
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_splitA+0x20>
 6f8:	9f 3f       	cpi	r25, 0xFF	; 255
 6fa:	79 f0       	breq	.+30     	; 0x71a <__fp_splitA+0x2a>
 6fc:	87 95       	ror	r24
 6fe:	08 95       	ret
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	55 1f       	adc	r21, r21
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <__fp_split3+0xe>
 70a:	46 95       	lsr	r20
 70c:	f1 df       	rcall	.-30     	; 0x6f0 <__fp_splitA>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <__fp_splitA+0x30>
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	99 1f       	adc	r25, r25
 718:	f1 cf       	rjmp	.-30     	; 0x6fc <__fp_splitA+0xc>
 71a:	86 95       	lsr	r24
 71c:	71 05       	cpc	r23, r1
 71e:	61 05       	cpc	r22, r1
 720:	08 94       	sec
 722:	08 95       	ret

00000724 <__fp_zero>:
 724:	e8 94       	clt

00000726 <__fp_szero>:
 726:	bb 27       	eor	r27, r27
 728:	66 27       	eor	r22, r22
 72a:	77 27       	eor	r23, r23
 72c:	cb 01       	movw	r24, r22
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__mulsf3>:
 732:	0e 94 ac 03 	call	0x758	; 0x758 <__mulsf3x>
 736:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 73a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 73e:	38 f0       	brcs	.+14     	; 0x74e <__mulsf3+0x1c>
 740:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 744:	20 f0       	brcs	.+8      	; 0x74e <__mulsf3+0x1c>
 746:	95 23       	and	r25, r21
 748:	11 f0       	breq	.+4      	; 0x74e <__mulsf3+0x1c>
 74a:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 74e:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>
 752:	11 24       	eor	r1, r1
 754:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>

00000758 <__mulsf3x>:
 758:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 75c:	70 f3       	brcs	.-36     	; 0x73a <__mulsf3+0x8>

0000075e <__mulsf3_pse>:
 75e:	95 9f       	mul	r25, r21
 760:	c1 f3       	breq	.-16     	; 0x752 <__mulsf3+0x20>
 762:	95 0f       	add	r25, r21
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	55 1f       	adc	r21, r21
 768:	62 9f       	mul	r22, r18
 76a:	f0 01       	movw	r30, r0
 76c:	72 9f       	mul	r23, r18
 76e:	bb 27       	eor	r27, r27
 770:	f0 0d       	add	r31, r0
 772:	b1 1d       	adc	r27, r1
 774:	63 9f       	mul	r22, r19
 776:	aa 27       	eor	r26, r26
 778:	f0 0d       	add	r31, r0
 77a:	b1 1d       	adc	r27, r1
 77c:	aa 1f       	adc	r26, r26
 77e:	64 9f       	mul	r22, r20
 780:	66 27       	eor	r22, r22
 782:	b0 0d       	add	r27, r0
 784:	a1 1d       	adc	r26, r1
 786:	66 1f       	adc	r22, r22
 788:	82 9f       	mul	r24, r18
 78a:	22 27       	eor	r18, r18
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	62 1f       	adc	r22, r18
 792:	73 9f       	mul	r23, r19
 794:	b0 0d       	add	r27, r0
 796:	a1 1d       	adc	r26, r1
 798:	62 1f       	adc	r22, r18
 79a:	83 9f       	mul	r24, r19
 79c:	a0 0d       	add	r26, r0
 79e:	61 1d       	adc	r22, r1
 7a0:	22 1f       	adc	r18, r18
 7a2:	74 9f       	mul	r23, r20
 7a4:	33 27       	eor	r19, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	23 1f       	adc	r18, r19
 7ac:	84 9f       	mul	r24, r20
 7ae:	60 0d       	add	r22, r0
 7b0:	21 1d       	adc	r18, r1
 7b2:	82 2f       	mov	r24, r18
 7b4:	76 2f       	mov	r23, r22
 7b6:	6a 2f       	mov	r22, r26
 7b8:	11 24       	eor	r1, r1
 7ba:	9f 57       	subi	r25, 0x7F	; 127
 7bc:	50 40       	sbci	r21, 0x00	; 0
 7be:	9a f0       	brmi	.+38     	; 0x7e6 <__mulsf3_pse+0x88>
 7c0:	f1 f0       	breq	.+60     	; 0x7fe <__mulsf3_pse+0xa0>
 7c2:	88 23       	and	r24, r24
 7c4:	4a f0       	brmi	.+18     	; 0x7d8 <__mulsf3_pse+0x7a>
 7c6:	ee 0f       	add	r30, r30
 7c8:	ff 1f       	adc	r31, r31
 7ca:	bb 1f       	adc	r27, r27
 7cc:	66 1f       	adc	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	50 40       	sbci	r21, 0x00	; 0
 7d6:	a9 f7       	brne	.-22     	; 0x7c2 <__mulsf3_pse+0x64>
 7d8:	9e 3f       	cpi	r25, 0xFE	; 254
 7da:	51 05       	cpc	r21, r1
 7dc:	80 f0       	brcs	.+32     	; 0x7fe <__mulsf3_pse+0xa0>
 7de:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 7e2:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	e4 f3       	brlt	.-8      	; 0x7e2 <__mulsf3_pse+0x84>
 7ea:	98 3e       	cpi	r25, 0xE8	; 232
 7ec:	d4 f3       	brlt	.-12     	; 0x7e2 <__mulsf3_pse+0x84>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	e7 95       	ror	r30
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	c1 f7       	brne	.-16     	; 0x7ee <__mulsf3_pse+0x90>
 7fe:	fe 2b       	or	r31, r30
 800:	88 0f       	add	r24, r24
 802:	91 1d       	adc	r25, r1
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <round>:
 80c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 810:	e8 f0       	brcs	.+58     	; 0x84c <round+0x40>
 812:	9e 37       	cpi	r25, 0x7E	; 126
 814:	e8 f0       	brcs	.+58     	; 0x850 <round+0x44>
 816:	96 39       	cpi	r25, 0x96	; 150
 818:	b8 f4       	brcc	.+46     	; 0x848 <round+0x3c>
 81a:	9e 38       	cpi	r25, 0x8E	; 142
 81c:	48 f4       	brcc	.+18     	; 0x830 <round+0x24>
 81e:	67 2f       	mov	r22, r23
 820:	78 2f       	mov	r23, r24
 822:	88 27       	eor	r24, r24
 824:	98 5f       	subi	r25, 0xF8	; 248
 826:	f9 cf       	rjmp	.-14     	; 0x81a <round+0xe>
 828:	86 95       	lsr	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	93 95       	inc	r25
 830:	95 39       	cpi	r25, 0x95	; 149
 832:	d0 f3       	brcs	.-12     	; 0x828 <round+0x1c>
 834:	b6 2f       	mov	r27, r22
 836:	b1 70       	andi	r27, 0x01	; 1
 838:	6b 0f       	add	r22, r27
 83a:	71 1d       	adc	r23, r1
 83c:	81 1d       	adc	r24, r1
 83e:	20 f4       	brcc	.+8      	; 0x848 <round+0x3c>
 840:	87 95       	ror	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	93 95       	inc	r25
 848:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_mintl>
 84c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_mpack>
 850:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>

00000854 <__fp_mintl>:
 854:	88 23       	and	r24, r24
 856:	71 f4       	brne	.+28     	; 0x874 <__fp_mintl+0x20>
 858:	77 23       	and	r23, r23
 85a:	21 f0       	breq	.+8      	; 0x864 <__fp_mintl+0x10>
 85c:	98 50       	subi	r25, 0x08	; 8
 85e:	87 2b       	or	r24, r23
 860:	76 2f       	mov	r23, r22
 862:	07 c0       	rjmp	.+14     	; 0x872 <__fp_mintl+0x1e>
 864:	66 23       	and	r22, r22
 866:	11 f4       	brne	.+4      	; 0x86c <__fp_mintl+0x18>
 868:	99 27       	eor	r25, r25
 86a:	0d c0       	rjmp	.+26     	; 0x886 <__fp_mintl+0x32>
 86c:	90 51       	subi	r25, 0x10	; 16
 86e:	86 2b       	or	r24, r22
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	2a f0       	brmi	.+10     	; 0x880 <__fp_mintl+0x2c>
 876:	9a 95       	dec	r25
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	da f7       	brpl	.-10     	; 0x876 <__fp_mintl+0x22>
 880:	88 0f       	add	r24, r24
 882:	96 95       	lsr	r25
 884:	87 95       	ror	r24
 886:	97 f9       	bld	r25, 7
 888:	08 95       	ret

0000088a <__fp_mpack>:
 88a:	9f 3f       	cpi	r25, 0xFF	; 255
 88c:	31 f0       	breq	.+12     	; 0x89a <__fp_mpack_finite+0xc>

0000088e <__fp_mpack_finite>:
 88e:	91 50       	subi	r25, 0x01	; 1
 890:	20 f4       	brcc	.+8      	; 0x89a <__fp_mpack_finite+0xc>
 892:	87 95       	ror	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b7 95       	ror	r27
 89a:	88 0f       	add	r24, r24
 89c:	91 1d       	adc	r25, r1
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret

000008a6 <_exit>:
 8a6:	f8 94       	cli

000008a8 <__stop_program>:
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <__stop_program>
