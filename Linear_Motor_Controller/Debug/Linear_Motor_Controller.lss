
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000082c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093b  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072b  00000000  00000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000411  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030b  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_11>
  30:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_14>
  3c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  88:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <driverTimers_Init>:
#define TOGGLE_SW4 PORTD ^= (1<<PD6)



void driverTimers_Init(){
 	TCCR0B |= (1<<CS00); //Set up 8bit timer to use 8MHZ clock
  90:	85 b5       	in	r24, 0x25	; 37
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bd       	out	0x25, r24	; 37
 	OCR0A = DEAD_TIME_COUNT_HIGH; //DEAD_TIME_COUNT_HIGH;	
  96:	80 ed       	ldi	r24, 0xD0	; 208
  98:	87 bd       	out	0x27, r24	; 39
 	OCR0B = DEAD_TIME_COUNT_LOW; //DEAD_TIME_COUNT_LOW;			//Initializing dead times which remain constant		
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	88 bd       	out	0x28, r24	; 40

	TCCR1B |= (1<<CS11);//Set up 16 bit timer with pre-scaler 8
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	DDRB = (1 << DDB0); //Configuring driver pins to output
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
  ac:	80 ee       	ldi	r24, 0xE0	; 224
  ae:	8a b9       	out	0x0a, r24	; 10
			//CLEAR ALL OUTPUT PINS except for switch 1 & 4
	PORTB |= (1<<PB0);
  b0:	28 9a       	sbi	0x05, 0	; 5
	PORTD &= ~(1<<PD5);
  b2:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<PD7);
  b4:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= (1<<PD6);
  b6:	5e 9a       	sbi	0x0b, 6	; 11
	
	isNegativeCycle = false; 
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  bc:	08 95       	ret

000000be <setFrequency>:
	
}

void setFrequency(float frequency, float dutyCycle){
  be:	4f 92       	push	r4
  c0:	5f 92       	push	r5
  c2:	6f 92       	push	r6
  c4:	7f 92       	push	r7
  c6:	8f 92       	push	r8
  c8:	9f 92       	push	r9
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	2b 01       	movw	r4, r22
  d8:	3c 01       	movw	r6, r24
  da:	69 01       	movw	r12, r18
  dc:	7a 01       	movw	r14, r20
	float OFFTime = 1000.0/ (frequency*(2+ MAGNITUDE_DELAY + (2*dutyCycle)/(1-dutyCycle))); //Find T_ON, T_OFF1, T_OFF2 from given frequency
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	9f e3       	ldi	r25, 0x3F	; 63
  e6:	0e 94 84 01 	call	0x308	; 0x308 <__subsf3>
  ea:	4b 01       	movw	r8, r22
  ec:	5c 01       	movw	r10, r24
 	T_OFF1 = (uint16_t) (round(1000*OFFTime)); 
  ee:	a7 01       	movw	r20, r14
  f0:	96 01       	movw	r18, r12
  f2:	c7 01       	movw	r24, r14
  f4:	b6 01       	movw	r22, r12
  f6:	0e 94 85 01 	call	0x30a	; 0x30a <__addsf3>
  fa:	a5 01       	movw	r20, r10
  fc:	94 01       	movw	r18, r8
  fe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__divsf3>
 102:	2d ec       	ldi	r18, 0xCD	; 205
 104:	3c ec       	ldi	r19, 0xCC	; 204
 106:	4c e0       	ldi	r20, 0x0C	; 12
 108:	50 e4       	ldi	r21, 0x40	; 64
 10a:	0e 94 85 01 	call	0x30a	; 0x30a <__addsf3>
 10e:	a3 01       	movw	r20, r6
 110:	92 01       	movw	r18, r4
 112:	0e 94 20 03 	call	0x640	; 0x640 <__mulsf3>
 116:	9b 01       	movw	r18, r22
 118:	ac 01       	movw	r20, r24
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	8a e7       	ldi	r24, 0x7A	; 122
 120:	94 e4       	ldi	r25, 0x44	; 68
 122:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__divsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	4a e7       	ldi	r20, 0x7A	; 122
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	0e 94 20 03 	call	0x640	; 0x640 <__mulsf3>
 132:	0e 94 8d 03 	call	0x71a	; 0x71a <round>
 136:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fixunssfsi>
 13a:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <T_OFF1+0x1>
 13e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <T_OFF1>
// 	T_OFF2 = (uint16_t) (round(OFFTime*1000.0 * (1.0+MAGNITUDE_DELAY)));
// 	
	T_ON = dutyCycle * T_OFF1/ (1-dutyCycle);
 142:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <T_OFF1>
 146:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <T_OFF1+0x1>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 92 02 	call	0x524	; 0x524 <__floatunsisf>
 152:	a7 01       	movw	r20, r14
 154:	96 01       	movw	r18, r12
 156:	0e 94 20 03 	call	0x640	; 0x640 <__mulsf3>
 15a:	a5 01       	movw	r20, r10
 15c:	94 01       	movw	r18, r8
 15e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__divsf3>
 162:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fixunssfsi>
 166:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <T_ON+0x1>
 16a:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <T_ON>
	OCR1A = T_ON + T_OFF1;
 16e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <T_ON>
 172:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <T_ON+0x1>
 176:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <T_OFF1>
 17a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <T_OFF1+0x1>
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = T_ON;
 18a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <T_ON>
 18e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <T_ON+0x1>
 192:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 196:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	//OCR1A = T_ON + (DEAD_TIME_COUNT_HIGH*8) + T_OFF1;
}
 19a:	ff 90       	pop	r15
 19c:	ef 90       	pop	r14
 19e:	df 90       	pop	r13
 1a0:	cf 90       	pop	r12
 1a2:	bf 90       	pop	r11
 1a4:	af 90       	pop	r10
 1a6:	9f 90       	pop	r9
 1a8:	8f 90       	pop	r8
 1aa:	7f 90       	pop	r7
 1ac:	6f 90       	pop	r6
 1ae:	5f 90       	pop	r5
 1b0:	4f 90       	pop	r4
 1b2:	08 95       	ret

000001b4 <driverTimersInterrupts_Init>:

void driverTimersInterrupts_Init(){
	sei();									//Enable global interrupts	
 1b4:	78 94       	sei
	TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);	// Enable on/off time timer compare match interrupts
 1b6:	ef e6       	ldi	r30, 0x6F	; 111
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret

000001c2 <__vector_15>:

}

  ISR(TIMER0_COMPB_vect){
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	TIMSK0 &= ~(1<<OCIE0B);
 1d4:	ee e6       	ldi	r30, 0x6E	; 110
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	8b 7f       	andi	r24, 0xFB	; 251
 1dc:	80 83       	st	Z, r24
	TCNT1 = 0;
 1de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 		
		if (isNegativeCycle){		//Set pins for next half cycle
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ea:	88 23       	and	r24, r24
 1ec:	29 f0       	breq	.+10     	; 0x1f8 <__vector_15+0x36>
			TOGGLE_SW1; //sets pins for positive cycle
 1ee:	95 b1       	in	r25, 0x05	; 5
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	89 27       	eor	r24, r25
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <__vector_15+0x3e>
			} else {
			TOGGLE_SW2;//set pins on for positive cycle
 1f8:	9b b1       	in	r25, 0x0b	; 11
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	89 27       	eor	r24, r25
 1fe:	8b b9       	out	0x0b, r24	; 11
		}
		isNegativeCycle = !isNegativeCycle; //set flag to indicate next half cycle
 200:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	89 27       	eor	r24, r25
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  }
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_14>:

 																		
ISR(TIMER0_COMPA_vect){
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	TIMSK0 &= ~(1<<OCIE0A);	//turn off compare A interrupt enable
 230:	ee e6       	ldi	r30, 0x6E	; 110
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	80 83       	st	Z, r24
	if (isNegativeCycle){
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 23e:	88 23       	and	r24, r24
 240:	29 f0       	breq	.+10     	; 0x24c <__vector_14+0x2e>
		TOGGLE_SW4;
 242:	9b b1       	in	r25, 0x0b	; 11
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	89 27       	eor	r24, r25
 248:	8b b9       	out	0x0b, r24	; 11
 24a:	03 c0       	rjmp	.+6      	; 0x252 <__vector_14+0x34>
	} else {
		TOGGLE_SW3; 
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	80 58       	subi	r24, 0x80	; 128
 250:	8b b9       	out	0x0b, r24	; 11
	}									// Disable high dead time timer interrupts

}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_12>:

ISR(TIMER1_COMPB_vect){// Set up timer0 compare match ISRs
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
 	if (isNegativeCycle){		//set timer 1 on/off timer compare value to correct value 
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27a:	88 23       	and	r24, r24
 27c:	29 f0       	breq	.+10     	; 0x288 <__vector_12+0x24>
 		TOGGLE_SW2; //turn off SW2
 27e:	9b b1       	in	r25, 0x0b	; 11
 280:	80 e2       	ldi	r24, 0x20	; 32
 282:	89 27       	eor	r24, r25
 284:	8b b9       	out	0x0b, r24	; 11
 286:	04 c0       	rjmp	.+8      	; 0x290 <__vector_12+0x2c>
		//OCR1A = T_ON + (DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8 + T_OFF1;
 	} else {
 		//OCR1A = T_ON + (DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8 + T_OFF2;
 		TOGGLE_SW1; //TURN OFF SWITCH 1
 288:	95 b1       	in	r25, 0x05	; 5
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	89 27       	eor	r24, r25
 28e:	85 b9       	out	0x05, r24	; 5

 	}

	TCNT0=0; 													//clear counter to start dead time timer
 290:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A);										// Enable dead time timer compare match A interrupts
 292:	ee e6       	ldi	r30, 0x6E	; 110
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
}	
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_11>:

	
ISR(TIMER1_COMPA_vect){
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
	
		if (isNegativeCycle){
 2bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c0:	88 23       	and	r24, r24
 2c2:	21 f0       	breq	.+8      	; 0x2cc <__vector_11+0x1e>
 			TOGGLE_SW3;
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	80 58       	subi	r24, 0x80	; 128
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <__vector_11+0x26>
 		} else {
 			TOGGLE_SW4; //turns off switch 4
 2cc:	9b b1       	in	r25, 0x0b	; 11
 2ce:	80 e4       	ldi	r24, 0x40	; 64
 2d0:	89 27       	eor	r24, r25
 2d2:	8b b9       	out	0x0b, r24	; 11
 		}
 			TCNT0 = 0 ; //reset timer 0
 2d4:	16 bc       	out	0x26, r1	; 38
 			TIMSK0 = (1<<OCIE0B); //enable low deadtime timer interrupts		
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <main>:
	*/
	
	float frequency = 9;
	float dutyCycle= 0.1; //must be greater than 0, less that 1
	
	setFrequency(frequency, dutyCycle);//acquire on/off times or alternatively could manually set on and off times
 2ea:	2d ec       	ldi	r18, 0xCD	; 205
 2ec:	3c ec       	ldi	r19, 0xCC	; 204
 2ee:	4c ec       	ldi	r20, 0xCC	; 204
 2f0:	5d e3       	ldi	r21, 0x3D	; 61
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e1       	ldi	r24, 0x10	; 16
 2f8:	91 e4       	ldi	r25, 0x41	; 65
 2fa:	0e 94 5f 00 	call	0xbe	; 0xbe <setFrequency>
	driverTimers_Init();
 2fe:	0e 94 48 00 	call	0x90	; 0x90 <driverTimers_Init>
	driverTimersInterrupts_Init();
 302:	0e 94 da 00 	call	0x1b4	; 0x1b4 <driverTimersInterrupts_Init>
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0x1c>

00000308 <__subsf3>:
 308:	50 58       	subi	r21, 0x80	; 128

0000030a <__addsf3>:
 30a:	bb 27       	eor	r27, r27
 30c:	aa 27       	eor	r26, r26
 30e:	0e 94 9c 01 	call	0x338	; 0x338 <__addsf3x>
 312:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_round>
 316:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_pscA>
 31a:	38 f0       	brcs	.+14     	; 0x32a <__addsf3+0x20>
 31c:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscB>
 320:	20 f0       	brcs	.+8      	; 0x32a <__addsf3+0x20>
 322:	39 f4       	brne	.+14     	; 0x332 <__addsf3+0x28>
 324:	9f 3f       	cpi	r25, 0xFF	; 255
 326:	19 f4       	brne	.+6      	; 0x32e <__addsf3+0x24>
 328:	26 f4       	brtc	.+8      	; 0x332 <__addsf3+0x28>
 32a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>
 32e:	0e f4       	brtc	.+2      	; 0x332 <__addsf3+0x28>
 330:	e0 95       	com	r30
 332:	e7 fb       	bst	r30, 7
 334:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>

00000338 <__addsf3x>:
 338:	e9 2f       	mov	r30, r25
 33a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_split3>
 33e:	58 f3       	brcs	.-42     	; 0x316 <__addsf3+0xc>
 340:	ba 17       	cp	r27, r26
 342:	62 07       	cpc	r22, r18
 344:	73 07       	cpc	r23, r19
 346:	84 07       	cpc	r24, r20
 348:	95 07       	cpc	r25, r21
 34a:	20 f0       	brcs	.+8      	; 0x354 <__addsf3x+0x1c>
 34c:	79 f4       	brne	.+30     	; 0x36c <__addsf3x+0x34>
 34e:	a6 f5       	brtc	.+104    	; 0x3b8 <__addsf3x+0x80>
 350:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_zero>
 354:	0e f4       	brtc	.+2      	; 0x358 <__addsf3x+0x20>
 356:	e0 95       	com	r30
 358:	0b 2e       	mov	r0, r27
 35a:	ba 2f       	mov	r27, r26
 35c:	a0 2d       	mov	r26, r0
 35e:	0b 01       	movw	r0, r22
 360:	b9 01       	movw	r22, r18
 362:	90 01       	movw	r18, r0
 364:	0c 01       	movw	r0, r24
 366:	ca 01       	movw	r24, r20
 368:	a0 01       	movw	r20, r0
 36a:	11 24       	eor	r1, r1
 36c:	ff 27       	eor	r31, r31
 36e:	59 1b       	sub	r21, r25
 370:	99 f0       	breq	.+38     	; 0x398 <__addsf3x+0x60>
 372:	59 3f       	cpi	r21, 0xF9	; 249
 374:	50 f4       	brcc	.+20     	; 0x38a <__addsf3x+0x52>
 376:	50 3e       	cpi	r21, 0xE0	; 224
 378:	68 f1       	brcs	.+90     	; 0x3d4 <__addsf3x+0x9c>
 37a:	1a 16       	cp	r1, r26
 37c:	f0 40       	sbci	r31, 0x00	; 0
 37e:	a2 2f       	mov	r26, r18
 380:	23 2f       	mov	r18, r19
 382:	34 2f       	mov	r19, r20
 384:	44 27       	eor	r20, r20
 386:	58 5f       	subi	r21, 0xF8	; 248
 388:	f3 cf       	rjmp	.-26     	; 0x370 <__addsf3x+0x38>
 38a:	46 95       	lsr	r20
 38c:	37 95       	ror	r19
 38e:	27 95       	ror	r18
 390:	a7 95       	ror	r26
 392:	f0 40       	sbci	r31, 0x00	; 0
 394:	53 95       	inc	r21
 396:	c9 f7       	brne	.-14     	; 0x38a <__addsf3x+0x52>
 398:	7e f4       	brtc	.+30     	; 0x3b8 <__addsf3x+0x80>
 39a:	1f 16       	cp	r1, r31
 39c:	ba 0b       	sbc	r27, r26
 39e:	62 0b       	sbc	r22, r18
 3a0:	73 0b       	sbc	r23, r19
 3a2:	84 0b       	sbc	r24, r20
 3a4:	ba f0       	brmi	.+46     	; 0x3d4 <__addsf3x+0x9c>
 3a6:	91 50       	subi	r25, 0x01	; 1
 3a8:	a1 f0       	breq	.+40     	; 0x3d2 <__addsf3x+0x9a>
 3aa:	ff 0f       	add	r31, r31
 3ac:	bb 1f       	adc	r27, r27
 3ae:	66 1f       	adc	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	c2 f7       	brpl	.-16     	; 0x3a6 <__addsf3x+0x6e>
 3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <__addsf3x+0x9c>
 3b8:	ba 0f       	add	r27, r26
 3ba:	62 1f       	adc	r22, r18
 3bc:	73 1f       	adc	r23, r19
 3be:	84 1f       	adc	r24, r20
 3c0:	48 f4       	brcc	.+18     	; 0x3d4 <__addsf3x+0x9c>
 3c2:	87 95       	ror	r24
 3c4:	77 95       	ror	r23
 3c6:	67 95       	ror	r22
 3c8:	b7 95       	ror	r27
 3ca:	f7 95       	ror	r31
 3cc:	9e 3f       	cpi	r25, 0xFE	; 254
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <__addsf3x+0x9a>
 3d0:	b0 cf       	rjmp	.-160    	; 0x332 <__addsf3+0x28>
 3d2:	93 95       	inc	r25
 3d4:	88 0f       	add	r24, r24
 3d6:	08 f0       	brcs	.+2      	; 0x3da <__addsf3x+0xa2>
 3d8:	99 27       	eor	r25, r25
 3da:	ee 0f       	add	r30, r30
 3dc:	97 95       	ror	r25
 3de:	87 95       	ror	r24
 3e0:	08 95       	ret

000003e2 <__divsf3>:
 3e2:	0e 94 05 02 	call	0x40a	; 0x40a <__divsf3x>
 3e6:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_round>
 3ea:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscB>
 3ee:	58 f0       	brcs	.+22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_pscA>
 3f4:	40 f0       	brcs	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	29 f4       	brne	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	5f 3f       	cpi	r21, 0xFF	; 255
 3fa:	29 f0       	breq	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 400:	51 11       	cpse	r21, r1
 402:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 406:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>

0000040a <__divsf3x>:
 40a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_split3>
 40e:	68 f3       	brcs	.-38     	; 0x3ea <__divsf3+0x8>

00000410 <__divsf3_pse>:
 410:	99 23       	and	r25, r25
 412:	b1 f3       	breq	.-20     	; 0x400 <__LOCK_REGION_LENGTH__>
 414:	55 23       	and	r21, r21
 416:	91 f3       	breq	.-28     	; 0x3fc <__divsf3+0x1a>
 418:	95 1b       	sub	r25, r21
 41a:	55 0b       	sbc	r21, r21
 41c:	bb 27       	eor	r27, r27
 41e:	aa 27       	eor	r26, r26
 420:	62 17       	cp	r22, r18
 422:	73 07       	cpc	r23, r19
 424:	84 07       	cpc	r24, r20
 426:	38 f0       	brcs	.+14     	; 0x436 <__divsf3_pse+0x26>
 428:	9f 5f       	subi	r25, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	44 1f       	adc	r20, r20
 432:	aa 1f       	adc	r26, r26
 434:	a9 f3       	breq	.-22     	; 0x420 <__divsf3_pse+0x10>
 436:	35 d0       	rcall	.+106    	; 0x4a2 <__divsf3_pse+0x92>
 438:	0e 2e       	mov	r0, r30
 43a:	3a f0       	brmi	.+14     	; 0x44a <__divsf3_pse+0x3a>
 43c:	e0 e8       	ldi	r30, 0x80	; 128
 43e:	32 d0       	rcall	.+100    	; 0x4a4 <__divsf3_pse+0x94>
 440:	91 50       	subi	r25, 0x01	; 1
 442:	50 40       	sbci	r21, 0x00	; 0
 444:	e6 95       	lsr	r30
 446:	00 1c       	adc	r0, r0
 448:	ca f7       	brpl	.-14     	; 0x43c <__divsf3_pse+0x2c>
 44a:	2b d0       	rcall	.+86     	; 0x4a2 <__divsf3_pse+0x92>
 44c:	fe 2f       	mov	r31, r30
 44e:	29 d0       	rcall	.+82     	; 0x4a2 <__divsf3_pse+0x92>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	bb 1f       	adc	r27, r27
 458:	26 17       	cp	r18, r22
 45a:	37 07       	cpc	r19, r23
 45c:	48 07       	cpc	r20, r24
 45e:	ab 07       	cpc	r26, r27
 460:	b0 e8       	ldi	r27, 0x80	; 128
 462:	09 f0       	breq	.+2      	; 0x466 <__divsf3_pse+0x56>
 464:	bb 0b       	sbc	r27, r27
 466:	80 2d       	mov	r24, r0
 468:	bf 01       	movw	r22, r30
 46a:	ff 27       	eor	r31, r31
 46c:	93 58       	subi	r25, 0x83	; 131
 46e:	5f 4f       	sbci	r21, 0xFF	; 255
 470:	3a f0       	brmi	.+14     	; 0x480 <__divsf3_pse+0x70>
 472:	9e 3f       	cpi	r25, 0xFE	; 254
 474:	51 05       	cpc	r21, r1
 476:	78 f0       	brcs	.+30     	; 0x496 <__divsf3_pse+0x86>
 478:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 47c:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 480:	5f 3f       	cpi	r21, 0xFF	; 255
 482:	e4 f3       	brlt	.-8      	; 0x47c <__divsf3_pse+0x6c>
 484:	98 3e       	cpi	r25, 0xE8	; 232
 486:	d4 f3       	brlt	.-12     	; 0x47c <__divsf3_pse+0x6c>
 488:	86 95       	lsr	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f7 95       	ror	r31
 492:	9f 5f       	subi	r25, 0xFF	; 255
 494:	c9 f7       	brne	.-14     	; 0x488 <__divsf3_pse+0x78>
 496:	88 0f       	add	r24, r24
 498:	91 1d       	adc	r25, r1
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	97 f9       	bld	r25, 7
 4a0:	08 95       	ret
 4a2:	e1 e0       	ldi	r30, 0x01	; 1
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	bb 1f       	adc	r27, r27
 4ac:	62 17       	cp	r22, r18
 4ae:	73 07       	cpc	r23, r19
 4b0:	84 07       	cpc	r24, r20
 4b2:	ba 07       	cpc	r27, r26
 4b4:	20 f0       	brcs	.+8      	; 0x4be <__divsf3_pse+0xae>
 4b6:	62 1b       	sub	r22, r18
 4b8:	73 0b       	sbc	r23, r19
 4ba:	84 0b       	sbc	r24, r20
 4bc:	ba 0b       	sbc	r27, r26
 4be:	ee 1f       	adc	r30, r30
 4c0:	88 f7       	brcc	.-30     	; 0x4a4 <__divsf3_pse+0x94>
 4c2:	e0 95       	com	r30
 4c4:	08 95       	ret

000004c6 <__fixunssfsi>:
 4c6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_splitA>
 4ca:	88 f0       	brcs	.+34     	; 0x4ee <__fixunssfsi+0x28>
 4cc:	9f 57       	subi	r25, 0x7F	; 127
 4ce:	98 f0       	brcs	.+38     	; 0x4f6 <__fixunssfsi+0x30>
 4d0:	b9 2f       	mov	r27, r25
 4d2:	99 27       	eor	r25, r25
 4d4:	b7 51       	subi	r27, 0x17	; 23
 4d6:	b0 f0       	brcs	.+44     	; 0x504 <__fixunssfsi+0x3e>
 4d8:	e1 f0       	breq	.+56     	; 0x512 <__fixunssfsi+0x4c>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	88 1f       	adc	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	1a f0       	brmi	.+6      	; 0x4ea <__fixunssfsi+0x24>
 4e4:	ba 95       	dec	r27
 4e6:	c9 f7       	brne	.-14     	; 0x4da <__fixunssfsi+0x14>
 4e8:	14 c0       	rjmp	.+40     	; 0x512 <__fixunssfsi+0x4c>
 4ea:	b1 30       	cpi	r27, 0x01	; 1
 4ec:	91 f0       	breq	.+36     	; 0x512 <__fixunssfsi+0x4c>
 4ee:	0e 94 19 03 	call	0x632	; 0x632 <__fp_zero>
 4f2:	b1 e0       	ldi	r27, 0x01	; 1
 4f4:	08 95       	ret
 4f6:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_zero>
 4fa:	67 2f       	mov	r22, r23
 4fc:	78 2f       	mov	r23, r24
 4fe:	88 27       	eor	r24, r24
 500:	b8 5f       	subi	r27, 0xF8	; 248
 502:	39 f0       	breq	.+14     	; 0x512 <__fixunssfsi+0x4c>
 504:	b9 3f       	cpi	r27, 0xF9	; 249
 506:	cc f3       	brlt	.-14     	; 0x4fa <__fixunssfsi+0x34>
 508:	86 95       	lsr	r24
 50a:	77 95       	ror	r23
 50c:	67 95       	ror	r22
 50e:	b3 95       	inc	r27
 510:	d9 f7       	brne	.-10     	; 0x508 <__fixunssfsi+0x42>
 512:	3e f4       	brtc	.+14     	; 0x522 <__fixunssfsi+0x5c>
 514:	90 95       	com	r25
 516:	80 95       	com	r24
 518:	70 95       	com	r23
 51a:	61 95       	neg	r22
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	08 95       	ret

00000524 <__floatunsisf>:
 524:	e8 94       	clt
 526:	09 c0       	rjmp	.+18     	; 0x53a <__floatsisf+0x12>

00000528 <__floatsisf>:
 528:	97 fb       	bst	r25, 7
 52a:	3e f4       	brtc	.+14     	; 0x53a <__floatsisf+0x12>
 52c:	90 95       	com	r25
 52e:	80 95       	com	r24
 530:	70 95       	com	r23
 532:	61 95       	neg	r22
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	99 23       	and	r25, r25
 53c:	a9 f0       	breq	.+42     	; 0x568 <__floatsisf+0x40>
 53e:	f9 2f       	mov	r31, r25
 540:	96 e9       	ldi	r25, 0x96	; 150
 542:	bb 27       	eor	r27, r27
 544:	93 95       	inc	r25
 546:	f6 95       	lsr	r31
 548:	87 95       	ror	r24
 54a:	77 95       	ror	r23
 54c:	67 95       	ror	r22
 54e:	b7 95       	ror	r27
 550:	f1 11       	cpse	r31, r1
 552:	f8 cf       	rjmp	.-16     	; 0x544 <__floatsisf+0x1c>
 554:	fa f4       	brpl	.+62     	; 0x594 <__floatsisf+0x6c>
 556:	bb 0f       	add	r27, r27
 558:	11 f4       	brne	.+4      	; 0x55e <__floatsisf+0x36>
 55a:	60 ff       	sbrs	r22, 0
 55c:	1b c0       	rjmp	.+54     	; 0x594 <__floatsisf+0x6c>
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	16 c0       	rjmp	.+44     	; 0x594 <__floatsisf+0x6c>
 568:	88 23       	and	r24, r24
 56a:	11 f0       	breq	.+4      	; 0x570 <__floatsisf+0x48>
 56c:	96 e9       	ldi	r25, 0x96	; 150
 56e:	11 c0       	rjmp	.+34     	; 0x592 <__floatsisf+0x6a>
 570:	77 23       	and	r23, r23
 572:	21 f0       	breq	.+8      	; 0x57c <__floatsisf+0x54>
 574:	9e e8       	ldi	r25, 0x8E	; 142
 576:	87 2f       	mov	r24, r23
 578:	76 2f       	mov	r23, r22
 57a:	05 c0       	rjmp	.+10     	; 0x586 <__floatsisf+0x5e>
 57c:	66 23       	and	r22, r22
 57e:	71 f0       	breq	.+28     	; 0x59c <__floatsisf+0x74>
 580:	96 e8       	ldi	r25, 0x86	; 134
 582:	86 2f       	mov	r24, r22
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	2a f0       	brmi	.+10     	; 0x594 <__floatsisf+0x6c>
 58a:	9a 95       	dec	r25
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	da f7       	brpl	.-10     	; 0x58a <__floatsisf+0x62>
 594:	88 0f       	add	r24, r24
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	97 f9       	bld	r25, 7
 59c:	08 95       	ret

0000059e <__fp_inf>:
 59e:	97 f9       	bld	r25, 7
 5a0:	9f 67       	ori	r25, 0x7F	; 127
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	08 95       	ret

000005aa <__fp_nan>:
 5aa:	9f ef       	ldi	r25, 0xFF	; 255
 5ac:	80 ec       	ldi	r24, 0xC0	; 192
 5ae:	08 95       	ret

000005b0 <__fp_pscA>:
 5b0:	00 24       	eor	r0, r0
 5b2:	0a 94       	dec	r0
 5b4:	16 16       	cp	r1, r22
 5b6:	17 06       	cpc	r1, r23
 5b8:	18 06       	cpc	r1, r24
 5ba:	09 06       	cpc	r0, r25
 5bc:	08 95       	ret

000005be <__fp_pscB>:
 5be:	00 24       	eor	r0, r0
 5c0:	0a 94       	dec	r0
 5c2:	12 16       	cp	r1, r18
 5c4:	13 06       	cpc	r1, r19
 5c6:	14 06       	cpc	r1, r20
 5c8:	05 06       	cpc	r0, r21
 5ca:	08 95       	ret

000005cc <__fp_round>:
 5cc:	09 2e       	mov	r0, r25
 5ce:	03 94       	inc	r0
 5d0:	00 0c       	add	r0, r0
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__fp_round+0xc>
 5d4:	88 23       	and	r24, r24
 5d6:	52 f0       	brmi	.+20     	; 0x5ec <__fp_round+0x20>
 5d8:	bb 0f       	add	r27, r27
 5da:	40 f4       	brcc	.+16     	; 0x5ec <__fp_round+0x20>
 5dc:	bf 2b       	or	r27, r31
 5de:	11 f4       	brne	.+4      	; 0x5e4 <__fp_round+0x18>
 5e0:	60 ff       	sbrs	r22, 0
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <__fp_round+0x20>
 5e4:	6f 5f       	subi	r22, 0xFF	; 255
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	08 95       	ret

000005ee <__fp_split3>:
 5ee:	57 fd       	sbrc	r21, 7
 5f0:	90 58       	subi	r25, 0x80	; 128
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	59 f0       	breq	.+22     	; 0x60e <__fp_splitA+0x10>
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	71 f0       	breq	.+28     	; 0x618 <__fp_splitA+0x1a>
 5fc:	47 95       	ror	r20

000005fe <__fp_splitA>:
 5fe:	88 0f       	add	r24, r24
 600:	97 fb       	bst	r25, 7
 602:	99 1f       	adc	r25, r25
 604:	61 f0       	breq	.+24     	; 0x61e <__fp_splitA+0x20>
 606:	9f 3f       	cpi	r25, 0xFF	; 255
 608:	79 f0       	breq	.+30     	; 0x628 <__fp_splitA+0x2a>
 60a:	87 95       	ror	r24
 60c:	08 95       	ret
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	55 1f       	adc	r21, r21
 616:	f2 cf       	rjmp	.-28     	; 0x5fc <__fp_split3+0xe>
 618:	46 95       	lsr	r20
 61a:	f1 df       	rcall	.-30     	; 0x5fe <__fp_splitA>
 61c:	08 c0       	rjmp	.+16     	; 0x62e <__fp_splitA+0x30>
 61e:	16 16       	cp	r1, r22
 620:	17 06       	cpc	r1, r23
 622:	18 06       	cpc	r1, r24
 624:	99 1f       	adc	r25, r25
 626:	f1 cf       	rjmp	.-30     	; 0x60a <__fp_splitA+0xc>
 628:	86 95       	lsr	r24
 62a:	71 05       	cpc	r23, r1
 62c:	61 05       	cpc	r22, r1
 62e:	08 94       	sec
 630:	08 95       	ret

00000632 <__fp_zero>:
 632:	e8 94       	clt

00000634 <__fp_szero>:
 634:	bb 27       	eor	r27, r27
 636:	66 27       	eor	r22, r22
 638:	77 27       	eor	r23, r23
 63a:	cb 01       	movw	r24, r22
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <__mulsf3>:
 640:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3x>
 644:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_round>
 648:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_pscA>
 64c:	38 f0       	brcs	.+14     	; 0x65c <__mulsf3+0x1c>
 64e:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscB>
 652:	20 f0       	brcs	.+8      	; 0x65c <__mulsf3+0x1c>
 654:	95 23       	and	r25, r21
 656:	11 f0       	breq	.+4      	; 0x65c <__mulsf3+0x1c>
 658:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 65c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>
 660:	11 24       	eor	r1, r1
 662:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>

00000666 <__mulsf3x>:
 666:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_split3>
 66a:	70 f3       	brcs	.-36     	; 0x648 <__mulsf3+0x8>

0000066c <__mulsf3_pse>:
 66c:	95 9f       	mul	r25, r21
 66e:	c1 f3       	breq	.-16     	; 0x660 <__mulsf3+0x20>
 670:	95 0f       	add	r25, r21
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	55 1f       	adc	r21, r21
 676:	62 9f       	mul	r22, r18
 678:	f0 01       	movw	r30, r0
 67a:	72 9f       	mul	r23, r18
 67c:	bb 27       	eor	r27, r27
 67e:	f0 0d       	add	r31, r0
 680:	b1 1d       	adc	r27, r1
 682:	63 9f       	mul	r22, r19
 684:	aa 27       	eor	r26, r26
 686:	f0 0d       	add	r31, r0
 688:	b1 1d       	adc	r27, r1
 68a:	aa 1f       	adc	r26, r26
 68c:	64 9f       	mul	r22, r20
 68e:	66 27       	eor	r22, r22
 690:	b0 0d       	add	r27, r0
 692:	a1 1d       	adc	r26, r1
 694:	66 1f       	adc	r22, r22
 696:	82 9f       	mul	r24, r18
 698:	22 27       	eor	r18, r18
 69a:	b0 0d       	add	r27, r0
 69c:	a1 1d       	adc	r26, r1
 69e:	62 1f       	adc	r22, r18
 6a0:	73 9f       	mul	r23, r19
 6a2:	b0 0d       	add	r27, r0
 6a4:	a1 1d       	adc	r26, r1
 6a6:	62 1f       	adc	r22, r18
 6a8:	83 9f       	mul	r24, r19
 6aa:	a0 0d       	add	r26, r0
 6ac:	61 1d       	adc	r22, r1
 6ae:	22 1f       	adc	r18, r18
 6b0:	74 9f       	mul	r23, r20
 6b2:	33 27       	eor	r19, r19
 6b4:	a0 0d       	add	r26, r0
 6b6:	61 1d       	adc	r22, r1
 6b8:	23 1f       	adc	r18, r19
 6ba:	84 9f       	mul	r24, r20
 6bc:	60 0d       	add	r22, r0
 6be:	21 1d       	adc	r18, r1
 6c0:	82 2f       	mov	r24, r18
 6c2:	76 2f       	mov	r23, r22
 6c4:	6a 2f       	mov	r22, r26
 6c6:	11 24       	eor	r1, r1
 6c8:	9f 57       	subi	r25, 0x7F	; 127
 6ca:	50 40       	sbci	r21, 0x00	; 0
 6cc:	9a f0       	brmi	.+38     	; 0x6f4 <__mulsf3_pse+0x88>
 6ce:	f1 f0       	breq	.+60     	; 0x70c <__mulsf3_pse+0xa0>
 6d0:	88 23       	and	r24, r24
 6d2:	4a f0       	brmi	.+18     	; 0x6e6 <__mulsf3_pse+0x7a>
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	bb 1f       	adc	r27, r27
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	91 50       	subi	r25, 0x01	; 1
 6e2:	50 40       	sbci	r21, 0x00	; 0
 6e4:	a9 f7       	brne	.-22     	; 0x6d0 <__mulsf3_pse+0x64>
 6e6:	9e 3f       	cpi	r25, 0xFE	; 254
 6e8:	51 05       	cpc	r21, r1
 6ea:	80 f0       	brcs	.+32     	; 0x70c <__mulsf3_pse+0xa0>
 6ec:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 6f0:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	e4 f3       	brlt	.-8      	; 0x6f0 <__mulsf3_pse+0x84>
 6f8:	98 3e       	cpi	r25, 0xE8	; 232
 6fa:	d4 f3       	brlt	.-12     	; 0x6f0 <__mulsf3_pse+0x84>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f7 95       	ror	r31
 706:	e7 95       	ror	r30
 708:	9f 5f       	subi	r25, 0xFF	; 255
 70a:	c1 f7       	brne	.-16     	; 0x6fc <__mulsf3_pse+0x90>
 70c:	fe 2b       	or	r31, r30
 70e:	88 0f       	add	r24, r24
 710:	91 1d       	adc	r25, r1
 712:	96 95       	lsr	r25
 714:	87 95       	ror	r24
 716:	97 f9       	bld	r25, 7
 718:	08 95       	ret

0000071a <round>:
 71a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_splitA>
 71e:	e8 f0       	brcs	.+58     	; 0x75a <round+0x40>
 720:	9e 37       	cpi	r25, 0x7E	; 126
 722:	e8 f0       	brcs	.+58     	; 0x75e <round+0x44>
 724:	96 39       	cpi	r25, 0x96	; 150
 726:	b8 f4       	brcc	.+46     	; 0x756 <round+0x3c>
 728:	9e 38       	cpi	r25, 0x8E	; 142
 72a:	48 f4       	brcc	.+18     	; 0x73e <round+0x24>
 72c:	67 2f       	mov	r22, r23
 72e:	78 2f       	mov	r23, r24
 730:	88 27       	eor	r24, r24
 732:	98 5f       	subi	r25, 0xF8	; 248
 734:	f9 cf       	rjmp	.-14     	; 0x728 <round+0xe>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	93 95       	inc	r25
 73e:	95 39       	cpi	r25, 0x95	; 149
 740:	d0 f3       	brcs	.-12     	; 0x736 <round+0x1c>
 742:	b6 2f       	mov	r27, r22
 744:	b1 70       	andi	r27, 0x01	; 1
 746:	6b 0f       	add	r22, r27
 748:	71 1d       	adc	r23, r1
 74a:	81 1d       	adc	r24, r1
 74c:	20 f4       	brcc	.+8      	; 0x756 <round+0x3c>
 74e:	87 95       	ror	r24
 750:	77 95       	ror	r23
 752:	67 95       	ror	r22
 754:	93 95       	inc	r25
 756:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_mintl>
 75a:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_mpack>
 75e:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>

00000762 <__fp_mintl>:
 762:	88 23       	and	r24, r24
 764:	71 f4       	brne	.+28     	; 0x782 <__fp_mintl+0x20>
 766:	77 23       	and	r23, r23
 768:	21 f0       	breq	.+8      	; 0x772 <__fp_mintl+0x10>
 76a:	98 50       	subi	r25, 0x08	; 8
 76c:	87 2b       	or	r24, r23
 76e:	76 2f       	mov	r23, r22
 770:	07 c0       	rjmp	.+14     	; 0x780 <__fp_mintl+0x1e>
 772:	66 23       	and	r22, r22
 774:	11 f4       	brne	.+4      	; 0x77a <__fp_mintl+0x18>
 776:	99 27       	eor	r25, r25
 778:	0d c0       	rjmp	.+26     	; 0x794 <__fp_mintl+0x32>
 77a:	90 51       	subi	r25, 0x10	; 16
 77c:	86 2b       	or	r24, r22
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	2a f0       	brmi	.+10     	; 0x78e <__fp_mintl+0x2c>
 784:	9a 95       	dec	r25
 786:	66 0f       	add	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	da f7       	brpl	.-10     	; 0x784 <__fp_mintl+0x22>
 78e:	88 0f       	add	r24, r24
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__fp_mpack>:
 798:	9f 3f       	cpi	r25, 0xFF	; 255
 79a:	31 f0       	breq	.+12     	; 0x7a8 <__fp_mpack_finite+0xc>

0000079c <__fp_mpack_finite>:
 79c:	91 50       	subi	r25, 0x01	; 1
 79e:	20 f4       	brcc	.+8      	; 0x7a8 <__fp_mpack_finite+0xc>
 7a0:	87 95       	ror	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	88 0f       	add	r24, r24
 7aa:	91 1d       	adc	r25, r1
 7ac:	96 95       	lsr	r25
 7ae:	87 95       	ror	r24
 7b0:	97 f9       	bld	r25, 7
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
