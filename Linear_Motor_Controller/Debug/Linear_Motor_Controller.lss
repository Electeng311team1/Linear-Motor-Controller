
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000db8  00000e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000061b  00800148  00800148  00000e94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002696  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  0000369a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d20  00000000  00000000  000041ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00004f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000790  00000000  00000000  000052f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001681  00000000  00000000  00005a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00007101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_7>
  20:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_8>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_11>
  30:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 36       	cpi	r26, 0x63	; 99
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <main>
  9e:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_initiate>:

#include "includes.h"

void adc_initiate(){
	//Set ADC prescalar
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
	
	//Select AVcc reference
	//ADMUX |= (1 << REFS0);

	//Enable ADC
	ADCSRA |= (1 << ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//ADMUX |= (1 << ADLAR);
	
	//Enable ADC interrupt
	ADCSRA |= (1 << ADIE);
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	//Enable ADC auto trigger
	ADCSRA |= (1 << ADATE);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	
	//Set auto trigger source to timer 0
	ADCSRB |= (1 << ADTS1) | (1 << ADTS0);
  c2:	ab e7       	ldi	r26, 0x7B	; 123
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	8c 91       	ld	r24, X
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	8c 93       	st	X, r24

	//Set timer 0 prescalar to 64
	TCCR0B |= (1 << CS00) | (1 << CS01);
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	85 bd       	out	0x25, r24	; 37

	//Enable conversion

	ADMUX |= (1 << MUX0);
  d2:	ac e7       	ldi	r26, 0x7C	; 124
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	8c 91       	ld	r24, X
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8c 93       	st	X, r24

	ADCSRA |= (1 << ADSC);
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <adc_start>:
}

void adc_start(float* operating_frequency){
	
	 	OCR0A = (uint8_t) 69;//(F_CPU/(64.0 * (float)SAMPLING_SIZE * (*operating_frequency)));
  e4:	85 e4       	ldi	r24, 0x45	; 69
  e6:	87 bd       	out	0x27, r24	; 39
	 	TIMSK0 |= (1 << OCIE0A);
  e8:	ee e6       	ldi	r30, 0x6E	; 110
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
	 	TCNT0 = 0;
  f2:	16 bc       	out	0x26, r1	; 38
	compA_count = 0;
  f4:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <compA_count>
  f8:	08 95       	ret

000000fa <__vector_14>:
}

 ISR(TIMER0_COMPA_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
	//ADCSRA |= (1 << ADSC);
	compA_count++;
 106:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <compA_count>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <compA_count>
	TCNT0 = 0;
 110:	16 bc       	out	0x26, r1	; 38
 }
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_21>:

ISR(ADC_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	25 97       	sbiw	r28, 0x05	; 5
 154:	de bf       	out	0x3e, r29	; 62
 156:	cd bf       	out	0x3d, r28	; 61
// 	if(!testvalue){
// 		testadcvalue = ADC;
// 		testvalue = true;
// 	}
		if (beginCalculation==0){
 158:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <beginCalculation>
 15c:	81 11       	cpse	r24, r1
 15e:	15 c1       	rjmp	.+554    	; 0x38a <__vector_21+0x26c>
	 		ADCSRA &= ~(1<<ADATE);
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8f 7d       	andi	r24, 0xDF	; 223
 168:	80 83       	st	Z, r24
	 		if ((i%10) == 0){
 16a:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <i>
 16e:	8d ec       	ldi	r24, 0xCD	; 205
 170:	28 9f       	mul	r18, r24
 172:	81 2d       	mov	r24, r1
 174:	11 24       	eor	r1, r1
 176:	86 95       	lsr	r24
 178:	86 95       	lsr	r24
 17a:	86 95       	lsr	r24
 17c:	88 0f       	add	r24, r24
 17e:	98 2f       	mov	r25, r24
 180:	99 0f       	add	r25, r25
 182:	99 0f       	add	r25, r25
 184:	89 0f       	add	r24, r25
 186:	28 13       	cpse	r18, r24
 188:	b0 c0       	rjmp	.+352    	; 0x2ea <__vector_21+0x1cc>
				 j=i/10;
 18a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i>
 18e:	1d ec       	ldi	r17, 0xCD	; 205
 190:	81 9f       	mul	r24, r17
 192:	81 2d       	mov	r24, r1
 194:	11 24       	eor	r1, r1
 196:	86 95       	lsr	r24
 198:	86 95       	lsr	r24
 19a:	86 95       	lsr	r24
 19c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <j>
	 			voltage[j] = ADC;
 1a0:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <j>
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	ec 5a       	subi	r30, 0xAC	; 172
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	91 83       	std	Z+1, r25	; 0x01
 1b8:	80 83       	st	Z, r24
				 
				 uint16_t tmp = voltage[j]; //gets correct adc readings sometimes but garbage other times
 1ba:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <j>
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ec 5a       	subi	r30, 0xAC	; 172
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	40 81       	ld	r20, Z
 1ca:	51 81       	ldd	r21, Z+1	; 0x01
				 uint8_t thousands = (tmp/1000) + 48;
				 uint8_t hundreds = ((tmp%1000)/100) + 48;
 1cc:	6a 01       	movw	r12, r20
 1ce:	d6 94       	lsr	r13
 1d0:	c7 94       	ror	r12
 1d2:	d6 94       	lsr	r13
 1d4:	c7 94       	ror	r12
 1d6:	d6 94       	lsr	r13
 1d8:	c7 94       	ror	r12
 1da:	96 01       	movw	r18, r12
 1dc:	a5 ec       	ldi	r26, 0xC5	; 197
 1de:	b0 e2       	ldi	r27, 0x20	; 32
 1e0:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 1e4:	fc 01       	movw	r30, r24
 1e6:	f2 95       	swap	r31
 1e8:	e2 95       	swap	r30
 1ea:	ef 70       	andi	r30, 0x0F	; 15
 1ec:	ef 27       	eor	r30, r31
 1ee:	ff 70       	andi	r31, 0x0F	; 15
 1f0:	ef 27       	eor	r30, r31
 1f2:	28 ee       	ldi	r18, 0xE8	; 232
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	e2 9f       	mul	r30, r18
 1f8:	c0 01       	movw	r24, r0
 1fa:	e3 9f       	mul	r30, r19
 1fc:	90 0d       	add	r25, r0
 1fe:	f2 9f       	mul	r31, r18
 200:	90 0d       	add	r25, r0
 202:	11 24       	eor	r1, r1
 204:	fa 01       	movw	r30, r20
 206:	e8 1b       	sub	r30, r24
 208:	f9 0b       	sbc	r31, r25
				 uint8_t tens = (((tmp%1000)%100)/10) + 48;
 20a:	7f 01       	movw	r14, r30
 20c:	f6 94       	lsr	r15
 20e:	e7 94       	ror	r14
 210:	f6 94       	lsr	r15
 212:	e7 94       	ror	r14
 214:	97 01       	movw	r18, r14
 216:	ab e7       	ldi	r26, 0x7B	; 123
 218:	b4 e1       	ldi	r27, 0x14	; 20
 21a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 21e:	ac 01       	movw	r20, r24
 220:	56 95       	lsr	r21
 222:	47 95       	ror	r20
 224:	24 e6       	ldi	r18, 0x64	; 100
 226:	24 9f       	mul	r18, r20
 228:	c0 01       	movw	r24, r0
 22a:	25 9f       	mul	r18, r21
 22c:	90 0d       	add	r25, r0
 22e:	11 24       	eor	r1, r1
 230:	af 01       	movw	r20, r30
 232:	48 1b       	sub	r20, r24
 234:	59 0b       	sbc	r21, r25
				 uint8_t ones = ((((tmp%1000)%100)%10)) + 48;
				 char array[5];
				 array[0] = thousands;
 236:	96 01       	movw	r18, r12
 238:	a5 ec       	ldi	r26, 0xC5	; 197
 23a:	b0 e2       	ldi	r27, 0x20	; 32
 23c:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 240:	92 95       	swap	r25
 242:	82 95       	swap	r24
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	89 27       	eor	r24, r25
 248:	9f 70       	andi	r25, 0x0F	; 15
 24a:	89 27       	eor	r24, r25
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	89 83       	std	Y+1, r24	; 0x01
				 array[1] = hundreds;
 250:	97 01       	movw	r18, r14
 252:	ab e7       	ldi	r26, 0x7B	; 123
 254:	b4 e1       	ldi	r27, 0x14	; 20
 256:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	8a 83       	std	Y+2, r24	; 0x02
				 array[2] = tens;
 262:	9a 01       	movw	r18, r20
 264:	ad ec       	ldi	r26, 0xCD	; 205
 266:	bc ec       	ldi	r27, 0xCC	; 204
 268:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	20 e3       	ldi	r18, 0x30	; 48
 27a:	28 0f       	add	r18, r24
 27c:	2b 83       	std	Y+3, r18	; 0x03
				 array[3] = ones;
 27e:	9c 01       	movw	r18, r24
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	82 0f       	add	r24, r18
 292:	93 1f       	adc	r25, r19
 294:	48 1b       	sub	r20, r24
 296:	59 0b       	sbc	r21, r25
 298:	40 5d       	subi	r20, 0xD0	; 208
 29a:	4c 83       	std	Y+4, r20	; 0x04
				 array[4] = '\0';
 29c:	1d 82       	std	Y+5, r1	; 0x05
				 uart_transmit(array);
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
				 uart_transmit("\n\r");
 2a6:	84 e4       	ldi	r24, 0x44	; 68
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
				 
	 			voltageTime[i/10] = TCNT0 + compA_count*OCR0A;
 2ae:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <i>
 2b2:	e1 9f       	mul	r30, r17
 2b4:	e1 2d       	mov	r30, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	e6 95       	lsr	r30
 2ba:	e6 95       	lsr	r30
 2bc:	e6 95       	lsr	r30
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	86 b5       	in	r24, 0x26	; 38
 2c2:	30 91 2a 05 	lds	r19, 0x052A	; 0x80052a <compA_count>
 2c6:	27 b5       	in	r18, 0x27	; 39
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	32 9f       	mul	r19, r18
 2cc:	80 0d       	add	r24, r0
 2ce:	91 1d       	adc	r25, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	ea 52       	subi	r30, 0x2A	; 42
 2d8:	fc 4f       	sbci	r31, 0xFC	; 252
 2da:	91 83       	std	Z+1, r25	; 0x01
 2dc:	80 83       	st	Z, r24
	 			ADMUX &= ~(1<<MUX0);
 2de:	ec e7       	ldi	r30, 0x7C	; 124
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	8e 7f       	andi	r24, 0xFE	; 254
 2e6:	80 83       	st	Z, r24
 2e8:	35 c0       	rjmp	.+106    	; 0x354 <__vector_21+0x236>
	 		} else {
	 			current[i] = ADC;
 2ea:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <i>
 2ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	ea 50       	subi	r30, 0x0A	; 10
 2fe:	fc 4f       	sbci	r31, 0xFC	; 252
 300:	91 83       	std	Z+1, r25	; 0x01
 302:	80 83       	st	Z, r24
				currentTime[i]= TCNT0 + compA_count*OCR0A;
 304:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <i>
 308:	86 b5       	in	r24, 0x26	; 38
 30a:	30 91 2a 05 	lds	r19, 0x052A	; 0x80052a <compA_count>
 30e:	27 b5       	in	r18, 0x27	; 39
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	ee 5c       	subi	r30, 0xCE	; 206
 318:	fa 4f       	sbci	r31, 0xFA	; 250
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	32 9f       	mul	r19, r18
 31e:	80 0d       	add	r24, r0
 320:	91 1d       	adc	r25, r1
 322:	11 24       	eor	r1, r1
 324:	91 83       	std	Z+1, r25	; 0x01
 326:	80 83       	st	Z, r24
// 				array[4] = '\0';
// 				uart_transmit(array);
// 				uart_transmit("\n\r");

				
	 			if (i%10 == 9){
 328:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i>
 32c:	8d ec       	ldi	r24, 0xCD	; 205
 32e:	98 9f       	mul	r25, r24
 330:	81 2d       	mov	r24, r1
 332:	11 24       	eor	r1, r1
 334:	86 95       	lsr	r24
 336:	86 95       	lsr	r24
 338:	86 95       	lsr	r24
 33a:	88 0f       	add	r24, r24
 33c:	28 2f       	mov	r18, r24
 33e:	22 0f       	add	r18, r18
 340:	22 0f       	add	r18, r18
 342:	82 0f       	add	r24, r18
 344:	98 1b       	sub	r25, r24
 346:	99 30       	cpi	r25, 0x09	; 9
 348:	29 f4       	brne	.+10     	; 0x354 <__vector_21+0x236>
	 				ADMUX |= (1<<MUX0);
 34a:	ec e7       	ldi	r30, 0x7C	; 124
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	81 60       	ori	r24, 0x01	; 1
 352:	80 83       	st	Z, r24
	 			}
	 		}
	 		i++;
 354:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i>
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <i>
	 		if (i == (SAMPLING_SIZE-1)){
 35e:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i>
 362:	85 39       	cpi	r24, 0x95	; 149
 364:	69 f4       	brne	.+26     	; 0x380 <__vector_21+0x262>
	 			TIMSK0 &= ~(1<<OCIE0A); //disables further adc reading
 366:	ee e6       	ldi	r30, 0x6E	; 110
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	8d 7f       	andi	r24, 0xFD	; 253
 36e:	80 83       	st	Z, r24
	 			beginCalculation = 1; //stops adc sampling and saves values to perform calculations
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <beginCalculation>
	 			i=0;
 376:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <i>
	 			compA_count = 0;
 37a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <compA_count>
 37e:	05 c0       	rjmp	.+10     	; 0x38a <__vector_21+0x26c>
			} else {
	 			ADCSRA |= (1<<ADATE);
 380:	ea e7       	ldi	r30, 0x7A	; 122
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 62       	ori	r24, 0x20	; 32
 388:	80 83       	st	Z, r24
	 		}

	}
}
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	1f 91       	pop	r17
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <driver_timer_initiate>:
#define SET_SW4 PORTD |= (1 << PD6)
#define CLR_SW4 PORTD &= ~(1 << PD6)

void driver_timer_initiate(void){
	//Timer 1 8bit (no prescalar)
	TCCR2B |= (1 << CS20);
 3c4:	e1 eb       	ldi	r30, 0xB1	; 177
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	80 83       	st	Z, r24
	OCR2A = HIGH_OFF_TIME_COUNT_VALUE;
 3ce:	80 e4       	ldi	r24, 0x40	; 64
 3d0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = LOW_OFF_TIME_COUNT_VALUE;
 3d4:	80 e1       	ldi	r24, 0x10	; 16
 3d6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	//Timer 2 16bit (8 prescalar)
	TCCR1B |= (1 << CS11);
 3da:	e1 e8       	ldi	r30, 0x81	; 129
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	82 60       	ori	r24, 0x02	; 2
 3e2:	80 83       	st	Z, r24

	//Set pins to output
	DDRB |= (1 << DDB0);
 3e4:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
 3e6:	8a b1       	in	r24, 0x0a	; 10
 3e8:	80 6e       	ori	r24, 0xE0	; 224
 3ea:	8a b9       	out	0x0a, r24	; 10

	//Set initial switches
	SET_SW1;
 3ec:	28 9a       	sbi	0x05, 0	; 5
	SET_SW4;
 3ee:	5e 9a       	sbi	0x0b, 6	; 11
	CLR_SW2;
 3f0:	5d 98       	cbi	0x0b, 5	; 11
	CLR_SW3;
 3f2:	5f 98       	cbi	0x0b, 7	; 11

	change_duty = false;
 3f4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <change_duty>
	first_cycle = true;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <first_cycle>
 3fe:	08 95       	ret

00000400 <set_parameters>:
}

void set_parameters(float frequency, uint8_t mfc){
 400:	4f 92       	push	r4
 402:	5f 92       	push	r5
 404:	6f 92       	push	r6
 406:	7f 92       	push	r7
 408:	8f 92       	push	r8
 40a:	9f 92       	push	r9
 40c:	af 92       	push	r10
 40e:	bf 92       	push	r11
 410:	cf 92       	push	r12
 412:	df 92       	push	r13
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	6b 01       	movw	r12, r22
 41a:	7c 01       	movw	r14, r24
	mfr = (int)mfc;
 41c:	84 2f       	mov	r24, r20
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <mfr+0x1>
 424:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <mfr>
	float duty_cycle = (float)mfc/255;
 428:	64 2f       	mov	r22, r20
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 d0 05 	call	0xba0	; 0xba0 <__floatunsisf>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	4f e7       	ldi	r20, 0x7F	; 127
 43a:	53 e4       	ldi	r21, 0x43	; 67
 43c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__divsf3>
 440:	2b 01       	movw	r4, r22
 442:	3c 01       	movw	r6, r24
	float off_time = ((1000/(2*(frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(1-duty_cycle);
 444:	a7 01       	movw	r20, r14
 446:	96 01       	movw	r18, r12
 448:	c7 01       	movw	r24, r14
 44a:	b6 01       	movw	r22, r12
 44c:	0e 94 c3 04 	call	0x986	; 0x986 <__addsf3>
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	8a e7       	ldi	r24, 0x7A	; 122
 45a:	94 e4       	ldi	r25, 0x44	; 68
 45c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__divsf3>
 460:	4b 01       	movw	r8, r22
 462:	5c 01       	movw	r10, r24
	float on_time = ((1000/(2*(frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(duty_cycle);
 464:	9b 01       	movw	r18, r22
 466:	ac 01       	movw	r20, r24
 468:	c3 01       	movw	r24, r6
 46a:	b2 01       	movw	r22, r4
 46c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__mulsf3>
 470:	6b 01       	movw	r12, r22
 472:	7c 01       	movw	r14, r24

	//Set T1 Compare
	t1_compare_a = (uint16_t)((on_time+off_time+HIGH_OFF_TIME/1000)*1000);
 474:	a3 01       	movw	r20, r6
 476:	92 01       	movw	r18, r4
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	9f e3       	ldi	r25, 0x3F	; 63
 480:	0e 94 c2 04 	call	0x984	; 0x984 <__subsf3>
 484:	a5 01       	movw	r20, r10
 486:	94 01       	movw	r18, r8
 488:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__mulsf3>
 48c:	a7 01       	movw	r20, r14
 48e:	96 01       	movw	r18, r12
 490:	0e 94 c3 04 	call	0x986	; 0x986 <__addsf3>
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	a9 01       	movw	r20, r18
 49a:	0e 94 c3 04 	call	0x986	; 0x986 <__addsf3>
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	4a e7       	ldi	r20, 0x7A	; 122
 4a4:	54 e4       	ldi	r21, 0x44	; 68
 4a6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__mulsf3>
 4aa:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fixunssfsi>
 4ae:	70 93 2c 05 	sts	0x052C, r23	; 0x80052c <t1_compare_a+0x1>
 4b2:	60 93 2b 05 	sts	0x052B, r22	; 0x80052b <t1_compare_a>
	t1_compare_b = (uint16_t)(on_time*1000);
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	4a e7       	ldi	r20, 0x7A	; 122
 4bc:	54 e4       	ldi	r21, 0x44	; 68
 4be:	c7 01       	movw	r24, r14
 4c0:	b6 01       	movw	r22, r12
 4c2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__mulsf3>
 4c6:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fixunssfsi>
 4ca:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <t1_compare_b+0x1>
 4ce:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <t1_compare_b>

	isNegative = false;
 4d2:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <isNegative>
	change_duty = true;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <change_duty>

	if(first_cycle){
 4dc:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <first_cycle>
 4e0:	88 23       	and	r24, r24
 4e2:	91 f0       	breq	.+36     	; 0x508 <set_parameters+0x108>
		OCR1A = (uint16_t)t1_compare_a;
 4e4:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <t1_compare_a>
 4e8:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <t1_compare_a+0x1>
 4ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = (uint16_t)t1_compare_b;
 4f4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <t1_compare_b>
 4f8:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <t1_compare_b+0x1>
 4fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 500:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		first_cycle = false;
 504:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <first_cycle>
	OCR1A = (uint16_t)t1_compare_a;
	OCR1B = (uint16_t)t1_compare_b;
	#endif

	//Initialise timer interrupt
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
 508:	ef e6       	ldi	r30, 0x6F	; 111
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	86 60       	ori	r24, 0x06	; 6
 510:	80 83       	st	Z, r24
	TCNT1 = 0;
 512:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 516:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	df 90       	pop	r13
 520:	cf 90       	pop	r12
 522:	bf 90       	pop	r11
 524:	af 90       	pop	r10
 526:	9f 90       	pop	r9
 528:	8f 90       	pop	r8
 52a:	7f 90       	pop	r7
 52c:	6f 90       	pop	r6
 52e:	5f 90       	pop	r5
 530:	4f 90       	pop	r4
 532:	08 95       	ret

00000534 <soft_start>:

void soft_start(float req_freq, int req_mfc){
 534:	cf 92       	push	r12
 536:	df 92       	push	r13
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
	unsigned int i = 0;
	while(i != req_mfc){
 544:	41 15       	cp	r20, r1
 546:	51 05       	cpc	r21, r1
 548:	71 f0       	breq	.+28     	; 0x566 <soft_start+0x32>
 54a:	8a 01       	movw	r16, r20
 54c:	6b 01       	movw	r12, r22
 54e:	7c 01       	movw	r14, r24
 550:	c0 e0       	ldi	r28, 0x00	; 0
 552:	d0 e0       	ldi	r29, 0x00	; 0
		set_parameters(req_freq, i);
 554:	4c 2f       	mov	r20, r28
 556:	c7 01       	movw	r24, r14
 558:	b6 01       	movw	r22, r12
 55a:	0e 94 00 02 	call	0x400	; 0x400 <set_parameters>
		i++;
 55e:	21 96       	adiw	r28, 0x01	; 1
	TCNT1 = 0;
}

void soft_start(float req_freq, int req_mfc){
	unsigned int i = 0;
	while(i != req_mfc){
 560:	c0 17       	cp	r28, r16
 562:	d1 07       	cpc	r29, r17
 564:	b9 f7       	brne	.-18     	; 0x554 <soft_start+0x20>
		set_parameters(req_freq, i);
		i++;
	}
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	df 90       	pop	r13
 574:	cf 90       	pop	r12
 576:	08 95       	ret

00000578 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2A);
 588:	e0 e7       	ldi	r30, 0x70	; 112
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	8d 7f       	andi	r24, 0xFD	; 253
 590:	80 83       	st	Z, r24
	if(isNegative == false){
 592:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 596:	81 11       	cpse	r24, r1
 598:	02 c0       	rjmp	.+4      	; 0x59e <__vector_7+0x26>
		SET_SW3;
 59a:	5f 9a       	sbi	0x0b, 7	; 11
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <__vector_7+0x28>
	}
	else{
		SET_SW4;
 59e:	5e 9a       	sbi	0x0b, 6	; 11
	}
}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	8f 91       	pop	r24
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	8f 93       	push	r24
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
	if(isNegative == false){
 5c0:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 5c4:	81 11       	cpse	r24, r1
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <__vector_11+0x1c>
		CLR_SW4;
 5c8:	5e 98       	cbi	0x0b, 6	; 11
 5ca:	01 c0       	rjmp	.+2      	; 0x5ce <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 5cc:	5f 98       	cbi	0x0b, 7	; 11
	}
	TIMSK1 &= ~(1 << OCIE1A);
 5ce:	ef e6       	ldi	r30, 0x6F	; 111
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	8d 7f       	andi	r24, 0xFD	; 253
 5d6:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1B);
 5d8:	80 81       	ld	r24, Z
 5da:	8b 7f       	andi	r24, 0xFB	; 251
 5dc:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2B);
 5de:	e0 e7       	ldi	r30, 0x70	; 112
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	84 60       	ori	r24, 0x04	; 4
 5e6:	80 83       	st	Z, r24
	TCNT2 = 0;
 5e8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	8f 91       	pop	r24
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <__vector_8>:

ISR(TIMER2_COMPB_vect){
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	ef 93       	push	r30
 60c:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2B);
 60e:	e0 e7       	ldi	r30, 0x70	; 112
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	8b 7f       	andi	r24, 0xFB	; 251
 616:	80 83       	st	Z, r24
	if(mfr == 0){
 618:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <mfr>
 61c:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <mfr+0x1>
 620:	89 2b       	or	r24, r25
 622:	c1 f4       	brne	.+48     	; 0x654 <__vector_8+0x58>
		TIMSK2 &= ~(1 << OCIE2A);
 624:	80 81       	ld	r24, Z
 626:	8d 7f       	andi	r24, 0xFD	; 253
 628:	80 83       	st	Z, r24
		TIMSK2 &= ~(1 << OCIE2B);
 62a:	80 81       	ld	r24, Z
 62c:	8b 7f       	andi	r24, 0xFB	; 251
 62e:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);
 630:	ef e6       	ldi	r30, 0x6F	; 111
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	8d 7f       	andi	r24, 0xFD	; 253
 638:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1B);
 63a:	80 81       	ld	r24, Z
 63c:	8b 7f       	andi	r24, 0xFB	; 251
 63e:	80 83       	st	Z, r24
		CLR_SW3;
 640:	5f 98       	cbi	0x0b, 7	; 11
		CLR_SW4;
 642:	5e 98       	cbi	0x0b, 6	; 11
		CLR_SW1;
 644:	28 98       	cbi	0x05, 0	; 5
		CLR_SW2;
 646:	5d 98       	cbi	0x0b, 5	; 11
		SET_SW3;
 648:	5f 9a       	sbi	0x0b, 7	; 11
		SET_SW4;
 64a:	5e 9a       	sbi	0x0b, 6	; 11
		first_cycle = true;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <first_cycle>
 652:	2e c0       	rjmp	.+92     	; 0x6b0 <__vector_8+0xb4>
		
	}
	else{
		if(isNegative == false){
 654:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 658:	81 11       	cpse	r24, r1
 65a:	05 c0       	rjmp	.+10     	; 0x666 <__vector_8+0x6a>
			SET_SW2;
 65c:	5d 9a       	sbi	0x0b, 5	; 11
			isNegative = true;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <isNegative>
 664:	03 c0       	rjmp	.+6      	; 0x66c <__vector_8+0x70>
		}
		else{
			SET_SW1;
 666:	28 9a       	sbi	0x05, 0	; 5
			isNegative = false;
 668:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <isNegative>
		}

		if(change_duty == true){
 66c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <change_duty>
 670:	88 23       	and	r24, r24
 672:	91 f0       	breq	.+36     	; 0x698 <__vector_8+0x9c>
			OCR1A = t1_compare_a;
 674:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <t1_compare_a>
 678:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <t1_compare_a+0x1>
 67c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 680:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B = t1_compare_b;
 684:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <t1_compare_b>
 688:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <t1_compare_b+0x1>
 68c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 690:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			change_duty = false;
 694:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <change_duty>
		}
		
		TIMSK1 |= (1 << OCIE1B);
 698:	ef e6       	ldi	r30, 0x6F	; 111
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 81       	ld	r24, Z
 69e:	84 60       	ori	r24, 0x04	; 4
 6a0:	80 83       	st	Z, r24
		TIMSK1 |= (1 << OCIE1A);
 6a2:	80 81       	ld	r24, Z
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	80 83       	st	Z, r24
		TCNT1 = 0;
 6a8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 6ac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	}

	
}
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	9f 91       	pop	r25
 6b6:	8f 91       	pop	r24
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	8f 93       	push	r24
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
	TIMSK1 &= ~(1 << OCIE1B);
 6d2:	ef e6       	ldi	r30, 0x6F	; 111
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	8b 7f       	andi	r24, 0xFB	; 251
 6da:	80 83       	st	Z, r24
	if(isNegative == false){
 6dc:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 6e0:	81 11       	cpse	r24, r1
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <__vector_12+0x26>
		CLR_SW1;
 6e4:	28 98       	cbi	0x05, 0	; 5
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__vector_12+0x28>
	}
	else{
		CLR_SW2;
 6e8:	5d 98       	cbi	0x0b, 5	; 11
	}
	TIMSK2 |= (1 << OCIE2A);
 6ea:	e0 e7       	ldi	r30, 0x70	; 112
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	82 60       	ori	r24, 0x02	; 2
 6f2:	80 83       	st	Z, r24
	TCNT2 = 0;
 6f4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 6f8:	ff 91       	pop	r31
 6fa:	ef 91       	pop	r30
 6fc:	8f 91       	pop	r24
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	ef 93       	push	r30
 718:	ff 93       	push	r31
	char tmp = UDR0;
 71a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
 71e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <message_complete>
 722:	91 11       	cpse	r25, r1
 724:	47 c0       	rjmp	.+142    	; 0x7b4 <__vector_18+0xac>
		if(tmp == '{'){
 726:	8b 37       	cpi	r24, 0x7B	; 123
 728:	49 f4       	brne	.+18     	; 0x73c <__vector_18+0x34>
			net_brackets++;
 72a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 72e:	9f 5f       	subi	r25, 0xFF	; 255
 730:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			message_start = true;
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__data_end>
 73a:	12 c0       	rjmp	.+36     	; 0x760 <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
 73c:	8d 37       	cpi	r24, 0x7D	; 125
 73e:	81 f4       	brne	.+32     	; 0x760 <__vector_18+0x58>
 740:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 744:	91 30       	cpi	r25, 0x01	; 1
 746:	61 f4       	brne	.+24     	; 0x760 <__vector_18+0x58>
		net_brackets--;
 748:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 74c:	91 50       	subi	r25, 0x01	; 1
 74e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
		if(net_brackets == 0){
 752:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 756:	91 11       	cpse	r25, r1
 758:	03 c0       	rjmp	.+6      	; 0x760 <__vector_18+0x58>
			message_complete = true;
 75a:	91 e0       	ldi	r25, 0x01	; 1
 75c:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <message_complete>
		}
	}

	if(message_start == true){
 760:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 764:	91 30       	cpi	r25, 0x01	; 1
 766:	a9 f4       	brne	.+42     	; 0x792 <__vector_18+0x8a>
		received_message[message_index] = tmp;
 768:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	ec 59       	subi	r30, 0x9C	; 156
 770:	f9 4f       	sbci	r31, 0xF9	; 249
 772:	80 83       	st	Z, r24
		message_index++;
 774:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <message_index>
		if(message_complete == true){
 77e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	31 f4       	brne	.+12     	; 0x792 <__vector_18+0x8a>
			received_message[message_index] = '\0';
 786:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	ec 59       	subi	r30, 0x9C	; 156
 78e:	f9 4f       	sbci	r31, 0xF9	; 249
 790:	10 82       	st	Z, r1
		}
	}

	if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 792:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 796:	8e 3f       	cpi	r24, 0xFE	; 254
 798:	21 f0       	breq	.+8      	; 0x7a2 <__vector_18+0x9a>
 79a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <net_brackets>
 79e:	84 30       	cpi	r24, 0x04	; 4
 7a0:	48 f0       	brcs	.+18     	; 0x7b4 <__vector_18+0xac>
		receive_error = true;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <receive_error>
		message_start = false;
 7a8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
		message_complete = false;
 7ac:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
		message_index = 0;
 7b0:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
	}
}
}
 7b4:	ff 91       	pop	r31
 7b6:	ef 91       	pop	r30
 7b8:	9f 91       	pop	r25
 7ba:	8f 91       	pop	r24
 7bc:	0f 90       	pop	r0
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	0f 90       	pop	r0
 7c2:	1f 90       	pop	r1
 7c4:	18 95       	reti

000007c6 <main>:

int main(void)
{
	//UART functionalities
	uart_initiate(UBRR_VALUE);
 7c6:	83 e3       	ldi	r24, 0x33	; 51
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 67 04 	call	0x8ce	; 0x8ce <uart_initiate>

	//Enable Global interrupts
	sei();
 7ce:	78 94       	sei

	*frequency = 12.5;
 7d0:	e0 91 62 06 	lds	r30, 0x0662	; 0x800662 <frequency>
 7d4:	f0 91 63 06 	lds	r31, 0x0663	; 0x800663 <frequency+0x1>
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	a8 e4       	ldi	r26, 0x48	; 72
 7de:	b1 e4       	ldi	r27, 0x41	; 65
 7e0:	80 83       	st	Z, r24
 7e2:	91 83       	std	Z+1, r25	; 0x01
 7e4:	a2 83       	std	Z+2, r26	; 0x02
 7e6:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 150;
 7e8:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <mfc>
 7ec:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <mfc+0x1>
 7f0:	86 e9       	ldi	r24, 0x96	; 150
 7f2:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 7f4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <driver_timer_initiate>
	//set_parameters(*frequency, *mfc);
	soft_start(*frequency, *mfc);
 7f8:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <mfc>
 7fc:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <mfc+0x1>
 800:	40 81       	ld	r20, Z
 802:	e0 91 62 06 	lds	r30, 0x0662	; 0x800662 <frequency>
 806:	f0 91 63 06 	lds	r31, 0x0663	; 0x800663 <frequency+0x1>
 80a:	60 81       	ld	r22, Z
 80c:	71 81       	ldd	r23, Z+1	; 0x01
 80e:	82 81       	ldd	r24, Z+2	; 0x02
 810:	93 81       	ldd	r25, Z+3	; 0x03
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	0e 94 9a 02 	call	0x534	; 0x534 <soft_start>

	adc_initiate();
 818:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_initiate>
	adc_start((float*)frequency);
 81c:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <frequency>
 820:	90 91 63 06 	lds	r25, 0x0663	; 0x800663 <frequency+0x1>
 824:	0e 94 72 00 	call	0xe4	; 0xe4 <adc_start>
	
	beginCalculation=0;
 828:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <beginCalculation>
	i=0;
 82c:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <i>
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 830:	c1 ec       	ldi	r28, 0xC1	; 193
 832:	d0 e0       	ldi	r29, 0x00	; 0

		#ifdef SITH
		project_skywalker();
		#endif
		
		if(message_complete == true){
 834:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	81 f5       	brne	.+96     	; 0x89c <main+0xd6>
			UCSR0B &= ~(1 << RXEN0);
 83c:	88 81       	ld	r24, Y
 83e:	8f 7e       	andi	r24, 0xEF	; 239
 840:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
			uart_transmit((char*)received_message);
 84a:	84 e6       	ldi	r24, 0x64	; 100
 84c:	96 e0       	ldi	r25, 0x06	; 6
 84e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 852:	60 91 60 06 	lds	r22, 0x0660	; 0x800660 <mfc>
 856:	70 91 61 06 	lds	r23, 0x0661	; 0x800661 <mfc+0x1>
 85a:	84 e6       	ldi	r24, 0x64	; 100
 85c:	96 e0       	ldi	r25, 0x06	; 6
 85e:	0e 94 92 04 	call	0x924	; 0x924 <process_message>
			set_parameters(*frequency, *mfc);
 862:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <mfc>
 866:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <mfc+0x1>
 86a:	40 81       	ld	r20, Z
 86c:	e0 91 62 06 	lds	r30, 0x0662	; 0x800662 <frequency>
 870:	f0 91 63 06 	lds	r31, 0x0663	; 0x800663 <frequency+0x1>
 874:	60 81       	ld	r22, Z
 876:	71 81       	ldd	r23, Z+1	; 0x01
 878:	82 81       	ldd	r24, Z+2	; 0x02
 87a:	93 81       	ldd	r25, Z+3	; 0x03
 87c:	0e 94 00 02 	call	0x400	; 0x400 <set_parameters>
			uart_transmit("\n\r");
 880:	84 e4       	ldi	r24, 0x44	; 68
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
			message_complete = false;
 888:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_start = false;
 88c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_index = 0;
 890:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
			UCSR0B |= (1 << RXEN0);
 894:	88 81       	ld	r24, Y
 896:	80 61       	ori	r24, 0x10	; 16
 898:	88 83       	st	Y, r24
 89a:	cc cf       	rjmp	.-104    	; 0x834 <main+0x6e>
		}
		else if(receive_error == true){
 89c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receive_error>
 8a0:	81 30       	cpi	r24, 0x01	; 1
 8a2:	41 f6       	brne	.-112    	; 0x834 <main+0x6e>
			UCSR0B &= ~(1 << RXEN0);
 8a4:	88 81       	ld	r24, Y
 8a6:	8f 7e       	andi	r24, 0xEF	; 239
 8a8:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 8b2:	89 e1       	ldi	r24, 0x19	; 25
 8b4:	91 e0       	ldi	r25, 0x01	; 1
 8b6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
			receive_error = false;
 8ba:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <receive_error>
			message_start = false;
 8be:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			net_brackets = 0;
 8c2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <net_brackets>
			UCSR0B |= (1 << RXEN0);
 8c6:	88 81       	ld	r24, Y
 8c8:	80 61       	ori	r24, 0x10	; 16
 8ca:	88 83       	st	Y, r24
 8cc:	b3 cf       	rjmp	.-154    	; 0x834 <main+0x6e>

000008ce <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}";

//This function initializes UART receive and transmit
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 8ce:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 8d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 8d6:	e1 ec       	ldi	r30, 0xC1	; 193
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	88 60       	ori	r24, 0x08	; 8
 8de:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 8e0:	80 81       	ld	r24, Z
 8e2:	80 61       	ori	r24, 0x10	; 16
 8e4:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 8e6:	80 81       	ld	r24, Z
 8e8:	80 68       	ori	r24, 0x80	; 128
 8ea:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 8ec:	e2 ec       	ldi	r30, 0xC2	; 194
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	86 60       	ori	r24, 0x06	; 6
 8f4:	80 83       	st	Z, r24
 8f6:	08 95       	ret

000008f8 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 81       	ld	r18, Z
 900:	22 23       	and	r18, r18
 902:	69 f0       	breq	.+26     	; 0x91e <__stack+0x1f>
 904:	dc 01       	movw	r26, r24
 906:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 908:	e0 ec       	ldi	r30, 0xC0	; 192
 90a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 90c:	c6 ec       	ldi	r28, 0xC6	; 198
 90e:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 910:	90 81       	ld	r25, Z
 912:	95 ff       	sbrs	r25, 5
 914:	fd cf       	rjmp	.-6      	; 0x910 <__stack+0x11>
		UDR0 = message[i];
 916:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 918:	2d 91       	ld	r18, X+
 91a:	21 11       	cpse	r18, r1
 91c:	f9 cf       	rjmp	.-14     	; 0x910 <__stack+0x11>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	08 95       	ret

00000924 <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	8b 01       	movw	r16, r22
 92e:	fc 01       	movw	r30, r24
 930:	31 96       	adiw	r30, 0x01	; 1
 932:	ac 01       	movw	r20, r24
 934:	4c 5f       	subi	r20, 0xFC	; 252
 936:	5f 4f       	sbci	r21, 0xFF	; 255
	int value = 0;
 938:	c0 e0       	ldi	r28, 0x00	; 0
 93a:	d0 e0       	ldi	r29, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 93c:	9e 01       	movw	r18, r28
 93e:	22 0f       	add	r18, r18
 940:	33 1f       	adc	r19, r19
 942:	cc 0f       	add	r28, r28
 944:	dd 1f       	adc	r29, r29
 946:	cc 0f       	add	r28, r28
 948:	dd 1f       	adc	r29, r29
 94a:	cc 0f       	add	r28, r28
 94c:	dd 1f       	adc	r29, r29
 94e:	c2 0f       	add	r28, r18
 950:	d3 1f       	adc	r29, r19
 952:	21 91       	ld	r18, Z+
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	20 53       	subi	r18, 0x30	; 48
 958:	31 09       	sbc	r19, r1
 95a:	c2 0f       	add	r28, r18
 95c:	d3 1f       	adc	r29, r19

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 95e:	e4 17       	cp	r30, r20
 960:	f5 07       	cpc	r31, r21
 962:	61 f7       	brne	.-40     	; 0x93c <process_message+0x18>

	// 	for(unsigned int i = 0; i < 3; i++){
	// 		value = value*10 + (tmp[i] - 48);
	// 	}

	if(message[1] == 'p'){
 964:	fc 01       	movw	r30, r24
 966:	81 81       	ldd	r24, Z+1	; 0x01
 968:	80 37       	cpi	r24, 0x70	; 112
 96a:	21 f4       	brne	.+8      	; 0x974 <process_message+0x50>
		uart_transmit("\n\rits here!\n\r");
 96c:	89 e3       	ldi	r24, 0x39	; 57
 96e:	91 e0       	ldi	r25, 0x01	; 1
 970:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_transmit>
	}
	*mfc = value;
 974:	f8 01       	movw	r30, r16
 976:	d1 83       	std	Z+1, r29	; 0x01
 978:	c0 83       	st	Z, r28
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <__subsf3>:
 984:	50 58       	subi	r21, 0x80	; 128

00000986 <__addsf3>:
 986:	bb 27       	eor	r27, r27
 988:	aa 27       	eor	r26, r26
 98a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__addsf3x>
 98e:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_round>
 992:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 996:	38 f0       	brcs	.+14     	; 0x9a6 <__addsf3+0x20>
 998:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <__addsf3+0x20>
 99e:	39 f4       	brne	.+14     	; 0x9ae <__addsf3+0x28>
 9a0:	9f 3f       	cpi	r25, 0xFF	; 255
 9a2:	19 f4       	brne	.+6      	; 0x9aa <__addsf3+0x24>
 9a4:	26 f4       	brtc	.+8      	; 0x9ae <__addsf3+0x28>
 9a6:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_nan>
 9aa:	0e f4       	brtc	.+2      	; 0x9ae <__addsf3+0x28>
 9ac:	e0 95       	com	r30
 9ae:	e7 fb       	bst	r30, 7
 9b0:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>

000009b4 <__addsf3x>:
 9b4:	e9 2f       	mov	r30, r25
 9b6:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_split3>
 9ba:	58 f3       	brcs	.-42     	; 0x992 <__addsf3+0xc>
 9bc:	ba 17       	cp	r27, r26
 9be:	62 07       	cpc	r22, r18
 9c0:	73 07       	cpc	r23, r19
 9c2:	84 07       	cpc	r24, r20
 9c4:	95 07       	cpc	r25, r21
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__addsf3x+0x1c>
 9c8:	79 f4       	brne	.+30     	; 0x9e8 <__addsf3x+0x34>
 9ca:	a6 f5       	brtc	.+104    	; 0xa34 <__addsf3x+0x80>
 9cc:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_zero>
 9d0:	0e f4       	brtc	.+2      	; 0x9d4 <__addsf3x+0x20>
 9d2:	e0 95       	com	r30
 9d4:	0b 2e       	mov	r0, r27
 9d6:	ba 2f       	mov	r27, r26
 9d8:	a0 2d       	mov	r26, r0
 9da:	0b 01       	movw	r0, r22
 9dc:	b9 01       	movw	r22, r18
 9de:	90 01       	movw	r18, r0
 9e0:	0c 01       	movw	r0, r24
 9e2:	ca 01       	movw	r24, r20
 9e4:	a0 01       	movw	r20, r0
 9e6:	11 24       	eor	r1, r1
 9e8:	ff 27       	eor	r31, r31
 9ea:	59 1b       	sub	r21, r25
 9ec:	99 f0       	breq	.+38     	; 0xa14 <__addsf3x+0x60>
 9ee:	59 3f       	cpi	r21, 0xF9	; 249
 9f0:	50 f4       	brcc	.+20     	; 0xa06 <__addsf3x+0x52>
 9f2:	50 3e       	cpi	r21, 0xE0	; 224
 9f4:	68 f1       	brcs	.+90     	; 0xa50 <__addsf3x+0x9c>
 9f6:	1a 16       	cp	r1, r26
 9f8:	f0 40       	sbci	r31, 0x00	; 0
 9fa:	a2 2f       	mov	r26, r18
 9fc:	23 2f       	mov	r18, r19
 9fe:	34 2f       	mov	r19, r20
 a00:	44 27       	eor	r20, r20
 a02:	58 5f       	subi	r21, 0xF8	; 248
 a04:	f3 cf       	rjmp	.-26     	; 0x9ec <__addsf3x+0x38>
 a06:	46 95       	lsr	r20
 a08:	37 95       	ror	r19
 a0a:	27 95       	ror	r18
 a0c:	a7 95       	ror	r26
 a0e:	f0 40       	sbci	r31, 0x00	; 0
 a10:	53 95       	inc	r21
 a12:	c9 f7       	brne	.-14     	; 0xa06 <__addsf3x+0x52>
 a14:	7e f4       	brtc	.+30     	; 0xa34 <__addsf3x+0x80>
 a16:	1f 16       	cp	r1, r31
 a18:	ba 0b       	sbc	r27, r26
 a1a:	62 0b       	sbc	r22, r18
 a1c:	73 0b       	sbc	r23, r19
 a1e:	84 0b       	sbc	r24, r20
 a20:	ba f0       	brmi	.+46     	; 0xa50 <__addsf3x+0x9c>
 a22:	91 50       	subi	r25, 0x01	; 1
 a24:	a1 f0       	breq	.+40     	; 0xa4e <__addsf3x+0x9a>
 a26:	ff 0f       	add	r31, r31
 a28:	bb 1f       	adc	r27, r27
 a2a:	66 1f       	adc	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	c2 f7       	brpl	.-16     	; 0xa22 <__addsf3x+0x6e>
 a32:	0e c0       	rjmp	.+28     	; 0xa50 <__addsf3x+0x9c>
 a34:	ba 0f       	add	r27, r26
 a36:	62 1f       	adc	r22, r18
 a38:	73 1f       	adc	r23, r19
 a3a:	84 1f       	adc	r24, r20
 a3c:	48 f4       	brcc	.+18     	; 0xa50 <__addsf3x+0x9c>
 a3e:	87 95       	ror	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b7 95       	ror	r27
 a46:	f7 95       	ror	r31
 a48:	9e 3f       	cpi	r25, 0xFE	; 254
 a4a:	08 f0       	brcs	.+2      	; 0xa4e <__addsf3x+0x9a>
 a4c:	b0 cf       	rjmp	.-160    	; 0x9ae <__addsf3+0x28>
 a4e:	93 95       	inc	r25
 a50:	88 0f       	add	r24, r24
 a52:	08 f0       	brcs	.+2      	; 0xa56 <__addsf3x+0xa2>
 a54:	99 27       	eor	r25, r25
 a56:	ee 0f       	add	r30, r30
 a58:	97 95       	ror	r25
 a5a:	87 95       	ror	r24
 a5c:	08 95       	ret

00000a5e <__divsf3>:
 a5e:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3x>
 a62:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_round>
 a66:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 a6a:	58 f0       	brcs	.+22     	; 0xa82 <__divsf3+0x24>
 a6c:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 a70:	40 f0       	brcs	.+16     	; 0xa82 <__divsf3+0x24>
 a72:	29 f4       	brne	.+10     	; 0xa7e <__divsf3+0x20>
 a74:	5f 3f       	cpi	r21, 0xFF	; 255
 a76:	29 f0       	breq	.+10     	; 0xa82 <__divsf3+0x24>
 a78:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>
 a7c:	51 11       	cpse	r21, r1
 a7e:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_szero>
 a82:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_nan>

00000a86 <__divsf3x>:
 a86:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_split3>
 a8a:	68 f3       	brcs	.-38     	; 0xa66 <__divsf3+0x8>

00000a8c <__divsf3_pse>:
 a8c:	99 23       	and	r25, r25
 a8e:	b1 f3       	breq	.-20     	; 0xa7c <__divsf3+0x1e>
 a90:	55 23       	and	r21, r21
 a92:	91 f3       	breq	.-28     	; 0xa78 <__divsf3+0x1a>
 a94:	95 1b       	sub	r25, r21
 a96:	55 0b       	sbc	r21, r21
 a98:	bb 27       	eor	r27, r27
 a9a:	aa 27       	eor	r26, r26
 a9c:	62 17       	cp	r22, r18
 a9e:	73 07       	cpc	r23, r19
 aa0:	84 07       	cpc	r24, r20
 aa2:	38 f0       	brcs	.+14     	; 0xab2 <__divsf3_pse+0x26>
 aa4:	9f 5f       	subi	r25, 0xFF	; 255
 aa6:	5f 4f       	sbci	r21, 0xFF	; 255
 aa8:	22 0f       	add	r18, r18
 aaa:	33 1f       	adc	r19, r19
 aac:	44 1f       	adc	r20, r20
 aae:	aa 1f       	adc	r26, r26
 ab0:	a9 f3       	breq	.-22     	; 0xa9c <__divsf3_pse+0x10>
 ab2:	35 d0       	rcall	.+106    	; 0xb1e <__divsf3_pse+0x92>
 ab4:	0e 2e       	mov	r0, r30
 ab6:	3a f0       	brmi	.+14     	; 0xac6 <__divsf3_pse+0x3a>
 ab8:	e0 e8       	ldi	r30, 0x80	; 128
 aba:	32 d0       	rcall	.+100    	; 0xb20 <__divsf3_pse+0x94>
 abc:	91 50       	subi	r25, 0x01	; 1
 abe:	50 40       	sbci	r21, 0x00	; 0
 ac0:	e6 95       	lsr	r30
 ac2:	00 1c       	adc	r0, r0
 ac4:	ca f7       	brpl	.-14     	; 0xab8 <__divsf3_pse+0x2c>
 ac6:	2b d0       	rcall	.+86     	; 0xb1e <__divsf3_pse+0x92>
 ac8:	fe 2f       	mov	r31, r30
 aca:	29 d0       	rcall	.+82     	; 0xb1e <__divsf3_pse+0x92>
 acc:	66 0f       	add	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	bb 1f       	adc	r27, r27
 ad4:	26 17       	cp	r18, r22
 ad6:	37 07       	cpc	r19, r23
 ad8:	48 07       	cpc	r20, r24
 ada:	ab 07       	cpc	r26, r27
 adc:	b0 e8       	ldi	r27, 0x80	; 128
 ade:	09 f0       	breq	.+2      	; 0xae2 <__divsf3_pse+0x56>
 ae0:	bb 0b       	sbc	r27, r27
 ae2:	80 2d       	mov	r24, r0
 ae4:	bf 01       	movw	r22, r30
 ae6:	ff 27       	eor	r31, r31
 ae8:	93 58       	subi	r25, 0x83	; 131
 aea:	5f 4f       	sbci	r21, 0xFF	; 255
 aec:	3a f0       	brmi	.+14     	; 0xafc <__divsf3_pse+0x70>
 aee:	9e 3f       	cpi	r25, 0xFE	; 254
 af0:	51 05       	cpc	r21, r1
 af2:	78 f0       	brcs	.+30     	; 0xb12 <__divsf3_pse+0x86>
 af4:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>
 af8:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_szero>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	e4 f3       	brlt	.-8      	; 0xaf8 <__divsf3_pse+0x6c>
 b00:	98 3e       	cpi	r25, 0xE8	; 232
 b02:	d4 f3       	brlt	.-12     	; 0xaf8 <__divsf3_pse+0x6c>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f7 95       	ror	r31
 b0e:	9f 5f       	subi	r25, 0xFF	; 255
 b10:	c9 f7       	brne	.-14     	; 0xb04 <__divsf3_pse+0x78>
 b12:	88 0f       	add	r24, r24
 b14:	91 1d       	adc	r25, r1
 b16:	96 95       	lsr	r25
 b18:	87 95       	ror	r24
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret
 b1e:	e1 e0       	ldi	r30, 0x01	; 1
 b20:	66 0f       	add	r22, r22
 b22:	77 1f       	adc	r23, r23
 b24:	88 1f       	adc	r24, r24
 b26:	bb 1f       	adc	r27, r27
 b28:	62 17       	cp	r22, r18
 b2a:	73 07       	cpc	r23, r19
 b2c:	84 07       	cpc	r24, r20
 b2e:	ba 07       	cpc	r27, r26
 b30:	20 f0       	brcs	.+8      	; 0xb3a <__divsf3_pse+0xae>
 b32:	62 1b       	sub	r22, r18
 b34:	73 0b       	sbc	r23, r19
 b36:	84 0b       	sbc	r24, r20
 b38:	ba 0b       	sbc	r27, r26
 b3a:	ee 1f       	adc	r30, r30
 b3c:	88 f7       	brcc	.-30     	; 0xb20 <__divsf3_pse+0x94>
 b3e:	e0 95       	com	r30
 b40:	08 95       	ret

00000b42 <__fixunssfsi>:
 b42:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_splitA>
 b46:	88 f0       	brcs	.+34     	; 0xb6a <__fixunssfsi+0x28>
 b48:	9f 57       	subi	r25, 0x7F	; 127
 b4a:	98 f0       	brcs	.+38     	; 0xb72 <__fixunssfsi+0x30>
 b4c:	b9 2f       	mov	r27, r25
 b4e:	99 27       	eor	r25, r25
 b50:	b7 51       	subi	r27, 0x17	; 23
 b52:	b0 f0       	brcs	.+44     	; 0xb80 <__fixunssfsi+0x3e>
 b54:	e1 f0       	breq	.+56     	; 0xb8e <__fixunssfsi+0x4c>
 b56:	66 0f       	add	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	1a f0       	brmi	.+6      	; 0xb66 <__fixunssfsi+0x24>
 b60:	ba 95       	dec	r27
 b62:	c9 f7       	brne	.-14     	; 0xb56 <__fixunssfsi+0x14>
 b64:	14 c0       	rjmp	.+40     	; 0xb8e <__fixunssfsi+0x4c>
 b66:	b1 30       	cpi	r27, 0x01	; 1
 b68:	91 f0       	breq	.+36     	; 0xb8e <__fixunssfsi+0x4c>
 b6a:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_zero>
 b6e:	b1 e0       	ldi	r27, 0x01	; 1
 b70:	08 95       	ret
 b72:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_zero>
 b76:	67 2f       	mov	r22, r23
 b78:	78 2f       	mov	r23, r24
 b7a:	88 27       	eor	r24, r24
 b7c:	b8 5f       	subi	r27, 0xF8	; 248
 b7e:	39 f0       	breq	.+14     	; 0xb8e <__fixunssfsi+0x4c>
 b80:	b9 3f       	cpi	r27, 0xF9	; 249
 b82:	cc f3       	brlt	.-14     	; 0xb76 <__fixunssfsi+0x34>
 b84:	86 95       	lsr	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b3 95       	inc	r27
 b8c:	d9 f7       	brne	.-10     	; 0xb84 <__fixunssfsi+0x42>
 b8e:	3e f4       	brtc	.+14     	; 0xb9e <__fixunssfsi+0x5c>
 b90:	90 95       	com	r25
 b92:	80 95       	com	r24
 b94:	70 95       	com	r23
 b96:	61 95       	neg	r22
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	08 95       	ret

00000ba0 <__floatunsisf>:
 ba0:	e8 94       	clt
 ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <__floatsisf+0x12>

00000ba4 <__floatsisf>:
 ba4:	97 fb       	bst	r25, 7
 ba6:	3e f4       	brtc	.+14     	; 0xbb6 <__floatsisf+0x12>
 ba8:	90 95       	com	r25
 baa:	80 95       	com	r24
 bac:	70 95       	com	r23
 bae:	61 95       	neg	r22
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255
 bb6:	99 23       	and	r25, r25
 bb8:	a9 f0       	breq	.+42     	; 0xbe4 <__floatsisf+0x40>
 bba:	f9 2f       	mov	r31, r25
 bbc:	96 e9       	ldi	r25, 0x96	; 150
 bbe:	bb 27       	eor	r27, r27
 bc0:	93 95       	inc	r25
 bc2:	f6 95       	lsr	r31
 bc4:	87 95       	ror	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	b7 95       	ror	r27
 bcc:	f1 11       	cpse	r31, r1
 bce:	f8 cf       	rjmp	.-16     	; 0xbc0 <__floatsisf+0x1c>
 bd0:	fa f4       	brpl	.+62     	; 0xc10 <__floatsisf+0x6c>
 bd2:	bb 0f       	add	r27, r27
 bd4:	11 f4       	brne	.+4      	; 0xbda <__floatsisf+0x36>
 bd6:	60 ff       	sbrs	r22, 0
 bd8:	1b c0       	rjmp	.+54     	; 0xc10 <__floatsisf+0x6c>
 bda:	6f 5f       	subi	r22, 0xFF	; 255
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	16 c0       	rjmp	.+44     	; 0xc10 <__floatsisf+0x6c>
 be4:	88 23       	and	r24, r24
 be6:	11 f0       	breq	.+4      	; 0xbec <__floatsisf+0x48>
 be8:	96 e9       	ldi	r25, 0x96	; 150
 bea:	11 c0       	rjmp	.+34     	; 0xc0e <__floatsisf+0x6a>
 bec:	77 23       	and	r23, r23
 bee:	21 f0       	breq	.+8      	; 0xbf8 <__floatsisf+0x54>
 bf0:	9e e8       	ldi	r25, 0x8E	; 142
 bf2:	87 2f       	mov	r24, r23
 bf4:	76 2f       	mov	r23, r22
 bf6:	05 c0       	rjmp	.+10     	; 0xc02 <__floatsisf+0x5e>
 bf8:	66 23       	and	r22, r22
 bfa:	71 f0       	breq	.+28     	; 0xc18 <__floatsisf+0x74>
 bfc:	96 e8       	ldi	r25, 0x86	; 134
 bfe:	86 2f       	mov	r24, r22
 c00:	70 e0       	ldi	r23, 0x00	; 0
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	2a f0       	brmi	.+10     	; 0xc10 <__floatsisf+0x6c>
 c06:	9a 95       	dec	r25
 c08:	66 0f       	add	r22, r22
 c0a:	77 1f       	adc	r23, r23
 c0c:	88 1f       	adc	r24, r24
 c0e:	da f7       	brpl	.-10     	; 0xc06 <__floatsisf+0x62>
 c10:	88 0f       	add	r24, r24
 c12:	96 95       	lsr	r25
 c14:	87 95       	ror	r24
 c16:	97 f9       	bld	r25, 7
 c18:	08 95       	ret

00000c1a <__fp_inf>:
 c1a:	97 f9       	bld	r25, 7
 c1c:	9f 67       	ori	r25, 0x7F	; 127
 c1e:	80 e8       	ldi	r24, 0x80	; 128
 c20:	70 e0       	ldi	r23, 0x00	; 0
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	08 95       	ret

00000c26 <__fp_nan>:
 c26:	9f ef       	ldi	r25, 0xFF	; 255
 c28:	80 ec       	ldi	r24, 0xC0	; 192
 c2a:	08 95       	ret

00000c2c <__fp_pscA>:
 c2c:	00 24       	eor	r0, r0
 c2e:	0a 94       	dec	r0
 c30:	16 16       	cp	r1, r22
 c32:	17 06       	cpc	r1, r23
 c34:	18 06       	cpc	r1, r24
 c36:	09 06       	cpc	r0, r25
 c38:	08 95       	ret

00000c3a <__fp_pscB>:
 c3a:	00 24       	eor	r0, r0
 c3c:	0a 94       	dec	r0
 c3e:	12 16       	cp	r1, r18
 c40:	13 06       	cpc	r1, r19
 c42:	14 06       	cpc	r1, r20
 c44:	05 06       	cpc	r0, r21
 c46:	08 95       	ret

00000c48 <__fp_round>:
 c48:	09 2e       	mov	r0, r25
 c4a:	03 94       	inc	r0
 c4c:	00 0c       	add	r0, r0
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__fp_round+0xc>
 c50:	88 23       	and	r24, r24
 c52:	52 f0       	brmi	.+20     	; 0xc68 <__fp_round+0x20>
 c54:	bb 0f       	add	r27, r27
 c56:	40 f4       	brcc	.+16     	; 0xc68 <__fp_round+0x20>
 c58:	bf 2b       	or	r27, r31
 c5a:	11 f4       	brne	.+4      	; 0xc60 <__fp_round+0x18>
 c5c:	60 ff       	sbrs	r22, 0
 c5e:	04 c0       	rjmp	.+8      	; 0xc68 <__fp_round+0x20>
 c60:	6f 5f       	subi	r22, 0xFF	; 255
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	08 95       	ret

00000c6a <__fp_split3>:
 c6a:	57 fd       	sbrc	r21, 7
 c6c:	90 58       	subi	r25, 0x80	; 128
 c6e:	44 0f       	add	r20, r20
 c70:	55 1f       	adc	r21, r21
 c72:	59 f0       	breq	.+22     	; 0xc8a <__fp_splitA+0x10>
 c74:	5f 3f       	cpi	r21, 0xFF	; 255
 c76:	71 f0       	breq	.+28     	; 0xc94 <__fp_splitA+0x1a>
 c78:	47 95       	ror	r20

00000c7a <__fp_splitA>:
 c7a:	88 0f       	add	r24, r24
 c7c:	97 fb       	bst	r25, 7
 c7e:	99 1f       	adc	r25, r25
 c80:	61 f0       	breq	.+24     	; 0xc9a <__fp_splitA+0x20>
 c82:	9f 3f       	cpi	r25, 0xFF	; 255
 c84:	79 f0       	breq	.+30     	; 0xca4 <__fp_splitA+0x2a>
 c86:	87 95       	ror	r24
 c88:	08 95       	ret
 c8a:	12 16       	cp	r1, r18
 c8c:	13 06       	cpc	r1, r19
 c8e:	14 06       	cpc	r1, r20
 c90:	55 1f       	adc	r21, r21
 c92:	f2 cf       	rjmp	.-28     	; 0xc78 <__fp_split3+0xe>
 c94:	46 95       	lsr	r20
 c96:	f1 df       	rcall	.-30     	; 0xc7a <__fp_splitA>
 c98:	08 c0       	rjmp	.+16     	; 0xcaa <__fp_splitA+0x30>
 c9a:	16 16       	cp	r1, r22
 c9c:	17 06       	cpc	r1, r23
 c9e:	18 06       	cpc	r1, r24
 ca0:	99 1f       	adc	r25, r25
 ca2:	f1 cf       	rjmp	.-30     	; 0xc86 <__fp_splitA+0xc>
 ca4:	86 95       	lsr	r24
 ca6:	71 05       	cpc	r23, r1
 ca8:	61 05       	cpc	r22, r1
 caa:	08 94       	sec
 cac:	08 95       	ret

00000cae <__fp_zero>:
 cae:	e8 94       	clt

00000cb0 <__fp_szero>:
 cb0:	bb 27       	eor	r27, r27
 cb2:	66 27       	eor	r22, r22
 cb4:	77 27       	eor	r23, r23
 cb6:	cb 01       	movw	r24, r22
 cb8:	97 f9       	bld	r25, 7
 cba:	08 95       	ret

00000cbc <__mulsf3>:
 cbc:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3x>
 cc0:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_round>
 cc4:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 cc8:	38 f0       	brcs	.+14     	; 0xcd8 <__mulsf3+0x1c>
 cca:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 cce:	20 f0       	brcs	.+8      	; 0xcd8 <__mulsf3+0x1c>
 cd0:	95 23       	and	r25, r21
 cd2:	11 f0       	breq	.+4      	; 0xcd8 <__mulsf3+0x1c>
 cd4:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>
 cd8:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_nan>
 cdc:	11 24       	eor	r1, r1
 cde:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_szero>

00000ce2 <__mulsf3x>:
 ce2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_split3>
 ce6:	70 f3       	brcs	.-36     	; 0xcc4 <__mulsf3+0x8>

00000ce8 <__mulsf3_pse>:
 ce8:	95 9f       	mul	r25, r21
 cea:	c1 f3       	breq	.-16     	; 0xcdc <__mulsf3+0x20>
 cec:	95 0f       	add	r25, r21
 cee:	50 e0       	ldi	r21, 0x00	; 0
 cf0:	55 1f       	adc	r21, r21
 cf2:	62 9f       	mul	r22, r18
 cf4:	f0 01       	movw	r30, r0
 cf6:	72 9f       	mul	r23, r18
 cf8:	bb 27       	eor	r27, r27
 cfa:	f0 0d       	add	r31, r0
 cfc:	b1 1d       	adc	r27, r1
 cfe:	63 9f       	mul	r22, r19
 d00:	aa 27       	eor	r26, r26
 d02:	f0 0d       	add	r31, r0
 d04:	b1 1d       	adc	r27, r1
 d06:	aa 1f       	adc	r26, r26
 d08:	64 9f       	mul	r22, r20
 d0a:	66 27       	eor	r22, r22
 d0c:	b0 0d       	add	r27, r0
 d0e:	a1 1d       	adc	r26, r1
 d10:	66 1f       	adc	r22, r22
 d12:	82 9f       	mul	r24, r18
 d14:	22 27       	eor	r18, r18
 d16:	b0 0d       	add	r27, r0
 d18:	a1 1d       	adc	r26, r1
 d1a:	62 1f       	adc	r22, r18
 d1c:	73 9f       	mul	r23, r19
 d1e:	b0 0d       	add	r27, r0
 d20:	a1 1d       	adc	r26, r1
 d22:	62 1f       	adc	r22, r18
 d24:	83 9f       	mul	r24, r19
 d26:	a0 0d       	add	r26, r0
 d28:	61 1d       	adc	r22, r1
 d2a:	22 1f       	adc	r18, r18
 d2c:	74 9f       	mul	r23, r20
 d2e:	33 27       	eor	r19, r19
 d30:	a0 0d       	add	r26, r0
 d32:	61 1d       	adc	r22, r1
 d34:	23 1f       	adc	r18, r19
 d36:	84 9f       	mul	r24, r20
 d38:	60 0d       	add	r22, r0
 d3a:	21 1d       	adc	r18, r1
 d3c:	82 2f       	mov	r24, r18
 d3e:	76 2f       	mov	r23, r22
 d40:	6a 2f       	mov	r22, r26
 d42:	11 24       	eor	r1, r1
 d44:	9f 57       	subi	r25, 0x7F	; 127
 d46:	50 40       	sbci	r21, 0x00	; 0
 d48:	9a f0       	brmi	.+38     	; 0xd70 <__mulsf3_pse+0x88>
 d4a:	f1 f0       	breq	.+60     	; 0xd88 <__mulsf3_pse+0xa0>
 d4c:	88 23       	and	r24, r24
 d4e:	4a f0       	brmi	.+18     	; 0xd62 <__mulsf3_pse+0x7a>
 d50:	ee 0f       	add	r30, r30
 d52:	ff 1f       	adc	r31, r31
 d54:	bb 1f       	adc	r27, r27
 d56:	66 1f       	adc	r22, r22
 d58:	77 1f       	adc	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	91 50       	subi	r25, 0x01	; 1
 d5e:	50 40       	sbci	r21, 0x00	; 0
 d60:	a9 f7       	brne	.-22     	; 0xd4c <__mulsf3_pse+0x64>
 d62:	9e 3f       	cpi	r25, 0xFE	; 254
 d64:	51 05       	cpc	r21, r1
 d66:	80 f0       	brcs	.+32     	; 0xd88 <__mulsf3_pse+0xa0>
 d68:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>
 d6c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_szero>
 d70:	5f 3f       	cpi	r21, 0xFF	; 255
 d72:	e4 f3       	brlt	.-8      	; 0xd6c <__mulsf3_pse+0x84>
 d74:	98 3e       	cpi	r25, 0xE8	; 232
 d76:	d4 f3       	brlt	.-12     	; 0xd6c <__mulsf3_pse+0x84>
 d78:	86 95       	lsr	r24
 d7a:	77 95       	ror	r23
 d7c:	67 95       	ror	r22
 d7e:	b7 95       	ror	r27
 d80:	f7 95       	ror	r31
 d82:	e7 95       	ror	r30
 d84:	9f 5f       	subi	r25, 0xFF	; 255
 d86:	c1 f7       	brne	.-16     	; 0xd78 <__mulsf3_pse+0x90>
 d88:	fe 2b       	or	r31, r30
 d8a:	88 0f       	add	r24, r24
 d8c:	91 1d       	adc	r25, r1
 d8e:	96 95       	lsr	r25
 d90:	87 95       	ror	r24
 d92:	97 f9       	bld	r25, 7
 d94:	08 95       	ret

00000d96 <__umulhisi3>:
 d96:	a2 9f       	mul	r26, r18
 d98:	b0 01       	movw	r22, r0
 d9a:	b3 9f       	mul	r27, r19
 d9c:	c0 01       	movw	r24, r0
 d9e:	a3 9f       	mul	r26, r19
 da0:	70 0d       	add	r23, r0
 da2:	81 1d       	adc	r24, r1
 da4:	11 24       	eor	r1, r1
 da6:	91 1d       	adc	r25, r1
 da8:	b2 9f       	mul	r27, r18
 daa:	70 0d       	add	r23, r0
 dac:	81 1d       	adc	r24, r1
 dae:	11 24       	eor	r1, r1
 db0:	91 1d       	adc	r25, r1
 db2:	08 95       	ret

00000db4 <_exit>:
 db4:	f8 94       	cli

00000db6 <__stop_program>:
 db6:	ff cf       	rjmp	.-2      	; 0xdb6 <__stop_program>
