
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000009d2  00000a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010f  0080013a  0080013a  00000aa0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b52  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000949  00000000  00000000  00002712  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c7  00000000  00000000  0000305b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056f  00000000  00000000  00003c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea8  00000000  00000000  0000417b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00005023  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_11>
  30:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_14>
  3c:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	char tmp = UDR0; 
  b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
  bc:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <message_complete>
  c0:	91 11       	cpse	r25, r1
  c2:	47 c0       	rjmp	.+142    	; 0x152 <__vector_18+0xac>
		if(tmp == '{'){
  c4:	8b 37       	cpi	r24, 0x7B	; 123
  c6:	49 f4       	brne	.+18     	; 0xda <__vector_18+0x34>
			net_brackets++;
  c8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <net_brackets>
			message_start = true;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <__data_end>
  d8:	12 c0       	rjmp	.+36     	; 0xfe <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
  da:	8d 37       	cpi	r24, 0x7D	; 125
  dc:	81 f4       	brne	.+32     	; 0xfe <__vector_18+0x58>
  de:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	61 f4       	brne	.+24     	; 0xfe <__vector_18+0x58>
			net_brackets--;
  e6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <net_brackets>
			if(net_brackets == 0){
  f0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  f4:	91 11       	cpse	r25, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_18+0x58>
				message_complete = true;
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <message_complete>
			}
		}

		if(message_start == true){
  fe:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
 102:	91 30       	cpi	r25, 0x01	; 1
 104:	a9 f4       	brne	.+42     	; 0x130 <__vector_18+0x8a>
			received_message[message_index] = tmp;
 106:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <message_index>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e6 5b       	subi	r30, 0xB6	; 182
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 83       	st	Z, r24
			message_index++;
 112:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <message_index>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <message_index>
			if(message_complete == true){
 11c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <message_complete>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <__vector_18+0x8a>
				received_message[message_index] = '\0';
 124:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <message_index>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e6 5b       	subi	r30, 0xB6	; 182
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 130:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <message_index>
 134:	8e 3f       	cpi	r24, 0xFE	; 254
 136:	21 f0       	breq	.+8      	; 0x140 <__vector_18+0x9a>
 138:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <net_brackets>
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	48 f0       	brcs	.+18     	; 0x152 <__vector_18+0xac>
			receive_error = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <receive_error>
			message_start = false;
 146:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			message_complete = false;
 14a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <message_complete>
			message_index = 0;
 14e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <message_index>
		}
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 164:	83 e3       	ldi	r24, 0x33	; 51
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 96 02 	call	0x52c	; 0x52c <uart_initiate>

	//Enable Global interrupts
	sei();
 16c:	78 94       	sei

	*frequency = 12.5;
 16e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 172:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a8 e4       	ldi	r26, 0x48	; 72
 17c:	b1 e4       	ldi	r27, 0x41	; 65
 17e:	80 83       	st	Z, r24
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	a2 83       	std	Z+2, r26	; 0x02
 184:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 150;
 186:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 18a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 18e:	86 e9       	ldi	r24, 0x96	; 150
 190:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 192:	0e 94 29 01 	call	0x252	; 0x252 <driver_timer_initiate>
	set_parameters(*frequency, *mfc);
 196:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 19a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 19e:	40 81       	ld	r20, Z
 1a0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 1a4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 1a8:	60 81       	ld	r22, Z
 1aa:	71 81       	ldd	r23, Z+1	; 0x01
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	93 81       	ldd	r25, Z+3	; 0x03
 1b0:	0e 94 43 01 	call	0x286	; 0x286 <set_parameters>
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 1b4:	c1 ec       	ldi	r28, 0xC1	; 193
 1b6:	d0 e0       	ldi	r29, 0x00	; 0

		#ifdef SITH
			project_skywalker();
		#endif

		if(message_complete == true){
 1b8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <message_complete>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	81 f5       	brne	.+96     	; 0x220 <main+0xbc>
			UCSR0B &= ~(1 << RXEN0);
 1c0:	88 81       	ld	r24, Y
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 ab 02 	call	0x556	; 0x556 <uart_transmit>
			uart_transmit((char*)received_message);
 1ce:	8a e4       	ldi	r24, 0x4A	; 74
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 ab 02 	call	0x556	; 0x556 <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 1d6:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <mfc>
 1da:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <mfc+0x1>
 1de:	8a e4       	ldi	r24, 0x4A	; 74
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 c1 02 	call	0x582	; 0x582 <process_message>
			set_parameters(*frequency, *mfc);
 1e6:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 1ea:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 1ee:	40 81       	ld	r20, Z
 1f0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 1f4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 1f8:	60 81       	ld	r22, Z
 1fa:	71 81       	ldd	r23, Z+1	; 0x01
 1fc:	82 81       	ldd	r24, Z+2	; 0x02
 1fe:	93 81       	ldd	r25, Z+3	; 0x03
 200:	0e 94 43 01 	call	0x286	; 0x286 <set_parameters>
			uart_transmit("\n\r");
 204:	86 e3       	ldi	r24, 0x36	; 54
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 ab 02 	call	0x556	; 0x556 <uart_transmit>
			message_complete = false;
 20c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <message_complete>
			message_start = false;
 210:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			message_index = 0;
 214:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <message_index>
			UCSR0B |= (1 << RXEN0);
 218:	88 81       	ld	r24, Y
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	88 83       	st	Y, r24
 21e:	cc cf       	rjmp	.-104    	; 0x1b8 <main+0x54>
		}
		else if(receive_error == true){
 220:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <receive_error>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	41 f6       	brne	.-112    	; 0x1b8 <main+0x54>
			UCSR0B &= ~(1 << RXEN0);
 228:	88 81       	ld	r24, Y
 22a:	8f 7e       	andi	r24, 0xEF	; 239
 22c:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 ab 02 	call	0x556	; 0x556 <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 236:	89 e1       	ldi	r24, 0x19	; 25
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 ab 02 	call	0x556	; 0x556 <uart_transmit>
			receive_error = false;
 23e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <receive_error>
			message_start = false;
 242:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			net_brackets = 0;
 246:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <net_brackets>
			UCSR0B |= (1 << RXEN0);
 24a:	88 81       	ld	r24, Y
 24c:	80 61       	ori	r24, 0x10	; 16
 24e:	88 83       	st	Y, r24
 250:	b3 cf       	rjmp	.-154    	; 0x1b8 <main+0x54>

00000252 <driver_timer_initiate>:
		TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
		TCNT1 = 0;
	}
}

void soft_start(float* req_freq, int* req_mfc){
 252:	85 b5       	in	r24, 0x25	; 37
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 bd       	out	0x25, r24	; 37
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	87 bd       	out	0x27, r24	; 39
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	88 bd       	out	0x28, r24	; 40
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
 26a:	20 9a       	sbi	0x04, 0	; 4
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 6e       	ori	r24, 0xE0	; 224
 270:	8a b9       	out	0x0a, r24	; 10
 272:	28 9a       	sbi	0x05, 0	; 5
 274:	5e 9a       	sbi	0x0b, 6	; 11
 276:	5d 98       	cbi	0x0b, 5	; 11
 278:	5f 98       	cbi	0x0b, 7	; 11
 27a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <change_duty>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <first_cycle>
 284:	08 95       	ret

00000286 <set_parameters>:
 286:	4f 92       	push	r4
 288:	5f 92       	push	r5
 28a:	6f 92       	push	r6
 28c:	7f 92       	push	r7
 28e:	8f 92       	push	r8
 290:	9f 92       	push	r9
 292:	af 92       	push	r10
 294:	bf 92       	push	r11
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	41 11       	cpse	r20, r1
 2a0:	18 c0       	rjmp	.+48     	; 0x2d2 <set_parameters+0x4c>
 2a2:	5f 9a       	sbi	0x0b, 7	; 11
 2a4:	5e 9a       	sbi	0x0b, 6	; 11
 2a6:	28 98       	cbi	0x05, 0	; 5
 2a8:	5d 98       	cbi	0x0b, 5	; 11
 2aa:	ef e6       	ldi	r30, 0x6F	; 111
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	80 83       	st	Z, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	8b 7f       	andi	r24, 0xFB	; 251
 2b8:	80 83       	st	Z, r24
 2ba:	ee e6       	ldi	r30, 0x6E	; 110
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	8d 7f       	andi	r24, 0xFD	; 253
 2c2:	80 83       	st	Z, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	80 83       	st	Z, r24
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <change_duty>
 2d0:	7b c0       	rjmp	.+246    	; 0x3c8 <set_parameters+0x142>
 2d2:	6b 01       	movw	r12, r22
 2d4:	7c 01       	movw	r14, r24
 2d6:	64 2f       	mov	r22, r20
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__floatunsisf>
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	4f e7       	ldi	r20, 0x7F	; 127
 2e8:	53 e4       	ldi	r21, 0x43	; 67
 2ea:	0e 94 4b 03 	call	0x696	; 0x696 <__divsf3>
 2ee:	4b 01       	movw	r8, r22
 2f0:	5c 01       	movw	r10, r24
 2f2:	a7 01       	movw	r20, r14
 2f4:	96 01       	movw	r18, r12
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	0e 94 df 02 	call	0x5be	; 0x5be <__addsf3>
 2fe:	9b 01       	movw	r18, r22
 300:	ac 01       	movw	r20, r24
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	8a e7       	ldi	r24, 0x7A	; 122
 308:	94 e4       	ldi	r25, 0x44	; 68
 30a:	0e 94 4b 03 	call	0x696	; 0x696 <__divsf3>
 30e:	2b 01       	movw	r4, r22
 310:	3c 01       	movw	r6, r24
 312:	9b 01       	movw	r18, r22
 314:	ac 01       	movw	r20, r24
 316:	c5 01       	movw	r24, r10
 318:	b4 01       	movw	r22, r8
 31a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 31e:	6b 01       	movw	r12, r22
 320:	7c 01       	movw	r14, r24
 322:	a5 01       	movw	r20, r10
 324:	94 01       	movw	r18, r8
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	9f e3       	ldi	r25, 0x3F	; 63
 32e:	0e 94 de 02 	call	0x5bc	; 0x5bc <__subsf3>
 332:	a3 01       	movw	r20, r6
 334:	92 01       	movw	r18, r4
 336:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 33a:	a7 01       	movw	r20, r14
 33c:	96 01       	movw	r18, r12
 33e:	0e 94 df 02 	call	0x5be	; 0x5be <__addsf3>
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	a9 01       	movw	r20, r18
 348:	0e 94 df 02 	call	0x5be	; 0x5be <__addsf3>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	4a e7       	ldi	r20, 0x7A	; 122
 352:	54 e4       	ldi	r21, 0x44	; 68
 354:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 358:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixunssfsi>
 35c:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <t1_compare_a+0x1>
 360:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <t1_compare_a>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	4a e7       	ldi	r20, 0x7A	; 122
 36a:	54 e4       	ldi	r21, 0x44	; 68
 36c:	c7 01       	movw	r24, r14
 36e:	b6 01       	movw	r22, r12
 370:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 374:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixunssfsi>
 378:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <t1_compare_b+0x1>
 37c:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <t1_compare_b>
 380:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <isNegative>
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <change_duty>
 38a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <first_cycle>
 38e:	88 23       	and	r24, r24
 390:	91 f0       	breq	.+36     	; 0x3b6 <set_parameters+0x130>
 392:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <t1_compare_a>
 396:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <t1_compare_a+0x1>
 39a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 39e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3a2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <t1_compare_b>
 3a6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <t1_compare_b+0x1>
 3aa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 3ae:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 3b2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <first_cycle>
 3b6:	ef e6       	ldi	r30, 0x6F	; 111
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	86 60       	ori	r24, 0x06	; 6
 3be:	80 83       	st	Z, r24
 3c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	bf 90       	pop	r11
 3d2:	af 90       	pop	r10
 3d4:	9f 90       	pop	r9
 3d6:	8f 90       	pop	r8
 3d8:	7f 90       	pop	r7
 3da:	6f 90       	pop	r6
 3dc:	5f 90       	pop	r5
 3de:	4f 90       	pop	r4
 3e0:	08 95       	ret

000003e2 <__vector_14>:

}

ISR(TIMER0_COMPA_vect){	
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	8f 93       	push	r24
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0A);
 3f2:	ee e6       	ldi	r30, 0x6E	; 110
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	8d 7f       	andi	r24, 0xFD	; 253
 3fa:	80 83       	st	Z, r24
	if(isNegative == false){
 3fc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isNegative>
 400:	81 11       	cpse	r24, r1
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		SET_SW3;
 404:	5f 9a       	sbi	0x0b, 7	; 11
 406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	}
	else{
		SET_SW4;
 408:	5e 9a       	sbi	0x0b, 6	; 11
	}
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	8f 91       	pop	r24
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_11>:

ISR(TIMER1_COMPA_vect){
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
	if(isNegative == false){
 42a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isNegative>
 42e:	81 11       	cpse	r24, r1
 430:	02 c0       	rjmp	.+4      	; 0x436 <__vector_11+0x1c>
		CLR_SW4;
 432:	5e 98       	cbi	0x0b, 6	; 11
 434:	01 c0       	rjmp	.+2      	; 0x438 <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 436:	5f 98       	cbi	0x0b, 7	; 11
	}
	TIMSK1 &= ~(1 << OCIE1A);
 438:	ef e6       	ldi	r30, 0x6F	; 111
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	8d 7f       	andi	r24, 0xFD	; 253
 440:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1B);
 442:	80 81       	ld	r24, Z
 444:	8b 7f       	andi	r24, 0xFB	; 251
 446:	80 83       	st	Z, r24
	TIMSK0 |= (1 << OCIE0B);
 448:	ee e6       	ldi	r30, 0x6E	; 110
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	84 60       	ori	r24, 0x04	; 4
 450:	80 83       	st	Z, r24
	TCNT0 = 0;
 452:	16 bc       	out	0x26, r1	; 38

}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_15>:

ISR(TIMER0_COMPB_vect){
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0B);
 476:	ee e6       	ldi	r30, 0x6E	; 110
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	80 83       	st	Z, r24
	if(isNegative == false){
 480:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isNegative>
 484:	81 11       	cpse	r24, r1
 486:	05 c0       	rjmp	.+10     	; 0x492 <__vector_15+0x2e>
		SET_SW2;
 488:	5d 9a       	sbi	0x0b, 5	; 11
		isNegative = true;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <isNegative>
 490:	03 c0       	rjmp	.+6      	; 0x498 <__vector_15+0x34>
	}
	else{
		SET_SW1;
 492:	28 9a       	sbi	0x05, 0	; 5
		isNegative = false;
 494:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <isNegative>
	}
	if(change_duty == true){
 498:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <change_duty>
 49c:	88 23       	and	r24, r24
 49e:	79 f0       	breq	.+30     	; 0x4be <__vector_15+0x5a>
		OCR0A = t1_compare_a;
 4a0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <t1_compare_a>
 4a4:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <t1_compare_a+0x1>
 4a8:	87 bd       	out	0x27, r24	; 39
		OCR1B = t1_compare_b;
 4aa:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <t1_compare_b>
 4ae:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <t1_compare_b+0x1>
 4b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		change_duty = false;
 4ba:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <change_duty>
	}
	TIMSK1 |= (1 << OCIE1B);
 4be:	ef e6       	ldi	r30, 0x6F	; 111
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	84 60       	ori	r24, 0x04	; 4
 4c6:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 4c8:	80 81       	ld	r24, Z
 4ca:	82 60       	ori	r24, 0x02	; 2
 4cc:	80 83       	st	Z, r24
	TCNT1 = 0;
 4ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 4d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	8f 93       	push	r24
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
	TIMSK1 &= ~(1 << OCIE1B);
 4f8:	ef e6       	ldi	r30, 0x6F	; 111
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	8b 7f       	andi	r24, 0xFB	; 251
 500:	80 83       	st	Z, r24
	if(isNegative == false){
 502:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <isNegative>
 506:	81 11       	cpse	r24, r1
 508:	02 c0       	rjmp	.+4      	; 0x50e <__vector_12+0x26>
		CLR_SW1;
 50a:	28 98       	cbi	0x05, 0	; 5
 50c:	01 c0       	rjmp	.+2      	; 0x510 <__vector_12+0x28>
	}
	else{
		CLR_SW2;
 50e:	5d 98       	cbi	0x0b, 5	; 11
	}
	TIMSK0 |= (1 << OCIE0A);
 510:	ee e6       	ldi	r30, 0x6E	; 110
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	82 60       	ori	r24, 0x02	; 2
 518:	80 83       	st	Z, r24
	TCNT0 = 0;
 51a:	16 bc       	out	0x26, r1	; 38
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	8f 91       	pop	r24
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 52c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 530:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 534:	e1 ec       	ldi	r30, 0xC1	; 193
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	88 60       	ori	r24, 0x08	; 8
 53c:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 53e:	80 81       	ld	r24, Z
 540:	80 61       	ori	r24, 0x10	; 16
 542:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 544:	80 81       	ld	r24, Z
 546:	80 68       	ori	r24, 0x80	; 128
 548:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 54a:	e2 ec       	ldi	r30, 0xC2	; 194
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	86 60       	ori	r24, 0x06	; 6
 552:	80 83       	st	Z, r24
 554:	08 95       	ret

00000556 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 55a:	fc 01       	movw	r30, r24
 55c:	20 81       	ld	r18, Z
 55e:	22 23       	and	r18, r18
 560:	69 f0       	breq	.+26     	; 0x57c <uart_transmit+0x26>
 562:	dc 01       	movw	r26, r24
 564:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 566:	e0 ec       	ldi	r30, 0xC0	; 192
 568:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 56a:	c6 ec       	ldi	r28, 0xC6	; 198
 56c:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 56e:	90 81       	ld	r25, Z
 570:	95 ff       	sbrs	r25, 5
 572:	fd cf       	rjmp	.-6      	; 0x56e <uart_transmit+0x18>
		UDR0 = message[i];
 574:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 576:	2d 91       	ld	r18, X+
 578:	21 11       	cpse	r18, r1
 57a:	f9 cf       	rjmp	.-14     	; 0x56e <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 582:	fc 01       	movw	r30, r24
 584:	31 96       	adiw	r30, 0x01	; 1
 586:	04 96       	adiw	r24, 0x04	; 4
	int value = 0;
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 58c:	a9 01       	movw	r20, r18
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	22 0f       	add	r18, r18
 59c:	33 1f       	adc	r19, r19
 59e:	24 0f       	add	r18, r20
 5a0:	35 1f       	adc	r19, r21
 5a2:	41 91       	ld	r20, Z+
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	40 53       	subi	r20, 0x30	; 48
 5a8:	51 09       	sbc	r21, r1
 5aa:	24 0f       	add	r18, r20
 5ac:	35 1f       	adc	r19, r21

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 5ae:	e8 17       	cp	r30, r24
 5b0:	f9 07       	cpc	r31, r25
 5b2:	61 f7       	brne	.-40     	; 0x58c <process_message+0xa>
// 	}

// 	for(unsigned int i = 0; i < 3; i++){
// 		value = value*10 + (tmp[i] - 48);
// 	}
	*mfc = value;
 5b4:	fb 01       	movw	r30, r22
 5b6:	31 83       	std	Z+1, r19	; 0x01
 5b8:	20 83       	st	Z, r18
 5ba:	08 95       	ret

000005bc <__subsf3>:
 5bc:	50 58       	subi	r21, 0x80	; 128

000005be <__addsf3>:
 5be:	bb 27       	eor	r27, r27
 5c0:	aa 27       	eor	r26, r26
 5c2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__addsf3x>
 5c6:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_round>
 5ca:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscA>
 5ce:	38 f0       	brcs	.+14     	; 0x5de <__addsf3+0x20>
 5d0:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscB>
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__addsf3+0x20>
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <__addsf3+0x28>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	19 f4       	brne	.+6      	; 0x5e2 <__addsf3+0x24>
 5dc:	26 f4       	brtc	.+8      	; 0x5e6 <__addsf3+0x28>
 5de:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_nan>
 5e2:	0e f4       	brtc	.+2      	; 0x5e6 <__addsf3+0x28>
 5e4:	e0 95       	com	r30
 5e6:	e7 fb       	bst	r30, 7
 5e8:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_inf>

000005ec <__addsf3x>:
 5ec:	e9 2f       	mov	r30, r25
 5ee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_split3>
 5f2:	58 f3       	brcs	.-42     	; 0x5ca <__addsf3+0xc>
 5f4:	ba 17       	cp	r27, r26
 5f6:	62 07       	cpc	r22, r18
 5f8:	73 07       	cpc	r23, r19
 5fa:	84 07       	cpc	r24, r20
 5fc:	95 07       	cpc	r25, r21
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__addsf3x+0x1c>
 600:	79 f4       	brne	.+30     	; 0x620 <__addsf3x+0x34>
 602:	a6 f5       	brtc	.+104    	; 0x66c <__addsf3x+0x80>
 604:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_zero>
 608:	0e f4       	brtc	.+2      	; 0x60c <__addsf3x+0x20>
 60a:	e0 95       	com	r30
 60c:	0b 2e       	mov	r0, r27
 60e:	ba 2f       	mov	r27, r26
 610:	a0 2d       	mov	r26, r0
 612:	0b 01       	movw	r0, r22
 614:	b9 01       	movw	r22, r18
 616:	90 01       	movw	r18, r0
 618:	0c 01       	movw	r0, r24
 61a:	ca 01       	movw	r24, r20
 61c:	a0 01       	movw	r20, r0
 61e:	11 24       	eor	r1, r1
 620:	ff 27       	eor	r31, r31
 622:	59 1b       	sub	r21, r25
 624:	99 f0       	breq	.+38     	; 0x64c <__addsf3x+0x60>
 626:	59 3f       	cpi	r21, 0xF9	; 249
 628:	50 f4       	brcc	.+20     	; 0x63e <__addsf3x+0x52>
 62a:	50 3e       	cpi	r21, 0xE0	; 224
 62c:	68 f1       	brcs	.+90     	; 0x688 <__addsf3x+0x9c>
 62e:	1a 16       	cp	r1, r26
 630:	f0 40       	sbci	r31, 0x00	; 0
 632:	a2 2f       	mov	r26, r18
 634:	23 2f       	mov	r18, r19
 636:	34 2f       	mov	r19, r20
 638:	44 27       	eor	r20, r20
 63a:	58 5f       	subi	r21, 0xF8	; 248
 63c:	f3 cf       	rjmp	.-26     	; 0x624 <__addsf3x+0x38>
 63e:	46 95       	lsr	r20
 640:	37 95       	ror	r19
 642:	27 95       	ror	r18
 644:	a7 95       	ror	r26
 646:	f0 40       	sbci	r31, 0x00	; 0
 648:	53 95       	inc	r21
 64a:	c9 f7       	brne	.-14     	; 0x63e <__addsf3x+0x52>
 64c:	7e f4       	brtc	.+30     	; 0x66c <__addsf3x+0x80>
 64e:	1f 16       	cp	r1, r31
 650:	ba 0b       	sbc	r27, r26
 652:	62 0b       	sbc	r22, r18
 654:	73 0b       	sbc	r23, r19
 656:	84 0b       	sbc	r24, r20
 658:	ba f0       	brmi	.+46     	; 0x688 <__addsf3x+0x9c>
 65a:	91 50       	subi	r25, 0x01	; 1
 65c:	a1 f0       	breq	.+40     	; 0x686 <__addsf3x+0x9a>
 65e:	ff 0f       	add	r31, r31
 660:	bb 1f       	adc	r27, r27
 662:	66 1f       	adc	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	c2 f7       	brpl	.-16     	; 0x65a <__addsf3x+0x6e>
 66a:	0e c0       	rjmp	.+28     	; 0x688 <__addsf3x+0x9c>
 66c:	ba 0f       	add	r27, r26
 66e:	62 1f       	adc	r22, r18
 670:	73 1f       	adc	r23, r19
 672:	84 1f       	adc	r24, r20
 674:	48 f4       	brcc	.+18     	; 0x688 <__addsf3x+0x9c>
 676:	87 95       	ror	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b7 95       	ror	r27
 67e:	f7 95       	ror	r31
 680:	9e 3f       	cpi	r25, 0xFE	; 254
 682:	08 f0       	brcs	.+2      	; 0x686 <__addsf3x+0x9a>
 684:	b0 cf       	rjmp	.-160    	; 0x5e6 <__addsf3+0x28>
 686:	93 95       	inc	r25
 688:	88 0f       	add	r24, r24
 68a:	08 f0       	brcs	.+2      	; 0x68e <__addsf3x+0xa2>
 68c:	99 27       	eor	r25, r25
 68e:	ee 0f       	add	r30, r30
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	08 95       	ret

00000696 <__divsf3>:
 696:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3x>
 69a:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_round>
 69e:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscB>
 6a2:	58 f0       	brcs	.+22     	; 0x6ba <__divsf3+0x24>
 6a4:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscA>
 6a8:	40 f0       	brcs	.+16     	; 0x6ba <__divsf3+0x24>
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <__divsf3+0x20>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	29 f0       	breq	.+10     	; 0x6ba <__divsf3+0x24>
 6b0:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_inf>
 6b4:	51 11       	cpse	r21, r1
 6b6:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_szero>
 6ba:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_nan>

000006be <__divsf3x>:
 6be:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_split3>
 6c2:	68 f3       	brcs	.-38     	; 0x69e <__divsf3+0x8>

000006c4 <__divsf3_pse>:
 6c4:	99 23       	and	r25, r25
 6c6:	b1 f3       	breq	.-20     	; 0x6b4 <__divsf3+0x1e>
 6c8:	55 23       	and	r21, r21
 6ca:	91 f3       	breq	.-28     	; 0x6b0 <__divsf3+0x1a>
 6cc:	95 1b       	sub	r25, r21
 6ce:	55 0b       	sbc	r21, r21
 6d0:	bb 27       	eor	r27, r27
 6d2:	aa 27       	eor	r26, r26
 6d4:	62 17       	cp	r22, r18
 6d6:	73 07       	cpc	r23, r19
 6d8:	84 07       	cpc	r24, r20
 6da:	38 f0       	brcs	.+14     	; 0x6ea <__divsf3_pse+0x26>
 6dc:	9f 5f       	subi	r25, 0xFF	; 255
 6de:	5f 4f       	sbci	r21, 0xFF	; 255
 6e0:	22 0f       	add	r18, r18
 6e2:	33 1f       	adc	r19, r19
 6e4:	44 1f       	adc	r20, r20
 6e6:	aa 1f       	adc	r26, r26
 6e8:	a9 f3       	breq	.-22     	; 0x6d4 <__divsf3_pse+0x10>
 6ea:	35 d0       	rcall	.+106    	; 0x756 <__divsf3_pse+0x92>
 6ec:	0e 2e       	mov	r0, r30
 6ee:	3a f0       	brmi	.+14     	; 0x6fe <__divsf3_pse+0x3a>
 6f0:	e0 e8       	ldi	r30, 0x80	; 128
 6f2:	32 d0       	rcall	.+100    	; 0x758 <__divsf3_pse+0x94>
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	50 40       	sbci	r21, 0x00	; 0
 6f8:	e6 95       	lsr	r30
 6fa:	00 1c       	adc	r0, r0
 6fc:	ca f7       	brpl	.-14     	; 0x6f0 <__divsf3_pse+0x2c>
 6fe:	2b d0       	rcall	.+86     	; 0x756 <__divsf3_pse+0x92>
 700:	fe 2f       	mov	r31, r30
 702:	29 d0       	rcall	.+82     	; 0x756 <__divsf3_pse+0x92>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	bb 1f       	adc	r27, r27
 70c:	26 17       	cp	r18, r22
 70e:	37 07       	cpc	r19, r23
 710:	48 07       	cpc	r20, r24
 712:	ab 07       	cpc	r26, r27
 714:	b0 e8       	ldi	r27, 0x80	; 128
 716:	09 f0       	breq	.+2      	; 0x71a <__divsf3_pse+0x56>
 718:	bb 0b       	sbc	r27, r27
 71a:	80 2d       	mov	r24, r0
 71c:	bf 01       	movw	r22, r30
 71e:	ff 27       	eor	r31, r31
 720:	93 58       	subi	r25, 0x83	; 131
 722:	5f 4f       	sbci	r21, 0xFF	; 255
 724:	3a f0       	brmi	.+14     	; 0x734 <__divsf3_pse+0x70>
 726:	9e 3f       	cpi	r25, 0xFE	; 254
 728:	51 05       	cpc	r21, r1
 72a:	78 f0       	brcs	.+30     	; 0x74a <__divsf3_pse+0x86>
 72c:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_inf>
 730:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_szero>
 734:	5f 3f       	cpi	r21, 0xFF	; 255
 736:	e4 f3       	brlt	.-8      	; 0x730 <__divsf3_pse+0x6c>
 738:	98 3e       	cpi	r25, 0xE8	; 232
 73a:	d4 f3       	brlt	.-12     	; 0x730 <__divsf3_pse+0x6c>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b7 95       	ror	r27
 744:	f7 95       	ror	r31
 746:	9f 5f       	subi	r25, 0xFF	; 255
 748:	c9 f7       	brne	.-14     	; 0x73c <__divsf3_pse+0x78>
 74a:	88 0f       	add	r24, r24
 74c:	91 1d       	adc	r25, r1
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret
 756:	e1 e0       	ldi	r30, 0x01	; 1
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	bb 1f       	adc	r27, r27
 760:	62 17       	cp	r22, r18
 762:	73 07       	cpc	r23, r19
 764:	84 07       	cpc	r24, r20
 766:	ba 07       	cpc	r27, r26
 768:	20 f0       	brcs	.+8      	; 0x772 <__divsf3_pse+0xae>
 76a:	62 1b       	sub	r22, r18
 76c:	73 0b       	sbc	r23, r19
 76e:	84 0b       	sbc	r24, r20
 770:	ba 0b       	sbc	r27, r26
 772:	ee 1f       	adc	r30, r30
 774:	88 f7       	brcc	.-30     	; 0x758 <__divsf3_pse+0x94>
 776:	e0 95       	com	r30
 778:	08 95       	ret

0000077a <__fixunssfsi>:
 77a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_splitA>
 77e:	88 f0       	brcs	.+34     	; 0x7a2 <__fixunssfsi+0x28>
 780:	9f 57       	subi	r25, 0x7F	; 127
 782:	98 f0       	brcs	.+38     	; 0x7aa <__fixunssfsi+0x30>
 784:	b9 2f       	mov	r27, r25
 786:	99 27       	eor	r25, r25
 788:	b7 51       	subi	r27, 0x17	; 23
 78a:	b0 f0       	brcs	.+44     	; 0x7b8 <__fixunssfsi+0x3e>
 78c:	e1 f0       	breq	.+56     	; 0x7c6 <__fixunssfsi+0x4c>
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	1a f0       	brmi	.+6      	; 0x79e <__fixunssfsi+0x24>
 798:	ba 95       	dec	r27
 79a:	c9 f7       	brne	.-14     	; 0x78e <__fixunssfsi+0x14>
 79c:	14 c0       	rjmp	.+40     	; 0x7c6 <__fixunssfsi+0x4c>
 79e:	b1 30       	cpi	r27, 0x01	; 1
 7a0:	91 f0       	breq	.+36     	; 0x7c6 <__fixunssfsi+0x4c>
 7a2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_zero>
 7a6:	b1 e0       	ldi	r27, 0x01	; 1
 7a8:	08 95       	ret
 7aa:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_zero>
 7ae:	67 2f       	mov	r22, r23
 7b0:	78 2f       	mov	r23, r24
 7b2:	88 27       	eor	r24, r24
 7b4:	b8 5f       	subi	r27, 0xF8	; 248
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <__fixunssfsi+0x4c>
 7b8:	b9 3f       	cpi	r27, 0xF9	; 249
 7ba:	cc f3       	brlt	.-14     	; 0x7ae <__fixunssfsi+0x34>
 7bc:	86 95       	lsr	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b3 95       	inc	r27
 7c4:	d9 f7       	brne	.-10     	; 0x7bc <__fixunssfsi+0x42>
 7c6:	3e f4       	brtc	.+14     	; 0x7d6 <__fixunssfsi+0x5c>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__floatunsisf>:
 7d8:	e8 94       	clt
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <__floatsisf+0x12>

000007dc <__floatsisf>:
 7dc:	97 fb       	bst	r25, 7
 7de:	3e f4       	brtc	.+14     	; 0x7ee <__floatsisf+0x12>
 7e0:	90 95       	com	r25
 7e2:	80 95       	com	r24
 7e4:	70 95       	com	r23
 7e6:	61 95       	neg	r22
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	99 23       	and	r25, r25
 7f0:	a9 f0       	breq	.+42     	; 0x81c <__floatsisf+0x40>
 7f2:	f9 2f       	mov	r31, r25
 7f4:	96 e9       	ldi	r25, 0x96	; 150
 7f6:	bb 27       	eor	r27, r27
 7f8:	93 95       	inc	r25
 7fa:	f6 95       	lsr	r31
 7fc:	87 95       	ror	r24
 7fe:	77 95       	ror	r23
 800:	67 95       	ror	r22
 802:	b7 95       	ror	r27
 804:	f1 11       	cpse	r31, r1
 806:	f8 cf       	rjmp	.-16     	; 0x7f8 <__floatsisf+0x1c>
 808:	fa f4       	brpl	.+62     	; 0x848 <__floatsisf+0x6c>
 80a:	bb 0f       	add	r27, r27
 80c:	11 f4       	brne	.+4      	; 0x812 <__floatsisf+0x36>
 80e:	60 ff       	sbrs	r22, 0
 810:	1b c0       	rjmp	.+54     	; 0x848 <__floatsisf+0x6c>
 812:	6f 5f       	subi	r22, 0xFF	; 255
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	16 c0       	rjmp	.+44     	; 0x848 <__floatsisf+0x6c>
 81c:	88 23       	and	r24, r24
 81e:	11 f0       	breq	.+4      	; 0x824 <__floatsisf+0x48>
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	11 c0       	rjmp	.+34     	; 0x846 <__floatsisf+0x6a>
 824:	77 23       	and	r23, r23
 826:	21 f0       	breq	.+8      	; 0x830 <__floatsisf+0x54>
 828:	9e e8       	ldi	r25, 0x8E	; 142
 82a:	87 2f       	mov	r24, r23
 82c:	76 2f       	mov	r23, r22
 82e:	05 c0       	rjmp	.+10     	; 0x83a <__floatsisf+0x5e>
 830:	66 23       	and	r22, r22
 832:	71 f0       	breq	.+28     	; 0x850 <__floatsisf+0x74>
 834:	96 e8       	ldi	r25, 0x86	; 134
 836:	86 2f       	mov	r24, r22
 838:	70 e0       	ldi	r23, 0x00	; 0
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	2a f0       	brmi	.+10     	; 0x848 <__floatsisf+0x6c>
 83e:	9a 95       	dec	r25
 840:	66 0f       	add	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	da f7       	brpl	.-10     	; 0x83e <__floatsisf+0x62>
 848:	88 0f       	add	r24, r24
 84a:	96 95       	lsr	r25
 84c:	87 95       	ror	r24
 84e:	97 f9       	bld	r25, 7
 850:	08 95       	ret

00000852 <__fp_inf>:
 852:	97 f9       	bld	r25, 7
 854:	9f 67       	ori	r25, 0x7F	; 127
 856:	80 e8       	ldi	r24, 0x80	; 128
 858:	70 e0       	ldi	r23, 0x00	; 0
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	08 95       	ret

0000085e <__fp_nan>:
 85e:	9f ef       	ldi	r25, 0xFF	; 255
 860:	80 ec       	ldi	r24, 0xC0	; 192
 862:	08 95       	ret

00000864 <__fp_pscA>:
 864:	00 24       	eor	r0, r0
 866:	0a 94       	dec	r0
 868:	16 16       	cp	r1, r22
 86a:	17 06       	cpc	r1, r23
 86c:	18 06       	cpc	r1, r24
 86e:	09 06       	cpc	r0, r25
 870:	08 95       	ret

00000872 <__fp_pscB>:
 872:	00 24       	eor	r0, r0
 874:	0a 94       	dec	r0
 876:	12 16       	cp	r1, r18
 878:	13 06       	cpc	r1, r19
 87a:	14 06       	cpc	r1, r20
 87c:	05 06       	cpc	r0, r21
 87e:	08 95       	ret

00000880 <__fp_round>:
 880:	09 2e       	mov	r0, r25
 882:	03 94       	inc	r0
 884:	00 0c       	add	r0, r0
 886:	11 f4       	brne	.+4      	; 0x88c <__fp_round+0xc>
 888:	88 23       	and	r24, r24
 88a:	52 f0       	brmi	.+20     	; 0x8a0 <__fp_round+0x20>
 88c:	bb 0f       	add	r27, r27
 88e:	40 f4       	brcc	.+16     	; 0x8a0 <__fp_round+0x20>
 890:	bf 2b       	or	r27, r31
 892:	11 f4       	brne	.+4      	; 0x898 <__fp_round+0x18>
 894:	60 ff       	sbrs	r22, 0
 896:	04 c0       	rjmp	.+8      	; 0x8a0 <__fp_round+0x20>
 898:	6f 5f       	subi	r22, 0xFF	; 255
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__fp_split3>:
 8a2:	57 fd       	sbrc	r21, 7
 8a4:	90 58       	subi	r25, 0x80	; 128
 8a6:	44 0f       	add	r20, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <__fp_splitA+0x10>
 8ac:	5f 3f       	cpi	r21, 0xFF	; 255
 8ae:	71 f0       	breq	.+28     	; 0x8cc <__fp_splitA+0x1a>
 8b0:	47 95       	ror	r20

000008b2 <__fp_splitA>:
 8b2:	88 0f       	add	r24, r24
 8b4:	97 fb       	bst	r25, 7
 8b6:	99 1f       	adc	r25, r25
 8b8:	61 f0       	breq	.+24     	; 0x8d2 <__fp_splitA+0x20>
 8ba:	9f 3f       	cpi	r25, 0xFF	; 255
 8bc:	79 f0       	breq	.+30     	; 0x8dc <__fp_splitA+0x2a>
 8be:	87 95       	ror	r24
 8c0:	08 95       	ret
 8c2:	12 16       	cp	r1, r18
 8c4:	13 06       	cpc	r1, r19
 8c6:	14 06       	cpc	r1, r20
 8c8:	55 1f       	adc	r21, r21
 8ca:	f2 cf       	rjmp	.-28     	; 0x8b0 <__fp_split3+0xe>
 8cc:	46 95       	lsr	r20
 8ce:	f1 df       	rcall	.-30     	; 0x8b2 <__fp_splitA>
 8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <__fp_splitA+0x30>
 8d2:	16 16       	cp	r1, r22
 8d4:	17 06       	cpc	r1, r23
 8d6:	18 06       	cpc	r1, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	f1 cf       	rjmp	.-30     	; 0x8be <__fp_splitA+0xc>
 8dc:	86 95       	lsr	r24
 8de:	71 05       	cpc	r23, r1
 8e0:	61 05       	cpc	r22, r1
 8e2:	08 94       	sec
 8e4:	08 95       	ret

000008e6 <__fp_zero>:
 8e6:	e8 94       	clt

000008e8 <__fp_szero>:
 8e8:	bb 27       	eor	r27, r27
 8ea:	66 27       	eor	r22, r22
 8ec:	77 27       	eor	r23, r23
 8ee:	cb 01       	movw	r24, r22
 8f0:	97 f9       	bld	r25, 7
 8f2:	08 95       	ret

000008f4 <__mulsf3>:
 8f4:	0e 94 8d 04 	call	0x91a	; 0x91a <__mulsf3x>
 8f8:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_round>
 8fc:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscA>
 900:	38 f0       	brcs	.+14     	; 0x910 <__stack+0x11>
 902:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscB>
 906:	20 f0       	brcs	.+8      	; 0x910 <__stack+0x11>
 908:	95 23       	and	r25, r21
 90a:	11 f0       	breq	.+4      	; 0x910 <__stack+0x11>
 90c:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_inf>
 910:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_nan>
 914:	11 24       	eor	r1, r1
 916:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_szero>

0000091a <__mulsf3x>:
 91a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_split3>
 91e:	70 f3       	brcs	.-36     	; 0x8fc <__mulsf3+0x8>

00000920 <__mulsf3_pse>:
 920:	95 9f       	mul	r25, r21
 922:	c1 f3       	breq	.-16     	; 0x914 <__stack+0x15>
 924:	95 0f       	add	r25, r21
 926:	50 e0       	ldi	r21, 0x00	; 0
 928:	55 1f       	adc	r21, r21
 92a:	62 9f       	mul	r22, r18
 92c:	f0 01       	movw	r30, r0
 92e:	72 9f       	mul	r23, r18
 930:	bb 27       	eor	r27, r27
 932:	f0 0d       	add	r31, r0
 934:	b1 1d       	adc	r27, r1
 936:	63 9f       	mul	r22, r19
 938:	aa 27       	eor	r26, r26
 93a:	f0 0d       	add	r31, r0
 93c:	b1 1d       	adc	r27, r1
 93e:	aa 1f       	adc	r26, r26
 940:	64 9f       	mul	r22, r20
 942:	66 27       	eor	r22, r22
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	66 1f       	adc	r22, r22
 94a:	82 9f       	mul	r24, r18
 94c:	22 27       	eor	r18, r18
 94e:	b0 0d       	add	r27, r0
 950:	a1 1d       	adc	r26, r1
 952:	62 1f       	adc	r22, r18
 954:	73 9f       	mul	r23, r19
 956:	b0 0d       	add	r27, r0
 958:	a1 1d       	adc	r26, r1
 95a:	62 1f       	adc	r22, r18
 95c:	83 9f       	mul	r24, r19
 95e:	a0 0d       	add	r26, r0
 960:	61 1d       	adc	r22, r1
 962:	22 1f       	adc	r18, r18
 964:	74 9f       	mul	r23, r20
 966:	33 27       	eor	r19, r19
 968:	a0 0d       	add	r26, r0
 96a:	61 1d       	adc	r22, r1
 96c:	23 1f       	adc	r18, r19
 96e:	84 9f       	mul	r24, r20
 970:	60 0d       	add	r22, r0
 972:	21 1d       	adc	r18, r1
 974:	82 2f       	mov	r24, r18
 976:	76 2f       	mov	r23, r22
 978:	6a 2f       	mov	r22, r26
 97a:	11 24       	eor	r1, r1
 97c:	9f 57       	subi	r25, 0x7F	; 127
 97e:	50 40       	sbci	r21, 0x00	; 0
 980:	9a f0       	brmi	.+38     	; 0x9a8 <__mulsf3_pse+0x88>
 982:	f1 f0       	breq	.+60     	; 0x9c0 <__mulsf3_pse+0xa0>
 984:	88 23       	and	r24, r24
 986:	4a f0       	brmi	.+18     	; 0x99a <__mulsf3_pse+0x7a>
 988:	ee 0f       	add	r30, r30
 98a:	ff 1f       	adc	r31, r31
 98c:	bb 1f       	adc	r27, r27
 98e:	66 1f       	adc	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	91 50       	subi	r25, 0x01	; 1
 996:	50 40       	sbci	r21, 0x00	; 0
 998:	a9 f7       	brne	.-22     	; 0x984 <__mulsf3_pse+0x64>
 99a:	9e 3f       	cpi	r25, 0xFE	; 254
 99c:	51 05       	cpc	r21, r1
 99e:	80 f0       	brcs	.+32     	; 0x9c0 <__mulsf3_pse+0xa0>
 9a0:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_inf>
 9a4:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_szero>
 9a8:	5f 3f       	cpi	r21, 0xFF	; 255
 9aa:	e4 f3       	brlt	.-8      	; 0x9a4 <__mulsf3_pse+0x84>
 9ac:	98 3e       	cpi	r25, 0xE8	; 232
 9ae:	d4 f3       	brlt	.-12     	; 0x9a4 <__mulsf3_pse+0x84>
 9b0:	86 95       	lsr	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f7 95       	ror	r31
 9ba:	e7 95       	ror	r30
 9bc:	9f 5f       	subi	r25, 0xFF	; 255
 9be:	c1 f7       	brne	.-16     	; 0x9b0 <__mulsf3_pse+0x90>
 9c0:	fe 2b       	or	r31, r30
 9c2:	88 0f       	add	r24, r24
 9c4:	91 1d       	adc	r25, r1
 9c6:	96 95       	lsr	r25
 9c8:	87 95       	ror	r24
 9ca:	97 f9       	bld	r25, 7
 9cc:	08 95       	ret

000009ce <_exit>:
 9ce:	f8 94       	cli

000009d0 <__stop_program>:
 9d0:	ff cf       	rjmp	.-2      	; 0x9d0 <__stop_program>
