
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ef  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d6  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000410  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ca  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_7>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_8>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_11>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_8>:
		


}

  ISR(TIMER2_COMPB_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31

		TIMSK2 &= ~(1<<OCIE2B);
  a2:	e0 e7       	ldi	r30, 0x70	; 112
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	80 83       	st	Z, r24
		TCNT1 = 0; //clear timer 1 count  to start next half cycle
  ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 		if (stopDriver==0){
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b8:	81 11       	cpse	r24, r1
  ba:	07 c0       	rjmp	.+14     	; 0xca <__vector_8+0x3a>
			 if (isNegativeCycle){		//Set pins for next half cycle
  bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isNegativeCycle>
  c0:	88 23       	and	r24, r24
  c2:	11 f0       	breq	.+4      	; 0xc8 <__vector_8+0x38>
				SET_SW1; //sets pins for positive cycle
  c4:	28 9a       	sbi	0x05, 0	; 5
  c6:	01 c0       	rjmp	.+2      	; 0xca <__vector_8+0x3a>
			} else {
				SET_SW2;//set pins on for positive cycle
  c8:	5d 9a       	sbi	0x0b, 5	; 11
			}
		 
		 }
		
		isNegativeCycle = !isNegativeCycle; //set flag to indicate next half cycle
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <isNegativeCycle>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 27       	eor	r24, r25
  d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <isNegativeCycle>
	  
	
  }
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_7>:

 																		
ISR(TIMER2_COMPA_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31

		 TIMSK2 &= ~(1<<OCIE2A);	// Disable high dead time timer interrupts
  f8:	e0 e7       	ldi	r30, 0x70	; 112
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8d 7f       	andi	r24, 0xFD	; 253
 100:	80 83       	st	Z, r24
		 
		 if (stopDriver==0){
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	81 11       	cpse	r24, r1
 108:	07 c0       	rjmp	.+14     	; 0x118 <__vector_7+0x30>
		 	if (isNegativeCycle){
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isNegativeCycle>
 10e:	88 23       	and	r24, r24
 110:	11 f0       	breq	.+4      	; 0x116 <__vector_7+0x2e>
				SET_SW4; //turn on SW4
 112:	5e 9a       	sbi	0x0b, 6	; 11
 114:	01 c0       	rjmp	.+2      	; 0x118 <__vector_7+0x30>
			} else {
				SET_SW3; //turn on SW3
 116:	5f 9a       	sbi	0x0b, 7	; 11
		 
		 }

	 
	
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_12>:
									



ISR(TIMER1_COMPB_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	
		  if (isNegativeCycle){		//set to correct timer upper value for each half cycle
 138:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isNegativeCycle>
 13c:	88 23       	and	r24, r24
 13e:	11 f0       	breq	.+4      	; 0x144 <__vector_12+0x1c>
 		CLEAR_SW2; //turn off SW2
 140:	5d 98       	cbi	0x0b, 5	; 11
 142:	01 c0       	rjmp	.+2      	; 0x146 <__vector_12+0x1e>
		 //OCR1A = T_ON + T_OFF2; 
 	} else {
 		CLEAR_SW1; //TURN OFF SW1
 144:	28 98       	cbi	0x05, 0	; 5
		 //OCR1A = T_ON + T_OFF1;
 	}

	TCNT2=0; 													//clear counter to start dead time timer
 146:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TIMSK2 |= (1<<OCIE2A);			
 14a:	e0 e7       	ldi	r30, 0x70	; 112
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
	  
 								// Enable dead time timer compare match A interrupts
}	
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_11>:

	
ISR(TIMER1_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
	 
		  if (isNegativeCycle){
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isNegativeCycle>
 174:	88 23       	and	r24, r24
 176:	11 f0       	breq	.+4      	; 0x17c <__vector_11+0x18>
 			CLEAR_SW3; //turns off SW3
 178:	5f 98       	cbi	0x0b, 7	; 11
 17a:	01 c0       	rjmp	.+2      	; 0x17e <__vector_11+0x1a>
 		} else {
 			CLEAR_SW4; //turns off SW4
 17c:	5e 98       	cbi	0x0b, 6	; 11
 		}
 			TCNT2 = 0 ; //reset timer 0
 17e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 			TIMSK2 = (1<<OCIE2B); //enable low deadtime timer interrupts		
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>


}
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <main>:

// float* frequency;
// float* mfc;

int main(void)
{
 194:	ff cf       	rjmp	.-2      	; 0x194 <main>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
