
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000926  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000109  00800150  00800150  00000a0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bfa  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000895  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066a  00000000  00000000  00001fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000548  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_11>
  30:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_14>
  3c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 35       	cpi	r26, 0x59	; 89
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 91 04 	jmp	0x922	; 0x922 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

volatile float* frequency;
volatile int* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	char tmp = UDR0; 
  b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
  bc:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <message_complete>
  c0:	91 11       	cpse	r25, r1
  c2:	47 c0       	rjmp	.+142    	; 0x152 <__vector_18+0xac>
		if(tmp == '{'){
  c4:	8b 37       	cpi	r24, 0x7B	; 123
  c6:	49 f4       	brne	.+18     	; 0xda <__vector_18+0x34>
			net_brackets++;
  c8:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <net_brackets>
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <net_brackets>
			message_start = true;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <__data_end>
  d8:	12 c0       	rjmp	.+36     	; 0xfe <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
  da:	8d 37       	cpi	r24, 0x7D	; 125
  dc:	81 f4       	brne	.+32     	; 0xfe <__vector_18+0x58>
  de:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__data_end>
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	61 f4       	brne	.+24     	; 0xfe <__vector_18+0x58>
			net_brackets--;
  e6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <net_brackets>
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <net_brackets>
			if(net_brackets == 0){
  f0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <net_brackets>
  f4:	91 11       	cpse	r25, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_18+0x58>
				message_complete = true;
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <message_complete>
			}
		}

		if(message_start == true){
  fe:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__data_end>
 102:	91 30       	cpi	r25, 0x01	; 1
 104:	a9 f4       	brne	.+42     	; 0x130 <__vector_18+0x8a>
			received_message[message_index] = tmp;
 106:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <message_index>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e6 5a       	subi	r30, 0xA6	; 166
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 83       	st	Z, r24
			message_index++;
 112:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <message_index>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <message_index>
			if(message_complete == true){
 11c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <message_complete>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <__vector_18+0x8a>
				received_message[message_index] = '\0';
 124:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <message_index>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e6 5a       	subi	r30, 0xA6	; 166
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 130:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <message_index>
 134:	8e 3f       	cpi	r24, 0xFE	; 254
 136:	21 f0       	breq	.+8      	; 0x140 <__vector_18+0x9a>
 138:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <net_brackets>
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	48 f0       	brcs	.+18     	; 0x152 <__vector_18+0xac>
			receive_error = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <receive_error>
			message_start = false;
 146:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
			message_complete = false;
 14a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <message_complete>
			message_index = 0;
 14e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <message_index>
		}
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 164:	83 e3       	ldi	r24, 0x33	; 51
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 30 02 	call	0x460	; 0x460 <uart_initiate>

	//Enable Global interrupts
	sei();
 16c:	78 94       	sei

	//Enable SONG mode
	*frequency = 12;
 16e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <frequency>
 172:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <frequency+0x1>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a0 e4       	ldi	r26, 0x40	; 64
 17c:	b1 e4       	ldi	r27, 0x41	; 65
 17e:	80 83       	st	Z, r24
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	a2 83       	std	Z+2, r26	; 0x02
 184:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 100;
 186:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <mfc>
 18a:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <mfc+0x1>
 18e:	84 e6       	ldi	r24, 0x64	; 100
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 196:	0e 94 21 01 	call	0x242	; 0x242 <driver_timer_initiate>
	set_parameters((float*)frequency, (int*)mfc);
 19a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <mfc>
 19e:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <mfc+0x1>
 1a2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <frequency>
 1a6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <frequency+0x1>
 1aa:	0e 94 38 01 	call	0x270	; 0x270 <set_parameters>
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 1ae:	c1 ec       	ldi	r28, 0xC1	; 193
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
	//enable timers
	driver_timer_initiate();
	set_parameters((float*)frequency, (int*)mfc);
	
    while (1){
		if(message_complete == true){
 1b2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <message_complete>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	59 f5       	brne	.+86     	; 0x210 <main+0xac>
			UCSR0B &= ~(1 << RXEN0);
 1ba:	88 81       	ld	r24, Y
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 45 02 	call	0x48a	; 0x48a <uart_transmit>
			uart_transmit((char*)received_message);
 1c8:	8a e5       	ldi	r24, 0x5A	; 90
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 45 02 	call	0x48a	; 0x48a <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 1d0:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <mfc>
 1d4:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <mfc+0x1>
 1d8:	8a e5       	ldi	r24, 0x5A	; 90
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <process_message>
			set_parameters((float*)frequency, (int*)mfc);
 1e0:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <mfc>
 1e4:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <mfc+0x1>
 1e8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <frequency>
 1ec:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <frequency+0x1>
 1f0:	0e 94 38 01 	call	0x270	; 0x270 <set_parameters>
			uart_transmit("\n\r");
 1f4:	86 e3       	ldi	r24, 0x36	; 54
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 45 02 	call	0x48a	; 0x48a <uart_transmit>
			message_complete = false;
 1fc:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <message_complete>
			message_start = false;
 200:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
			message_index = 0;
 204:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <message_index>
			UCSR0B |= (1 << RXEN0);
 208:	88 81       	ld	r24, Y
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	88 83       	st	Y, r24
 20e:	d1 cf       	rjmp	.-94     	; 0x1b2 <main+0x4e>
		}
		else if(receive_error == true){
 210:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <receive_error>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	69 f6       	brne	.-102    	; 0x1b2 <main+0x4e>
			UCSR0B &= ~(1 << RXEN0);
 218:	88 81       	ld	r24, Y
 21a:	8f 7e       	andi	r24, 0xEF	; 239
 21c:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 45 02 	call	0x48a	; 0x48a <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 226:	89 e1       	ldi	r24, 0x19	; 25
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 45 02 	call	0x48a	; 0x48a <uart_transmit>
			receive_error = false;
 22e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <receive_error>
			message_start = false;
 232:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
			net_brackets = 0;
 236:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <net_brackets>
			UCSR0B |= (1 << RXEN0);
 23a:	88 81       	ld	r24, Y
 23c:	80 61       	ori	r24, 0x10	; 16
 23e:	88 83       	st	Y, r24
 240:	b8 cf       	rjmp	.-144    	; 0x1b2 <main+0x4e>

00000242 <driver_timer_initiate>:
 #define SET_SW4 PORTD |= (1 << PD6)
 #define CLR_SW4 PORTD &= ~(1 << PD6) 

 void driver_timer_initiate(void){
	//Timer 1 8bit (no prescalar)
	TCCR0B |= (1 << CS00);
 242:	85 b5       	in	r24, 0x25	; 37
 244:	81 60       	ori	r24, 0x01	; 1
 246:	85 bd       	out	0x25, r24	; 37
	OCR0A = HIGH_OFF_TIME_COUNT_VALUE;
 248:	80 ed       	ldi	r24, 0xD0	; 208
 24a:	87 bd       	out	0x27, r24	; 39
	OCR0B = LOW_OFF_TIME_COUNT_VALUE;
 24c:	88 e1       	ldi	r24, 0x18	; 24
 24e:	88 bd       	out	0x28, r24	; 40
	
	//Timer 2 16bit (8 prescalar)
	TCCR1B |= (1 << CS11);
 250:	e1 e8       	ldi	r30, 0x81	; 129
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	82 60       	ori	r24, 0x02	; 2
 258:	80 83       	st	Z, r24

	//Set pins to output
	DDRB |= (1 << DDB0);
 25a:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
 25c:	8a b1       	in	r24, 0x0a	; 10
 25e:	80 6e       	ori	r24, 0xE0	; 224
 260:	8a b9       	out	0x0a, r24	; 10

	//Set initial switches
	SET_SW1;
 262:	28 9a       	sbi	0x05, 0	; 5
	SET_SW4;
 264:	5e 9a       	sbi	0x0b, 6	; 11
	CLR_SW2;
 266:	5d 98       	cbi	0x0b, 5	; 11
	CLR_SW3;
 268:	5f 98       	cbi	0x0b, 7	; 11

	isNegative = false;
 26a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <isNegative>
 26e:	08 95       	ret

00000270 <set_parameters>:
 }

 void set_parameters(float* frequency, int* mfc){
 270:	4f 92       	push	r4
 272:	5f 92       	push	r5
 274:	6f 92       	push	r6
 276:	7f 92       	push	r7
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ec 01       	movw	r28, r24
	float duty_cycle = (float)*mfc/255;
 28e:	fb 01       	movw	r30, r22
 290:	60 81       	ld	r22, Z
 292:	71 81       	ldd	r23, Z+1	; 0x01
 294:	07 2e       	mov	r0, r23
 296:	00 0c       	add	r0, r0
 298:	88 0b       	sbc	r24, r24
 29a:	99 0b       	sbc	r25, r25
 29c:	0e 94 98 03 	call	0x730	; 0x730 <__floatsisf>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	4f e7       	ldi	r20, 0x7F	; 127
 2a6:	53 e4       	ldi	r21, 0x43	; 67
 2a8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__divsf3>
 2ac:	2b 01       	movw	r4, r22
 2ae:	3c 01       	movw	r6, r24
	float off_time = ((1000/(2*(*frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(1-duty_cycle);
 2b0:	68 81       	ld	r22, Y
 2b2:	79 81       	ldd	r23, Y+1	; 0x01
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	9b 81       	ldd	r25, Y+3	; 0x03
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	0e 94 89 02 	call	0x512	; 0x512 <__addsf3>
 2c0:	9b 01       	movw	r18, r22
 2c2:	ac 01       	movw	r20, r24
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	8a e7       	ldi	r24, 0x7A	; 122
 2ca:	94 e4       	ldi	r25, 0x44	; 68
 2cc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__divsf3>
 2d0:	4b 01       	movw	r8, r22
 2d2:	5c 01       	movw	r10, r24
	float on_time = ((1000/(2*(*frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(duty_cycle);
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	c3 01       	movw	r24, r6
 2da:	b2 01       	movw	r22, r4
 2dc:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 2e0:	6b 01       	movw	r12, r22
 2e2:	7c 01       	movw	r14, r24

	//Set T1 Compare
	OCR1A = (uint16_t)((on_time+off_time+HIGH_OFF_TIME/1000)*1000);
 2e4:	a3 01       	movw	r20, r6
 2e6:	92 01       	movw	r18, r4
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	9f e3       	ldi	r25, 0x3F	; 63
 2f0:	0e 94 88 02 	call	0x510	; 0x510 <__subsf3>
 2f4:	a5 01       	movw	r20, r10
 2f6:	94 01       	movw	r18, r8
 2f8:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 2fc:	a7 01       	movw	r20, r14
 2fe:	96 01       	movw	r18, r12
 300:	0e 94 89 02 	call	0x512	; 0x512 <__addsf3>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	a9 01       	movw	r20, r18
 30a:	0e 94 89 02 	call	0x512	; 0x512 <__addsf3>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	4a e7       	ldi	r20, 0x7A	; 122
 314:	54 e4       	ldi	r21, 0x44	; 68
 316:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 31a:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fixunssfsi>
 31e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 322:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = (uint16_t)(on_time*1000);
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	4a e7       	ldi	r20, 0x7A	; 122
 32c:	54 e4       	ldi	r21, 0x44	; 68
 32e:	c7 01       	movw	r24, r14
 330:	b6 01       	movw	r22, r12
 332:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 336:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fixunssfsi>
 33a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 33e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	//Initialise timer interrupt
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
 342:	ef e6       	ldi	r30, 0x6F	; 111
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	86 60       	ori	r24, 0x06	; 6
 34a:	80 83       	st	Z, r24
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	bf 90       	pop	r11
 35a:	af 90       	pop	r10
 35c:	9f 90       	pop	r9
 35e:	8f 90       	pop	r8
 360:	7f 90       	pop	r7
 362:	6f 90       	pop	r6
 364:	5f 90       	pop	r5
 366:	4f 90       	pop	r4
 368:	08 95       	ret

0000036a <__vector_14>:

ISR(TIMER0_COMPA_vect){	
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	8f 93       	push	r24
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0A);
 37a:	ee e6       	ldi	r30, 0x6E	; 110
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	8d 7f       	andi	r24, 0xFD	; 253
 382:	80 83       	st	Z, r24
	if(isNegative == false){
 384:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <isNegative>
 388:	81 11       	cpse	r24, r1
 38a:	02 c0       	rjmp	.+4      	; 0x390 <__vector_14+0x26>
		SET_SW3;
 38c:	5f 9a       	sbi	0x0b, 7	; 11
 38e:	01 c0       	rjmp	.+2      	; 0x392 <__vector_14+0x28>
	}
	else{
		SET_SW4;
 390:	5e 9a       	sbi	0x0b, 6	; 11
	}

}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	8f 91       	pop	r24
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	if(isNegative == false){
 3b2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <isNegative>
 3b6:	81 11       	cpse	r24, r1
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <__vector_11+0x1c>
		CLR_SW4;
 3ba:	5e 98       	cbi	0x0b, 6	; 11
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 3be:	5f 98       	cbi	0x0b, 7	; 11
	}
	TCNT0 = 0;
 3c0:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE1B);
 3c2:	ee e6       	ldi	r30, 0x6E	; 110
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	80 83       	st	Z, r24
}
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__vector_15>:

ISR(TIMER0_COMPB_vect){
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	8f 93       	push	r24
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0B);
 3ec:	ee e6       	ldi	r30, 0x6E	; 110
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	8b 7f       	andi	r24, 0xFB	; 251
 3f4:	80 83       	st	Z, r24
	if(isNegative == false){
 3f6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <isNegative>
 3fa:	81 11       	cpse	r24, r1
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		SET_SW2;
 3fe:	5d 9a       	sbi	0x0b, 5	; 11
		isNegative = true;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <isNegative>
 406:	03 c0       	rjmp	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	else{
		SET_SW1;
 408:	28 9a       	sbi	0x05, 0	; 5
		isNegative = false;
 40a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <isNegative>
	}
	TCNT1 = 0;
 40e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 412:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	8f 91       	pop	r24
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	8f 93       	push	r24
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	if(isNegative == false){
 436:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <isNegative>
 43a:	81 11       	cpse	r24, r1
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__vector_12+0x1c>
		CLR_SW1;
 43e:	28 98       	cbi	0x05, 0	; 5
 440:	01 c0       	rjmp	.+2      	; 0x444 <__vector_12+0x1e>
	}
	else{
		CLR_SW2;
 442:	5d 98       	cbi	0x0b, 5	; 11
	}
	TCNT0 = 0;
 444:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);
 446:	ee e6       	ldi	r30, 0x6E	; 110
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 83       	st	Z, r24
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	8f 91       	pop	r24
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 460:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 464:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 468:	e1 ec       	ldi	r30, 0xC1	; 193
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	88 60       	ori	r24, 0x08	; 8
 470:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 472:	80 81       	ld	r24, Z
 474:	80 61       	ori	r24, 0x10	; 16
 476:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 478:	80 81       	ld	r24, Z
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 47e:	e2 ec       	ldi	r30, 0xC2	; 194
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	86 60       	ori	r24, 0x06	; 6
 486:	80 83       	st	Z, r24
 488:	08 95       	ret

0000048a <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 48e:	fc 01       	movw	r30, r24
 490:	20 81       	ld	r18, Z
 492:	22 23       	and	r18, r18
 494:	69 f0       	breq	.+26     	; 0x4b0 <uart_transmit+0x26>
 496:	dc 01       	movw	r26, r24
 498:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 49a:	e0 ec       	ldi	r30, 0xC0	; 192
 49c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 49e:	c6 ec       	ldi	r28, 0xC6	; 198
 4a0:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 4a2:	90 81       	ld	r25, Z
 4a4:	95 ff       	sbrs	r25, 5
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <uart_transmit+0x18>
		UDR0 = message[i];
 4a8:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 4aa:	2d 91       	ld	r18, X+
 4ac:	21 11       	cpse	r18, r1
 4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	8b 01       	movw	r16, r22
 4c0:	fc 01       	movw	r30, r24
 4c2:	31 96       	adiw	r30, 0x01	; 1
 4c4:	04 96       	adiw	r24, 0x04	; 4
	int value = 0;
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 4ca:	9e 01       	movw	r18, r28
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	cc 0f       	add	r28, r28
 4d2:	dd 1f       	adc	r29, r29
 4d4:	cc 0f       	add	r28, r28
 4d6:	dd 1f       	adc	r29, r29
 4d8:	cc 0f       	add	r28, r28
 4da:	dd 1f       	adc	r29, r29
 4dc:	c2 0f       	add	r28, r18
 4de:	d3 1f       	adc	r29, r19
 4e0:	21 91       	ld	r18, Z+
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	20 53       	subi	r18, 0x30	; 48
 4e6:	31 09       	sbc	r19, r1
 4e8:	c2 0f       	add	r28, r18
 4ea:	d3 1f       	adc	r29, r19
}

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	for(unsigned int i = 1; i < 4; i++){
 4ec:	e8 17       	cp	r30, r24
 4ee:	f9 07       	cpc	r31, r25
 4f0:	61 f7       	brne	.-40     	; 0x4ca <process_message+0x14>
		value = value*10 + (message[i] - 48);
	}	
	if(value == 100){
 4f2:	c4 36       	cpi	r28, 0x64	; 100
 4f4:	d1 05       	cpc	r29, r1
 4f6:	21 f4       	brne	.+8      	; 0x500 <process_message+0x4a>
		uart_transmit("conversion is correct");
 4f8:	89 e3       	ldi	r24, 0x39	; 57
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 45 02 	call	0x48a	; 0x48a <uart_transmit>
	}
	*mfc = value;
 500:	f8 01       	movw	r30, r16
 502:	d1 83       	std	Z+1, r29	; 0x01
 504:	c0 83       	st	Z, r28
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	08 95       	ret

00000510 <__subsf3>:
 510:	50 58       	subi	r21, 0x80	; 128

00000512 <__addsf3>:
 512:	bb 27       	eor	r27, r27
 514:	aa 27       	eor	r26, r26
 516:	0e 94 a0 02 	call	0x540	; 0x540 <__addsf3x>
 51a:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_round>
 51e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscA>
 522:	38 f0       	brcs	.+14     	; 0x532 <__addsf3+0x20>
 524:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_pscB>
 528:	20 f0       	brcs	.+8      	; 0x532 <__addsf3+0x20>
 52a:	39 f4       	brne	.+14     	; 0x53a <__addsf3+0x28>
 52c:	9f 3f       	cpi	r25, 0xFF	; 255
 52e:	19 f4       	brne	.+6      	; 0x536 <__addsf3+0x24>
 530:	26 f4       	brtc	.+8      	; 0x53a <__addsf3+0x28>
 532:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_nan>
 536:	0e f4       	brtc	.+2      	; 0x53a <__addsf3+0x28>
 538:	e0 95       	com	r30
 53a:	e7 fb       	bst	r30, 7
 53c:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>

00000540 <__addsf3x>:
 540:	e9 2f       	mov	r30, r25
 542:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_split3>
 546:	58 f3       	brcs	.-42     	; 0x51e <__addsf3+0xc>
 548:	ba 17       	cp	r27, r26
 54a:	62 07       	cpc	r22, r18
 54c:	73 07       	cpc	r23, r19
 54e:	84 07       	cpc	r24, r20
 550:	95 07       	cpc	r25, r21
 552:	20 f0       	brcs	.+8      	; 0x55c <__addsf3x+0x1c>
 554:	79 f4       	brne	.+30     	; 0x574 <__addsf3x+0x34>
 556:	a6 f5       	brtc	.+104    	; 0x5c0 <__addsf3x+0x80>
 558:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_zero>
 55c:	0e f4       	brtc	.+2      	; 0x560 <__addsf3x+0x20>
 55e:	e0 95       	com	r30
 560:	0b 2e       	mov	r0, r27
 562:	ba 2f       	mov	r27, r26
 564:	a0 2d       	mov	r26, r0
 566:	0b 01       	movw	r0, r22
 568:	b9 01       	movw	r22, r18
 56a:	90 01       	movw	r18, r0
 56c:	0c 01       	movw	r0, r24
 56e:	ca 01       	movw	r24, r20
 570:	a0 01       	movw	r20, r0
 572:	11 24       	eor	r1, r1
 574:	ff 27       	eor	r31, r31
 576:	59 1b       	sub	r21, r25
 578:	99 f0       	breq	.+38     	; 0x5a0 <__addsf3x+0x60>
 57a:	59 3f       	cpi	r21, 0xF9	; 249
 57c:	50 f4       	brcc	.+20     	; 0x592 <__addsf3x+0x52>
 57e:	50 3e       	cpi	r21, 0xE0	; 224
 580:	68 f1       	brcs	.+90     	; 0x5dc <__addsf3x+0x9c>
 582:	1a 16       	cp	r1, r26
 584:	f0 40       	sbci	r31, 0x00	; 0
 586:	a2 2f       	mov	r26, r18
 588:	23 2f       	mov	r18, r19
 58a:	34 2f       	mov	r19, r20
 58c:	44 27       	eor	r20, r20
 58e:	58 5f       	subi	r21, 0xF8	; 248
 590:	f3 cf       	rjmp	.-26     	; 0x578 <__addsf3x+0x38>
 592:	46 95       	lsr	r20
 594:	37 95       	ror	r19
 596:	27 95       	ror	r18
 598:	a7 95       	ror	r26
 59a:	f0 40       	sbci	r31, 0x00	; 0
 59c:	53 95       	inc	r21
 59e:	c9 f7       	brne	.-14     	; 0x592 <__addsf3x+0x52>
 5a0:	7e f4       	brtc	.+30     	; 0x5c0 <__addsf3x+0x80>
 5a2:	1f 16       	cp	r1, r31
 5a4:	ba 0b       	sbc	r27, r26
 5a6:	62 0b       	sbc	r22, r18
 5a8:	73 0b       	sbc	r23, r19
 5aa:	84 0b       	sbc	r24, r20
 5ac:	ba f0       	brmi	.+46     	; 0x5dc <__addsf3x+0x9c>
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	a1 f0       	breq	.+40     	; 0x5da <__addsf3x+0x9a>
 5b2:	ff 0f       	add	r31, r31
 5b4:	bb 1f       	adc	r27, r27
 5b6:	66 1f       	adc	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	c2 f7       	brpl	.-16     	; 0x5ae <__addsf3x+0x6e>
 5be:	0e c0       	rjmp	.+28     	; 0x5dc <__addsf3x+0x9c>
 5c0:	ba 0f       	add	r27, r26
 5c2:	62 1f       	adc	r22, r18
 5c4:	73 1f       	adc	r23, r19
 5c6:	84 1f       	adc	r24, r20
 5c8:	48 f4       	brcc	.+18     	; 0x5dc <__addsf3x+0x9c>
 5ca:	87 95       	ror	r24
 5cc:	77 95       	ror	r23
 5ce:	67 95       	ror	r22
 5d0:	b7 95       	ror	r27
 5d2:	f7 95       	ror	r31
 5d4:	9e 3f       	cpi	r25, 0xFE	; 254
 5d6:	08 f0       	brcs	.+2      	; 0x5da <__addsf3x+0x9a>
 5d8:	b0 cf       	rjmp	.-160    	; 0x53a <__addsf3+0x28>
 5da:	93 95       	inc	r25
 5dc:	88 0f       	add	r24, r24
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <__addsf3x+0xa2>
 5e0:	99 27       	eor	r25, r25
 5e2:	ee 0f       	add	r30, r30
 5e4:	97 95       	ror	r25
 5e6:	87 95       	ror	r24
 5e8:	08 95       	ret

000005ea <__divsf3>:
 5ea:	0e 94 09 03 	call	0x612	; 0x612 <__divsf3x>
 5ee:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_round>
 5f2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_pscB>
 5f6:	58 f0       	brcs	.+22     	; 0x60e <__divsf3+0x24>
 5f8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscA>
 5fc:	40 f0       	brcs	.+16     	; 0x60e <__divsf3+0x24>
 5fe:	29 f4       	brne	.+10     	; 0x60a <__divsf3+0x20>
 600:	5f 3f       	cpi	r21, 0xFF	; 255
 602:	29 f0       	breq	.+10     	; 0x60e <__divsf3+0x24>
 604:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 608:	51 11       	cpse	r21, r1
 60a:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>
 60e:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_nan>

00000612 <__divsf3x>:
 612:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_split3>
 616:	68 f3       	brcs	.-38     	; 0x5f2 <__divsf3+0x8>

00000618 <__divsf3_pse>:
 618:	99 23       	and	r25, r25
 61a:	b1 f3       	breq	.-20     	; 0x608 <__divsf3+0x1e>
 61c:	55 23       	and	r21, r21
 61e:	91 f3       	breq	.-28     	; 0x604 <__divsf3+0x1a>
 620:	95 1b       	sub	r25, r21
 622:	55 0b       	sbc	r21, r21
 624:	bb 27       	eor	r27, r27
 626:	aa 27       	eor	r26, r26
 628:	62 17       	cp	r22, r18
 62a:	73 07       	cpc	r23, r19
 62c:	84 07       	cpc	r24, r20
 62e:	38 f0       	brcs	.+14     	; 0x63e <__divsf3_pse+0x26>
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	5f 4f       	sbci	r21, 0xFF	; 255
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	44 1f       	adc	r20, r20
 63a:	aa 1f       	adc	r26, r26
 63c:	a9 f3       	breq	.-22     	; 0x628 <__divsf3_pse+0x10>
 63e:	35 d0       	rcall	.+106    	; 0x6aa <__divsf3_pse+0x92>
 640:	0e 2e       	mov	r0, r30
 642:	3a f0       	brmi	.+14     	; 0x652 <__divsf3_pse+0x3a>
 644:	e0 e8       	ldi	r30, 0x80	; 128
 646:	32 d0       	rcall	.+100    	; 0x6ac <__divsf3_pse+0x94>
 648:	91 50       	subi	r25, 0x01	; 1
 64a:	50 40       	sbci	r21, 0x00	; 0
 64c:	e6 95       	lsr	r30
 64e:	00 1c       	adc	r0, r0
 650:	ca f7       	brpl	.-14     	; 0x644 <__divsf3_pse+0x2c>
 652:	2b d0       	rcall	.+86     	; 0x6aa <__divsf3_pse+0x92>
 654:	fe 2f       	mov	r31, r30
 656:	29 d0       	rcall	.+82     	; 0x6aa <__divsf3_pse+0x92>
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	bb 1f       	adc	r27, r27
 660:	26 17       	cp	r18, r22
 662:	37 07       	cpc	r19, r23
 664:	48 07       	cpc	r20, r24
 666:	ab 07       	cpc	r26, r27
 668:	b0 e8       	ldi	r27, 0x80	; 128
 66a:	09 f0       	breq	.+2      	; 0x66e <__divsf3_pse+0x56>
 66c:	bb 0b       	sbc	r27, r27
 66e:	80 2d       	mov	r24, r0
 670:	bf 01       	movw	r22, r30
 672:	ff 27       	eor	r31, r31
 674:	93 58       	subi	r25, 0x83	; 131
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	3a f0       	brmi	.+14     	; 0x688 <__divsf3_pse+0x70>
 67a:	9e 3f       	cpi	r25, 0xFE	; 254
 67c:	51 05       	cpc	r21, r1
 67e:	78 f0       	brcs	.+30     	; 0x69e <__divsf3_pse+0x86>
 680:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 684:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>
 688:	5f 3f       	cpi	r21, 0xFF	; 255
 68a:	e4 f3       	brlt	.-8      	; 0x684 <__divsf3_pse+0x6c>
 68c:	98 3e       	cpi	r25, 0xE8	; 232
 68e:	d4 f3       	brlt	.-12     	; 0x684 <__divsf3_pse+0x6c>
 690:	86 95       	lsr	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f7 95       	ror	r31
 69a:	9f 5f       	subi	r25, 0xFF	; 255
 69c:	c9 f7       	brne	.-14     	; 0x690 <__divsf3_pse+0x78>
 69e:	88 0f       	add	r24, r24
 6a0:	91 1d       	adc	r25, r1
 6a2:	96 95       	lsr	r25
 6a4:	87 95       	ror	r24
 6a6:	97 f9       	bld	r25, 7
 6a8:	08 95       	ret
 6aa:	e1 e0       	ldi	r30, 0x01	; 1
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	bb 1f       	adc	r27, r27
 6b4:	62 17       	cp	r22, r18
 6b6:	73 07       	cpc	r23, r19
 6b8:	84 07       	cpc	r24, r20
 6ba:	ba 07       	cpc	r27, r26
 6bc:	20 f0       	brcs	.+8      	; 0x6c6 <__divsf3_pse+0xae>
 6be:	62 1b       	sub	r22, r18
 6c0:	73 0b       	sbc	r23, r19
 6c2:	84 0b       	sbc	r24, r20
 6c4:	ba 0b       	sbc	r27, r26
 6c6:	ee 1f       	adc	r30, r30
 6c8:	88 f7       	brcc	.-30     	; 0x6ac <__divsf3_pse+0x94>
 6ca:	e0 95       	com	r30
 6cc:	08 95       	ret

000006ce <__fixunssfsi>:
 6ce:	0e 94 03 04 	call	0x806	; 0x806 <__fp_splitA>
 6d2:	88 f0       	brcs	.+34     	; 0x6f6 <__fixunssfsi+0x28>
 6d4:	9f 57       	subi	r25, 0x7F	; 127
 6d6:	98 f0       	brcs	.+38     	; 0x6fe <__fixunssfsi+0x30>
 6d8:	b9 2f       	mov	r27, r25
 6da:	99 27       	eor	r25, r25
 6dc:	b7 51       	subi	r27, 0x17	; 23
 6de:	b0 f0       	brcs	.+44     	; 0x70c <__fixunssfsi+0x3e>
 6e0:	e1 f0       	breq	.+56     	; 0x71a <__fixunssfsi+0x4c>
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	1a f0       	brmi	.+6      	; 0x6f2 <__fixunssfsi+0x24>
 6ec:	ba 95       	dec	r27
 6ee:	c9 f7       	brne	.-14     	; 0x6e2 <__fixunssfsi+0x14>
 6f0:	14 c0       	rjmp	.+40     	; 0x71a <__fixunssfsi+0x4c>
 6f2:	b1 30       	cpi	r27, 0x01	; 1
 6f4:	91 f0       	breq	.+36     	; 0x71a <__fixunssfsi+0x4c>
 6f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_zero>
 6fa:	b1 e0       	ldi	r27, 0x01	; 1
 6fc:	08 95       	ret
 6fe:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_zero>
 702:	67 2f       	mov	r22, r23
 704:	78 2f       	mov	r23, r24
 706:	88 27       	eor	r24, r24
 708:	b8 5f       	subi	r27, 0xF8	; 248
 70a:	39 f0       	breq	.+14     	; 0x71a <__fixunssfsi+0x4c>
 70c:	b9 3f       	cpi	r27, 0xF9	; 249
 70e:	cc f3       	brlt	.-14     	; 0x702 <__fixunssfsi+0x34>
 710:	86 95       	lsr	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b3 95       	inc	r27
 718:	d9 f7       	brne	.-10     	; 0x710 <__fixunssfsi+0x42>
 71a:	3e f4       	brtc	.+14     	; 0x72a <__fixunssfsi+0x5c>
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__floatunsisf>:
 72c:	e8 94       	clt
 72e:	09 c0       	rjmp	.+18     	; 0x742 <__floatsisf+0x12>

00000730 <__floatsisf>:
 730:	97 fb       	bst	r25, 7
 732:	3e f4       	brtc	.+14     	; 0x742 <__floatsisf+0x12>
 734:	90 95       	com	r25
 736:	80 95       	com	r24
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	99 23       	and	r25, r25
 744:	a9 f0       	breq	.+42     	; 0x770 <__floatsisf+0x40>
 746:	f9 2f       	mov	r31, r25
 748:	96 e9       	ldi	r25, 0x96	; 150
 74a:	bb 27       	eor	r27, r27
 74c:	93 95       	inc	r25
 74e:	f6 95       	lsr	r31
 750:	87 95       	ror	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	b7 95       	ror	r27
 758:	f1 11       	cpse	r31, r1
 75a:	f8 cf       	rjmp	.-16     	; 0x74c <__floatsisf+0x1c>
 75c:	fa f4       	brpl	.+62     	; 0x79c <__floatsisf+0x6c>
 75e:	bb 0f       	add	r27, r27
 760:	11 f4       	brne	.+4      	; 0x766 <__floatsisf+0x36>
 762:	60 ff       	sbrs	r22, 0
 764:	1b c0       	rjmp	.+54     	; 0x79c <__floatsisf+0x6c>
 766:	6f 5f       	subi	r22, 0xFF	; 255
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	16 c0       	rjmp	.+44     	; 0x79c <__floatsisf+0x6c>
 770:	88 23       	and	r24, r24
 772:	11 f0       	breq	.+4      	; 0x778 <__floatsisf+0x48>
 774:	96 e9       	ldi	r25, 0x96	; 150
 776:	11 c0       	rjmp	.+34     	; 0x79a <__floatsisf+0x6a>
 778:	77 23       	and	r23, r23
 77a:	21 f0       	breq	.+8      	; 0x784 <__floatsisf+0x54>
 77c:	9e e8       	ldi	r25, 0x8E	; 142
 77e:	87 2f       	mov	r24, r23
 780:	76 2f       	mov	r23, r22
 782:	05 c0       	rjmp	.+10     	; 0x78e <__floatsisf+0x5e>
 784:	66 23       	and	r22, r22
 786:	71 f0       	breq	.+28     	; 0x7a4 <__floatsisf+0x74>
 788:	96 e8       	ldi	r25, 0x86	; 134
 78a:	86 2f       	mov	r24, r22
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	2a f0       	brmi	.+10     	; 0x79c <__floatsisf+0x6c>
 792:	9a 95       	dec	r25
 794:	66 0f       	add	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	da f7       	brpl	.-10     	; 0x792 <__floatsisf+0x62>
 79c:	88 0f       	add	r24, r24
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret

000007a6 <__fp_inf>:
 7a6:	97 f9       	bld	r25, 7
 7a8:	9f 67       	ori	r25, 0x7F	; 127
 7aa:	80 e8       	ldi	r24, 0x80	; 128
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	08 95       	ret

000007b2 <__fp_nan>:
 7b2:	9f ef       	ldi	r25, 0xFF	; 255
 7b4:	80 ec       	ldi	r24, 0xC0	; 192
 7b6:	08 95       	ret

000007b8 <__fp_pscA>:
 7b8:	00 24       	eor	r0, r0
 7ba:	0a 94       	dec	r0
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	18 06       	cpc	r1, r24
 7c2:	09 06       	cpc	r0, r25
 7c4:	08 95       	ret

000007c6 <__fp_pscB>:
 7c6:	00 24       	eor	r0, r0
 7c8:	0a 94       	dec	r0
 7ca:	12 16       	cp	r1, r18
 7cc:	13 06       	cpc	r1, r19
 7ce:	14 06       	cpc	r1, r20
 7d0:	05 06       	cpc	r0, r21
 7d2:	08 95       	ret

000007d4 <__fp_round>:
 7d4:	09 2e       	mov	r0, r25
 7d6:	03 94       	inc	r0
 7d8:	00 0c       	add	r0, r0
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0xc>
 7dc:	88 23       	and	r24, r24
 7de:	52 f0       	brmi	.+20     	; 0x7f4 <__fp_round+0x20>
 7e0:	bb 0f       	add	r27, r27
 7e2:	40 f4       	brcc	.+16     	; 0x7f4 <__fp_round+0x20>
 7e4:	bf 2b       	or	r27, r31
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_round+0x18>
 7e8:	60 ff       	sbrs	r22, 0
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__fp_round+0x20>
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <__fp_split3>:
 7f6:	57 fd       	sbrc	r21, 7
 7f8:	90 58       	subi	r25, 0x80	; 128
 7fa:	44 0f       	add	r20, r20
 7fc:	55 1f       	adc	r21, r21
 7fe:	59 f0       	breq	.+22     	; 0x816 <__fp_splitA+0x10>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	71 f0       	breq	.+28     	; 0x820 <__fp_splitA+0x1a>
 804:	47 95       	ror	r20

00000806 <__fp_splitA>:
 806:	88 0f       	add	r24, r24
 808:	97 fb       	bst	r25, 7
 80a:	99 1f       	adc	r25, r25
 80c:	61 f0       	breq	.+24     	; 0x826 <__fp_splitA+0x20>
 80e:	9f 3f       	cpi	r25, 0xFF	; 255
 810:	79 f0       	breq	.+30     	; 0x830 <__fp_splitA+0x2a>
 812:	87 95       	ror	r24
 814:	08 95       	ret
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	14 06       	cpc	r1, r20
 81c:	55 1f       	adc	r21, r21
 81e:	f2 cf       	rjmp	.-28     	; 0x804 <__fp_split3+0xe>
 820:	46 95       	lsr	r20
 822:	f1 df       	rcall	.-30     	; 0x806 <__fp_splitA>
 824:	08 c0       	rjmp	.+16     	; 0x836 <__fp_splitA+0x30>
 826:	16 16       	cp	r1, r22
 828:	17 06       	cpc	r1, r23
 82a:	18 06       	cpc	r1, r24
 82c:	99 1f       	adc	r25, r25
 82e:	f1 cf       	rjmp	.-30     	; 0x812 <__fp_splitA+0xc>
 830:	86 95       	lsr	r24
 832:	71 05       	cpc	r23, r1
 834:	61 05       	cpc	r22, r1
 836:	08 94       	sec
 838:	08 95       	ret

0000083a <__fp_zero>:
 83a:	e8 94       	clt

0000083c <__fp_szero>:
 83c:	bb 27       	eor	r27, r27
 83e:	66 27       	eor	r22, r22
 840:	77 27       	eor	r23, r23
 842:	cb 01       	movw	r24, r22
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__mulsf3>:
 848:	0e 94 37 04 	call	0x86e	; 0x86e <__mulsf3x>
 84c:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_round>
 850:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscA>
 854:	38 f0       	brcs	.+14     	; 0x864 <__mulsf3+0x1c>
 856:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_pscB>
 85a:	20 f0       	brcs	.+8      	; 0x864 <__mulsf3+0x1c>
 85c:	95 23       	and	r25, r21
 85e:	11 f0       	breq	.+4      	; 0x864 <__mulsf3+0x1c>
 860:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 864:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_nan>
 868:	11 24       	eor	r1, r1
 86a:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>

0000086e <__mulsf3x>:
 86e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_split3>
 872:	70 f3       	brcs	.-36     	; 0x850 <__mulsf3+0x8>

00000874 <__mulsf3_pse>:
 874:	95 9f       	mul	r25, r21
 876:	c1 f3       	breq	.-16     	; 0x868 <__mulsf3+0x20>
 878:	95 0f       	add	r25, r21
 87a:	50 e0       	ldi	r21, 0x00	; 0
 87c:	55 1f       	adc	r21, r21
 87e:	62 9f       	mul	r22, r18
 880:	f0 01       	movw	r30, r0
 882:	72 9f       	mul	r23, r18
 884:	bb 27       	eor	r27, r27
 886:	f0 0d       	add	r31, r0
 888:	b1 1d       	adc	r27, r1
 88a:	63 9f       	mul	r22, r19
 88c:	aa 27       	eor	r26, r26
 88e:	f0 0d       	add	r31, r0
 890:	b1 1d       	adc	r27, r1
 892:	aa 1f       	adc	r26, r26
 894:	64 9f       	mul	r22, r20
 896:	66 27       	eor	r22, r22
 898:	b0 0d       	add	r27, r0
 89a:	a1 1d       	adc	r26, r1
 89c:	66 1f       	adc	r22, r22
 89e:	82 9f       	mul	r24, r18
 8a0:	22 27       	eor	r18, r18
 8a2:	b0 0d       	add	r27, r0
 8a4:	a1 1d       	adc	r26, r1
 8a6:	62 1f       	adc	r22, r18
 8a8:	73 9f       	mul	r23, r19
 8aa:	b0 0d       	add	r27, r0
 8ac:	a1 1d       	adc	r26, r1
 8ae:	62 1f       	adc	r22, r18
 8b0:	83 9f       	mul	r24, r19
 8b2:	a0 0d       	add	r26, r0
 8b4:	61 1d       	adc	r22, r1
 8b6:	22 1f       	adc	r18, r18
 8b8:	74 9f       	mul	r23, r20
 8ba:	33 27       	eor	r19, r19
 8bc:	a0 0d       	add	r26, r0
 8be:	61 1d       	adc	r22, r1
 8c0:	23 1f       	adc	r18, r19
 8c2:	84 9f       	mul	r24, r20
 8c4:	60 0d       	add	r22, r0
 8c6:	21 1d       	adc	r18, r1
 8c8:	82 2f       	mov	r24, r18
 8ca:	76 2f       	mov	r23, r22
 8cc:	6a 2f       	mov	r22, r26
 8ce:	11 24       	eor	r1, r1
 8d0:	9f 57       	subi	r25, 0x7F	; 127
 8d2:	50 40       	sbci	r21, 0x00	; 0
 8d4:	9a f0       	brmi	.+38     	; 0x8fc <__mulsf3_pse+0x88>
 8d6:	f1 f0       	breq	.+60     	; 0x914 <__stack+0x15>
 8d8:	88 23       	and	r24, r24
 8da:	4a f0       	brmi	.+18     	; 0x8ee <__mulsf3_pse+0x7a>
 8dc:	ee 0f       	add	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	bb 1f       	adc	r27, r27
 8e2:	66 1f       	adc	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	91 50       	subi	r25, 0x01	; 1
 8ea:	50 40       	sbci	r21, 0x00	; 0
 8ec:	a9 f7       	brne	.-22     	; 0x8d8 <__mulsf3_pse+0x64>
 8ee:	9e 3f       	cpi	r25, 0xFE	; 254
 8f0:	51 05       	cpc	r21, r1
 8f2:	80 f0       	brcs	.+32     	; 0x914 <__stack+0x15>
 8f4:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 8f8:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>
 8fc:	5f 3f       	cpi	r21, 0xFF	; 255
 8fe:	e4 f3       	brlt	.-8      	; 0x8f8 <__mulsf3_pse+0x84>
 900:	98 3e       	cpi	r25, 0xE8	; 232
 902:	d4 f3       	brlt	.-12     	; 0x8f8 <__mulsf3_pse+0x84>
 904:	86 95       	lsr	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b7 95       	ror	r27
 90c:	f7 95       	ror	r31
 90e:	e7 95       	ror	r30
 910:	9f 5f       	subi	r25, 0xFF	; 255
 912:	c1 f7       	brne	.-16     	; 0x904 <__stack+0x5>
 914:	fe 2b       	or	r31, r30
 916:	88 0f       	add	r24, r24
 918:	91 1d       	adc	r25, r1
 91a:	96 95       	lsr	r25
 91c:	87 95       	ror	r24
 91e:	97 f9       	bld	r25, 7
 920:	08 95       	ret

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
