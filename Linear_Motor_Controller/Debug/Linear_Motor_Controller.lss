
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000009c4  00000a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010f  00800148  00800148  00000aa0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b61  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000962  00000000  00000000  00002721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099e  00000000  00000000  00003083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056f  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f41  00000000  00000000  0000418f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_11>
  30:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_14>
  3c:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 35       	cpi	r26, 0x57	; 87
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	char tmp = UDR0; 
  b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
  bc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <message_complete>
  c0:	91 11       	cpse	r25, r1
  c2:	47 c0       	rjmp	.+142    	; 0x152 <__vector_18+0xac>
		if(tmp == '{'){
  c4:	8b 37       	cpi	r24, 0x7B	; 123
  c6:	49 f4       	brne	.+18     	; 0xda <__vector_18+0x34>
			net_brackets++;
  c8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			message_start = true;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__data_end>
  d8:	12 c0       	rjmp	.+36     	; 0xfe <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
  da:	8d 37       	cpi	r24, 0x7D	; 125
  dc:	81 f4       	brne	.+32     	; 0xfe <__vector_18+0x58>
  de:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	61 f4       	brne	.+24     	; 0xfe <__vector_18+0x58>
			net_brackets--;
  e6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			if(net_brackets == 0){
  f0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
  f4:	91 11       	cpse	r25, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_18+0x58>
				message_complete = true;
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <message_complete>
			}
		}

		if(message_start == true){
  fe:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 102:	91 30       	cpi	r25, 0x01	; 1
 104:	a9 f4       	brne	.+42     	; 0x130 <__vector_18+0x8a>
			received_message[message_index] = tmp;
 106:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e8 5a       	subi	r30, 0xA8	; 168
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 83       	st	Z, r24
			message_index++;
 112:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <message_index>
			if(message_complete == true){
 11c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <__vector_18+0x8a>
				received_message[message_index] = '\0';
 124:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e8 5a       	subi	r30, 0xA8	; 168
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 130:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 134:	8e 3f       	cpi	r24, 0xFE	; 254
 136:	21 f0       	breq	.+8      	; 0x140 <__vector_18+0x9a>
 138:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <net_brackets>
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	48 f0       	brcs	.+18     	; 0x152 <__vector_18+0xac>
			receive_error = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <receive_error>
			message_start = false;
 146:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_complete = false;
 14a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_index = 0;
 14e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
		}
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 164:	83 e3       	ldi	r24, 0x33	; 51
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <uart_initiate>

	//Enable Global interrupts
	sei();
 16c:	78 94       	sei

	*frequency = 12.5;
 16e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <frequency>
 172:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <frequency+0x1>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a8 e4       	ldi	r26, 0x48	; 72
 17c:	b1 e4       	ldi	r27, 0x41	; 65
 17e:	80 83       	st	Z, r24
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	a2 83       	std	Z+2, r26	; 0x02
 184:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 150;
 186:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <mfc>
 18a:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <mfc+0x1>
 18e:	86 e9       	ldi	r24, 0x96	; 150
 190:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 192:	0e 94 29 01 	call	0x252	; 0x252 <driver_timer_initiate>
	set_parameters(*frequency, *mfc);
 196:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <mfc>
 19a:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <mfc+0x1>
 19e:	40 81       	ld	r20, Z
 1a0:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <frequency>
 1a4:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <frequency+0x1>
 1a8:	60 81       	ld	r22, Z
 1aa:	71 81       	ldd	r23, Z+1	; 0x01
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	93 81       	ldd	r25, Z+3	; 0x03
 1b0:	0e 94 43 01 	call	0x286	; 0x286 <set_parameters>
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 1b4:	c1 ec       	ldi	r28, 0xC1	; 193
 1b6:	d0 e0       	ldi	r29, 0x00	; 0

		#ifdef SITH
			project_skywalker();
		#endif
		
		if(message_complete == true){
 1b8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	81 f5       	brne	.+96     	; 0x220 <main+0xbc>
			UCSR0B &= ~(1 << RXEN0);
 1c0:	88 81       	ld	r24, Y
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 91 02 	call	0x522	; 0x522 <uart_transmit>
			uart_transmit((char*)received_message);
 1ce:	88 e5       	ldi	r24, 0x58	; 88
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 91 02 	call	0x522	; 0x522 <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 1d6:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <mfc>
 1da:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <mfc+0x1>
 1de:	88 e5       	ldi	r24, 0x58	; 88
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 a7 02 	call	0x54e	; 0x54e <process_message>
			set_parameters(*frequency, *mfc);
 1e6:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <mfc>
 1ea:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <mfc+0x1>
 1ee:	40 81       	ld	r20, Z
 1f0:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <frequency>
 1f4:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <frequency+0x1>
 1f8:	60 81       	ld	r22, Z
 1fa:	71 81       	ldd	r23, Z+1	; 0x01
 1fc:	82 81       	ldd	r24, Z+2	; 0x02
 1fe:	93 81       	ldd	r25, Z+3	; 0x03
 200:	0e 94 43 01 	call	0x286	; 0x286 <set_parameters>
			uart_transmit("\n\r");
 204:	84 e4       	ldi	r24, 0x44	; 68
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 91 02 	call	0x522	; 0x522 <uart_transmit>
			message_complete = false;
 20c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_start = false;
 210:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_index = 0;
 214:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
			UCSR0B |= (1 << RXEN0);
 218:	88 81       	ld	r24, Y
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	88 83       	st	Y, r24
 21e:	cc cf       	rjmp	.-104    	; 0x1b8 <main+0x54>
		}
		else if(receive_error == true){
 220:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receive_error>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	41 f6       	brne	.-112    	; 0x1b8 <main+0x54>
			UCSR0B &= ~(1 << RXEN0);
 228:	88 81       	ld	r24, Y
 22a:	8f 7e       	andi	r24, 0xEF	; 239
 22c:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 91 02 	call	0x522	; 0x522 <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 236:	89 e1       	ldi	r24, 0x19	; 25
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 91 02 	call	0x522	; 0x522 <uart_transmit>
			receive_error = false;
 23e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <receive_error>
			message_start = false;
 242:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			net_brackets = 0;
 246:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <net_brackets>
			UCSR0B |= (1 << RXEN0);
 24a:	88 81       	ld	r24, Y
 24c:	80 61       	ori	r24, 0x10	; 16
 24e:	88 83       	st	Y, r24
 250:	b3 cf       	rjmp	.-154    	; 0x1b8 <main+0x54>

00000252 <driver_timer_initiate>:
	//Initialise timer interrupt
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
	TCNT1 = 0;
}

void soft_start(float* req_freq, int* req_mfc){
 252:	85 b5       	in	r24, 0x25	; 37
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 bd       	out	0x25, r24	; 37
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	87 bd       	out	0x27, r24	; 39
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	88 bd       	out	0x28, r24	; 40
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
 26a:	20 9a       	sbi	0x04, 0	; 4
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 6e       	ori	r24, 0xE0	; 224
 270:	8a b9       	out	0x0a, r24	; 10
 272:	28 9a       	sbi	0x05, 0	; 5
 274:	5e 9a       	sbi	0x0b, 6	; 11
 276:	5d 98       	cbi	0x0b, 5	; 11
 278:	5f 98       	cbi	0x0b, 7	; 11
 27a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <change_duty>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <first_cycle>
 284:	08 95       	ret

00000286 <set_parameters>:
 286:	4f 92       	push	r4
 288:	5f 92       	push	r5
 28a:	6f 92       	push	r6
 28c:	7f 92       	push	r7
 28e:	8f 92       	push	r8
 290:	9f 92       	push	r9
 292:	af 92       	push	r10
 294:	bf 92       	push	r11
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	6b 01       	movw	r12, r22
 2a0:	7c 01       	movw	r14, r24
 2a2:	64 2f       	mov	r22, r20
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__floatunsisf>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	4f e7       	ldi	r20, 0x7F	; 127
 2b4:	53 e4       	ldi	r21, 0x43	; 67
 2b6:	0e 94 44 03 	call	0x688	; 0x688 <__divsf3>
 2ba:	2b 01       	movw	r4, r22
 2bc:	3c 01       	movw	r6, r24
 2be:	a7 01       	movw	r20, r14
 2c0:	96 01       	movw	r18, r12
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__addsf3>
 2ca:	9b 01       	movw	r18, r22
 2cc:	ac 01       	movw	r20, r24
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	8a e7       	ldi	r24, 0x7A	; 122
 2d4:	94 e4       	ldi	r25, 0x44	; 68
 2d6:	0e 94 44 03 	call	0x688	; 0x688 <__divsf3>
 2da:	4b 01       	movw	r8, r22
 2dc:	5c 01       	movw	r10, r24
 2de:	9b 01       	movw	r18, r22
 2e0:	ac 01       	movw	r20, r24
 2e2:	c3 01       	movw	r24, r6
 2e4:	b2 01       	movw	r22, r4
 2e6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 2ea:	6b 01       	movw	r12, r22
 2ec:	7c 01       	movw	r14, r24
 2ee:	a3 01       	movw	r20, r6
 2f0:	92 01       	movw	r18, r4
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e8       	ldi	r24, 0x80	; 128
 2f8:	9f e3       	ldi	r25, 0x3F	; 63
 2fa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__subsf3>
 2fe:	a5 01       	movw	r20, r10
 300:	94 01       	movw	r18, r8
 302:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 306:	a7 01       	movw	r20, r14
 308:	96 01       	movw	r18, r12
 30a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__addsf3>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	a9 01       	movw	r20, r18
 314:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__addsf3>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	4a e7       	ldi	r20, 0x7A	; 122
 31e:	54 e4       	ldi	r21, 0x44	; 68
 320:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 324:	0e 94 b6 03 	call	0x76c	; 0x76c <__fixunssfsi>
 328:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <t1_compare_a+0x1>
 32c:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <t1_compare_a>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	4a e7       	ldi	r20, 0x7A	; 122
 336:	54 e4       	ldi	r21, 0x44	; 68
 338:	c7 01       	movw	r24, r14
 33a:	b6 01       	movw	r22, r12
 33c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 340:	0e 94 b6 03 	call	0x76c	; 0x76c <__fixunssfsi>
 344:	70 93 52 01 	sts	0x0152, r23	; 0x800152 <t1_compare_b+0x1>
 348:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <t1_compare_b>
 34c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <isNegative>
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <change_duty>
 356:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <first_cycle>
 35a:	88 23       	and	r24, r24
 35c:	91 f0       	breq	.+36     	; 0x382 <set_parameters+0xfc>
 35e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <t1_compare_a>
 362:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <t1_compare_a+0x1>
 366:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 36a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 36e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <t1_compare_b>
 372:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <t1_compare_b+0x1>
 376:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 37a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 37e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <first_cycle>
 382:	ef e6       	ldi	r30, 0x6F	; 111
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	86 60       	ori	r24, 0x06	; 6
 38a:	80 83       	st	Z, r24
 38c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 390:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	7f 90       	pop	r7
 3a6:	6f 90       	pop	r6
 3a8:	5f 90       	pop	r5
 3aa:	4f 90       	pop	r4
 3ac:	08 95       	ret

000003ae <__vector_14>:

}

ISR(TIMER0_COMPA_vect){	
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	8f 93       	push	r24
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0A);
 3be:	ee e6       	ldi	r30, 0x6E	; 110
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	8d 7f       	andi	r24, 0xFD	; 253
 3c6:	80 83       	st	Z, r24
	if(isNegative == false){
 3c8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <isNegative>
 3cc:	81 11       	cpse	r24, r1
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <__vector_14+0x26>
		SET_SW3;
 3d0:	5f 9a       	sbi	0x0b, 7	; 11
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <__vector_14+0x28>
	}
	else{
		SET_SW4;
 3d4:	5e 9a       	sbi	0x0b, 6	; 11
	}
}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	8f 91       	pop	r24
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	8f 93       	push	r24
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
	if(isNegative == false){
 3f6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <isNegative>
 3fa:	81 11       	cpse	r24, r1
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		CLR_SW4;
 3fe:	5e 98       	cbi	0x0b, 6	; 11
 400:	01 c0       	rjmp	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	}
	else{
		CLR_SW3;
 402:	5f 98       	cbi	0x0b, 7	; 11
	}
	TIMSK1 &= ~(1 << OCIE1A);
 404:	ef e6       	ldi	r30, 0x6F	; 111
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	8d 7f       	andi	r24, 0xFD	; 253
 40c:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1B);
 40e:	80 81       	ld	r24, Z
 410:	8b 7f       	andi	r24, 0xFB	; 251
 412:	80 83       	st	Z, r24
	TIMSK0 |= (1 << OCIE0B);
 414:	ee e6       	ldi	r30, 0x6E	; 110
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	80 83       	st	Z, r24
	TCNT0 = 0;
 41e:	16 bc       	out	0x26, r1	; 38

}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	8f 91       	pop	r24
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_15>:

ISR(TIMER0_COMPB_vect){
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0B);
 442:	ee e6       	ldi	r30, 0x6E	; 110
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	8b 7f       	andi	r24, 0xFB	; 251
 44a:	80 83       	st	Z, r24
	if(isNegative == false){
 44c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <isNegative>
 450:	81 11       	cpse	r24, r1
 452:	05 c0       	rjmp	.+10     	; 0x45e <__vector_15+0x2e>
		SET_SW2;
 454:	5d 9a       	sbi	0x0b, 5	; 11
		isNegative = true;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <isNegative>
 45c:	03 c0       	rjmp	.+6      	; 0x464 <__vector_15+0x34>
	}
	else{
		SET_SW1;
 45e:	28 9a       	sbi	0x05, 0	; 5
		isNegative = false;
 460:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <isNegative>
	}

	if(change_duty == true){
 464:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <change_duty>
 468:	88 23       	and	r24, r24
 46a:	79 f0       	breq	.+30     	; 0x48a <__vector_15+0x5a>
		OCR0A = t1_compare_a;
 46c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <t1_compare_a>
 470:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <t1_compare_a+0x1>
 474:	87 bd       	out	0x27, r24	; 39
		OCR1B = t1_compare_b;
 476:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <t1_compare_b>
 47a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <t1_compare_b+0x1>
 47e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 482:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		change_duty = false;
 486:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <change_duty>
		}		
		
	TIMSK1 |= (1 << OCIE1B);
 48a:	ef e6       	ldi	r30, 0x6F	; 111
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	84 60       	ori	r24, 0x04	; 4
 492:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 494:	80 81       	ld	r24, Z
 496:	82 60       	ori	r24, 0x02	; 2
 498:	80 83       	st	Z, r24
	TCNT1 = 0;
 49a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 49e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	8f 93       	push	r24
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	TIMSK1 &= ~(1 << OCIE1B);
 4c4:	ef e6       	ldi	r30, 0x6F	; 111
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	8b 7f       	andi	r24, 0xFB	; 251
 4cc:	80 83       	st	Z, r24
	if(isNegative == false){
 4ce:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <isNegative>
 4d2:	81 11       	cpse	r24, r1
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__vector_12+0x26>
		CLR_SW1;
 4d6:	28 98       	cbi	0x05, 0	; 5
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <__vector_12+0x28>
	}
	else{
		CLR_SW2;
 4da:	5d 98       	cbi	0x0b, 5	; 11
	}
	TIMSK0 |= (1 << OCIE0A);
 4dc:	ee e6       	ldi	r30, 0x6E	; 110
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	82 60       	ori	r24, 0x02	; 2
 4e4:	80 83       	st	Z, r24
	TCNT0 = 0;
 4e6:	16 bc       	out	0x26, r1	; 38
}
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	8f 91       	pop	r24
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 4f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 4fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 500:	e1 ec       	ldi	r30, 0xC1	; 193
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	88 60       	ori	r24, 0x08	; 8
 508:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 50a:	80 81       	ld	r24, Z
 50c:	80 61       	ori	r24, 0x10	; 16
 50e:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 510:	80 81       	ld	r24, Z
 512:	80 68       	ori	r24, 0x80	; 128
 514:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 516:	e2 ec       	ldi	r30, 0xC2	; 194
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	86 60       	ori	r24, 0x06	; 6
 51e:	80 83       	st	Z, r24
 520:	08 95       	ret

00000522 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 526:	fc 01       	movw	r30, r24
 528:	20 81       	ld	r18, Z
 52a:	22 23       	and	r18, r18
 52c:	69 f0       	breq	.+26     	; 0x548 <uart_transmit+0x26>
 52e:	dc 01       	movw	r26, r24
 530:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 532:	e0 ec       	ldi	r30, 0xC0	; 192
 534:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 536:	c6 ec       	ldi	r28, 0xC6	; 198
 538:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 53a:	90 81       	ld	r25, Z
 53c:	95 ff       	sbrs	r25, 5
 53e:	fd cf       	rjmp	.-6      	; 0x53a <uart_transmit+0x18>
		UDR0 = message[i];
 540:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 542:	2d 91       	ld	r18, X+
 544:	21 11       	cpse	r18, r1
 546:	f9 cf       	rjmp	.-14     	; 0x53a <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	8b 01       	movw	r16, r22
 558:	fc 01       	movw	r30, r24
 55a:	31 96       	adiw	r30, 0x01	; 1
 55c:	ac 01       	movw	r20, r24
 55e:	4c 5f       	subi	r20, 0xFC	; 252
 560:	5f 4f       	sbci	r21, 0xFF	; 255
	int value = 0;
 562:	c0 e0       	ldi	r28, 0x00	; 0
 564:	d0 e0       	ldi	r29, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 566:	9e 01       	movw	r18, r28
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	cc 0f       	add	r28, r28
 56e:	dd 1f       	adc	r29, r29
 570:	cc 0f       	add	r28, r28
 572:	dd 1f       	adc	r29, r29
 574:	cc 0f       	add	r28, r28
 576:	dd 1f       	adc	r29, r29
 578:	c2 0f       	add	r28, r18
 57a:	d3 1f       	adc	r29, r19
 57c:	21 91       	ld	r18, Z+
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	20 53       	subi	r18, 0x30	; 48
 582:	31 09       	sbc	r19, r1
 584:	c2 0f       	add	r28, r18
 586:	d3 1f       	adc	r29, r19

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 588:	e4 17       	cp	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	61 f7       	brne	.-40     	; 0x566 <process_message+0x18>

// 	for(unsigned int i = 0; i < 3; i++){
// 		value = value*10 + (tmp[i] - 48);
// 	}

	if(message[1] == 'p'){
 58e:	fc 01       	movw	r30, r24
 590:	81 81       	ldd	r24, Z+1	; 0x01
 592:	80 37       	cpi	r24, 0x70	; 112
 594:	21 f4       	brne	.+8      	; 0x59e <process_message+0x50>
		uart_transmit("\n\rits here!\n\r");
 596:	89 e3       	ldi	r24, 0x39	; 57
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 91 02 	call	0x522	; 0x522 <uart_transmit>
	}
	*mfc = value;
 59e:	f8 01       	movw	r30, r16
 5a0:	d1 83       	std	Z+1, r29	; 0x01
 5a2:	c0 83       	st	Z, r28
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	08 95       	ret

000005ae <__subsf3>:
 5ae:	50 58       	subi	r21, 0x80	; 128

000005b0 <__addsf3>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	aa 27       	eor	r26, r26
 5b4:	0e 94 ef 02 	call	0x5de	; 0x5de <__addsf3x>
 5b8:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 5bc:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__addsf3+0x20>
 5c2:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 5c6:	20 f0       	brcs	.+8      	; 0x5d0 <__addsf3+0x20>
 5c8:	39 f4       	brne	.+14     	; 0x5d8 <__addsf3+0x28>
 5ca:	9f 3f       	cpi	r25, 0xFF	; 255
 5cc:	19 f4       	brne	.+6      	; 0x5d4 <__addsf3+0x24>
 5ce:	26 f4       	brtc	.+8      	; 0x5d8 <__addsf3+0x28>
 5d0:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>
 5d4:	0e f4       	brtc	.+2      	; 0x5d8 <__addsf3+0x28>
 5d6:	e0 95       	com	r30
 5d8:	e7 fb       	bst	r30, 7
 5da:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>

000005de <__addsf3x>:
 5de:	e9 2f       	mov	r30, r25
 5e0:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 5e4:	58 f3       	brcs	.-42     	; 0x5bc <__addsf3+0xc>
 5e6:	ba 17       	cp	r27, r26
 5e8:	62 07       	cpc	r22, r18
 5ea:	73 07       	cpc	r23, r19
 5ec:	84 07       	cpc	r24, r20
 5ee:	95 07       	cpc	r25, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__addsf3x+0x1c>
 5f2:	79 f4       	brne	.+30     	; 0x612 <__addsf3x+0x34>
 5f4:	a6 f5       	brtc	.+104    	; 0x65e <__addsf3x+0x80>
 5f6:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_zero>
 5fa:	0e f4       	brtc	.+2      	; 0x5fe <__addsf3x+0x20>
 5fc:	e0 95       	com	r30
 5fe:	0b 2e       	mov	r0, r27
 600:	ba 2f       	mov	r27, r26
 602:	a0 2d       	mov	r26, r0
 604:	0b 01       	movw	r0, r22
 606:	b9 01       	movw	r22, r18
 608:	90 01       	movw	r18, r0
 60a:	0c 01       	movw	r0, r24
 60c:	ca 01       	movw	r24, r20
 60e:	a0 01       	movw	r20, r0
 610:	11 24       	eor	r1, r1
 612:	ff 27       	eor	r31, r31
 614:	59 1b       	sub	r21, r25
 616:	99 f0       	breq	.+38     	; 0x63e <__addsf3x+0x60>
 618:	59 3f       	cpi	r21, 0xF9	; 249
 61a:	50 f4       	brcc	.+20     	; 0x630 <__addsf3x+0x52>
 61c:	50 3e       	cpi	r21, 0xE0	; 224
 61e:	68 f1       	brcs	.+90     	; 0x67a <__addsf3x+0x9c>
 620:	1a 16       	cp	r1, r26
 622:	f0 40       	sbci	r31, 0x00	; 0
 624:	a2 2f       	mov	r26, r18
 626:	23 2f       	mov	r18, r19
 628:	34 2f       	mov	r19, r20
 62a:	44 27       	eor	r20, r20
 62c:	58 5f       	subi	r21, 0xF8	; 248
 62e:	f3 cf       	rjmp	.-26     	; 0x616 <__addsf3x+0x38>
 630:	46 95       	lsr	r20
 632:	37 95       	ror	r19
 634:	27 95       	ror	r18
 636:	a7 95       	ror	r26
 638:	f0 40       	sbci	r31, 0x00	; 0
 63a:	53 95       	inc	r21
 63c:	c9 f7       	brne	.-14     	; 0x630 <__addsf3x+0x52>
 63e:	7e f4       	brtc	.+30     	; 0x65e <__addsf3x+0x80>
 640:	1f 16       	cp	r1, r31
 642:	ba 0b       	sbc	r27, r26
 644:	62 0b       	sbc	r22, r18
 646:	73 0b       	sbc	r23, r19
 648:	84 0b       	sbc	r24, r20
 64a:	ba f0       	brmi	.+46     	; 0x67a <__addsf3x+0x9c>
 64c:	91 50       	subi	r25, 0x01	; 1
 64e:	a1 f0       	breq	.+40     	; 0x678 <__addsf3x+0x9a>
 650:	ff 0f       	add	r31, r31
 652:	bb 1f       	adc	r27, r27
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	c2 f7       	brpl	.-16     	; 0x64c <__addsf3x+0x6e>
 65c:	0e c0       	rjmp	.+28     	; 0x67a <__addsf3x+0x9c>
 65e:	ba 0f       	add	r27, r26
 660:	62 1f       	adc	r22, r18
 662:	73 1f       	adc	r23, r19
 664:	84 1f       	adc	r24, r20
 666:	48 f4       	brcc	.+18     	; 0x67a <__addsf3x+0x9c>
 668:	87 95       	ror	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b7 95       	ror	r27
 670:	f7 95       	ror	r31
 672:	9e 3f       	cpi	r25, 0xFE	; 254
 674:	08 f0       	brcs	.+2      	; 0x678 <__addsf3x+0x9a>
 676:	b0 cf       	rjmp	.-160    	; 0x5d8 <__addsf3+0x28>
 678:	93 95       	inc	r25
 67a:	88 0f       	add	r24, r24
 67c:	08 f0       	brcs	.+2      	; 0x680 <__addsf3x+0xa2>
 67e:	99 27       	eor	r25, r25
 680:	ee 0f       	add	r30, r30
 682:	97 95       	ror	r25
 684:	87 95       	ror	r24
 686:	08 95       	ret

00000688 <__divsf3>:
 688:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divsf3x>
 68c:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 690:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 694:	58 f0       	brcs	.+22     	; 0x6ac <__divsf3+0x24>
 696:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 69a:	40 f0       	brcs	.+16     	; 0x6ac <__divsf3+0x24>
 69c:	29 f4       	brne	.+10     	; 0x6a8 <__divsf3+0x20>
 69e:	5f 3f       	cpi	r21, 0xFF	; 255
 6a0:	29 f0       	breq	.+10     	; 0x6ac <__divsf3+0x24>
 6a2:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 6a6:	51 11       	cpse	r21, r1
 6a8:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 6ac:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>

000006b0 <__divsf3x>:
 6b0:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 6b4:	68 f3       	brcs	.-38     	; 0x690 <__divsf3+0x8>

000006b6 <__divsf3_pse>:
 6b6:	99 23       	and	r25, r25
 6b8:	b1 f3       	breq	.-20     	; 0x6a6 <__divsf3+0x1e>
 6ba:	55 23       	and	r21, r21
 6bc:	91 f3       	breq	.-28     	; 0x6a2 <__divsf3+0x1a>
 6be:	95 1b       	sub	r25, r21
 6c0:	55 0b       	sbc	r21, r21
 6c2:	bb 27       	eor	r27, r27
 6c4:	aa 27       	eor	r26, r26
 6c6:	62 17       	cp	r22, r18
 6c8:	73 07       	cpc	r23, r19
 6ca:	84 07       	cpc	r24, r20
 6cc:	38 f0       	brcs	.+14     	; 0x6dc <__divsf3_pse+0x26>
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	22 0f       	add	r18, r18
 6d4:	33 1f       	adc	r19, r19
 6d6:	44 1f       	adc	r20, r20
 6d8:	aa 1f       	adc	r26, r26
 6da:	a9 f3       	breq	.-22     	; 0x6c6 <__divsf3_pse+0x10>
 6dc:	35 d0       	rcall	.+106    	; 0x748 <__divsf3_pse+0x92>
 6de:	0e 2e       	mov	r0, r30
 6e0:	3a f0       	brmi	.+14     	; 0x6f0 <__divsf3_pse+0x3a>
 6e2:	e0 e8       	ldi	r30, 0x80	; 128
 6e4:	32 d0       	rcall	.+100    	; 0x74a <__divsf3_pse+0x94>
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	e6 95       	lsr	r30
 6ec:	00 1c       	adc	r0, r0
 6ee:	ca f7       	brpl	.-14     	; 0x6e2 <__divsf3_pse+0x2c>
 6f0:	2b d0       	rcall	.+86     	; 0x748 <__divsf3_pse+0x92>
 6f2:	fe 2f       	mov	r31, r30
 6f4:	29 d0       	rcall	.+82     	; 0x748 <__divsf3_pse+0x92>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	bb 1f       	adc	r27, r27
 6fe:	26 17       	cp	r18, r22
 700:	37 07       	cpc	r19, r23
 702:	48 07       	cpc	r20, r24
 704:	ab 07       	cpc	r26, r27
 706:	b0 e8       	ldi	r27, 0x80	; 128
 708:	09 f0       	breq	.+2      	; 0x70c <__divsf3_pse+0x56>
 70a:	bb 0b       	sbc	r27, r27
 70c:	80 2d       	mov	r24, r0
 70e:	bf 01       	movw	r22, r30
 710:	ff 27       	eor	r31, r31
 712:	93 58       	subi	r25, 0x83	; 131
 714:	5f 4f       	sbci	r21, 0xFF	; 255
 716:	3a f0       	brmi	.+14     	; 0x726 <__divsf3_pse+0x70>
 718:	9e 3f       	cpi	r25, 0xFE	; 254
 71a:	51 05       	cpc	r21, r1
 71c:	78 f0       	brcs	.+30     	; 0x73c <__divsf3_pse+0x86>
 71e:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 722:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 726:	5f 3f       	cpi	r21, 0xFF	; 255
 728:	e4 f3       	brlt	.-8      	; 0x722 <__divsf3_pse+0x6c>
 72a:	98 3e       	cpi	r25, 0xE8	; 232
 72c:	d4 f3       	brlt	.-12     	; 0x722 <__divsf3_pse+0x6c>
 72e:	86 95       	lsr	r24
 730:	77 95       	ror	r23
 732:	67 95       	ror	r22
 734:	b7 95       	ror	r27
 736:	f7 95       	ror	r31
 738:	9f 5f       	subi	r25, 0xFF	; 255
 73a:	c9 f7       	brne	.-14     	; 0x72e <__divsf3_pse+0x78>
 73c:	88 0f       	add	r24, r24
 73e:	91 1d       	adc	r25, r1
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret
 748:	e1 e0       	ldi	r30, 0x01	; 1
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	bb 1f       	adc	r27, r27
 752:	62 17       	cp	r22, r18
 754:	73 07       	cpc	r23, r19
 756:	84 07       	cpc	r24, r20
 758:	ba 07       	cpc	r27, r26
 75a:	20 f0       	brcs	.+8      	; 0x764 <__divsf3_pse+0xae>
 75c:	62 1b       	sub	r22, r18
 75e:	73 0b       	sbc	r23, r19
 760:	84 0b       	sbc	r24, r20
 762:	ba 0b       	sbc	r27, r26
 764:	ee 1f       	adc	r30, r30
 766:	88 f7       	brcc	.-30     	; 0x74a <__divsf3_pse+0x94>
 768:	e0 95       	com	r30
 76a:	08 95       	ret

0000076c <__fixunssfsi>:
 76c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__fp_splitA>
 770:	88 f0       	brcs	.+34     	; 0x794 <__fixunssfsi+0x28>
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	98 f0       	brcs	.+38     	; 0x79c <__fixunssfsi+0x30>
 776:	b9 2f       	mov	r27, r25
 778:	99 27       	eor	r25, r25
 77a:	b7 51       	subi	r27, 0x17	; 23
 77c:	b0 f0       	brcs	.+44     	; 0x7aa <__fixunssfsi+0x3e>
 77e:	e1 f0       	breq	.+56     	; 0x7b8 <__fixunssfsi+0x4c>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	1a f0       	brmi	.+6      	; 0x790 <__fixunssfsi+0x24>
 78a:	ba 95       	dec	r27
 78c:	c9 f7       	brne	.-14     	; 0x780 <__fixunssfsi+0x14>
 78e:	14 c0       	rjmp	.+40     	; 0x7b8 <__fixunssfsi+0x4c>
 790:	b1 30       	cpi	r27, 0x01	; 1
 792:	91 f0       	breq	.+36     	; 0x7b8 <__fixunssfsi+0x4c>
 794:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_zero>
 798:	b1 e0       	ldi	r27, 0x01	; 1
 79a:	08 95       	ret
 79c:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_zero>
 7a0:	67 2f       	mov	r22, r23
 7a2:	78 2f       	mov	r23, r24
 7a4:	88 27       	eor	r24, r24
 7a6:	b8 5f       	subi	r27, 0xF8	; 248
 7a8:	39 f0       	breq	.+14     	; 0x7b8 <__fixunssfsi+0x4c>
 7aa:	b9 3f       	cpi	r27, 0xF9	; 249
 7ac:	cc f3       	brlt	.-14     	; 0x7a0 <__fixunssfsi+0x34>
 7ae:	86 95       	lsr	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b3 95       	inc	r27
 7b6:	d9 f7       	brne	.-10     	; 0x7ae <__fixunssfsi+0x42>
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__fixunssfsi+0x5c>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	08 95       	ret

000007ca <__floatunsisf>:
 7ca:	e8 94       	clt
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <__floatsisf+0x12>

000007ce <__floatsisf>:
 7ce:	97 fb       	bst	r25, 7
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__floatsisf+0x12>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	99 23       	and	r25, r25
 7e2:	a9 f0       	breq	.+42     	; 0x80e <__floatsisf+0x40>
 7e4:	f9 2f       	mov	r31, r25
 7e6:	96 e9       	ldi	r25, 0x96	; 150
 7e8:	bb 27       	eor	r27, r27
 7ea:	93 95       	inc	r25
 7ec:	f6 95       	lsr	r31
 7ee:	87 95       	ror	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f1 11       	cpse	r31, r1
 7f8:	f8 cf       	rjmp	.-16     	; 0x7ea <__floatsisf+0x1c>
 7fa:	fa f4       	brpl	.+62     	; 0x83a <__floatsisf+0x6c>
 7fc:	bb 0f       	add	r27, r27
 7fe:	11 f4       	brne	.+4      	; 0x804 <__floatsisf+0x36>
 800:	60 ff       	sbrs	r22, 0
 802:	1b c0       	rjmp	.+54     	; 0x83a <__floatsisf+0x6c>
 804:	6f 5f       	subi	r22, 0xFF	; 255
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__floatsisf+0x6c>
 80e:	88 23       	and	r24, r24
 810:	11 f0       	breq	.+4      	; 0x816 <__floatsisf+0x48>
 812:	96 e9       	ldi	r25, 0x96	; 150
 814:	11 c0       	rjmp	.+34     	; 0x838 <__floatsisf+0x6a>
 816:	77 23       	and	r23, r23
 818:	21 f0       	breq	.+8      	; 0x822 <__floatsisf+0x54>
 81a:	9e e8       	ldi	r25, 0x8E	; 142
 81c:	87 2f       	mov	r24, r23
 81e:	76 2f       	mov	r23, r22
 820:	05 c0       	rjmp	.+10     	; 0x82c <__floatsisf+0x5e>
 822:	66 23       	and	r22, r22
 824:	71 f0       	breq	.+28     	; 0x842 <__floatsisf+0x74>
 826:	96 e8       	ldi	r25, 0x86	; 134
 828:	86 2f       	mov	r24, r22
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	2a f0       	brmi	.+10     	; 0x83a <__floatsisf+0x6c>
 830:	9a 95       	dec	r25
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	da f7       	brpl	.-10     	; 0x830 <__floatsisf+0x62>
 83a:	88 0f       	add	r24, r24
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <__fp_inf>:
 844:	97 f9       	bld	r25, 7
 846:	9f 67       	ori	r25, 0x7F	; 127
 848:	80 e8       	ldi	r24, 0x80	; 128
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	08 95       	ret

00000850 <__fp_nan>:
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	80 ec       	ldi	r24, 0xC0	; 192
 854:	08 95       	ret

00000856 <__fp_pscA>:
 856:	00 24       	eor	r0, r0
 858:	0a 94       	dec	r0
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	09 06       	cpc	r0, r25
 862:	08 95       	ret

00000864 <__fp_pscB>:
 864:	00 24       	eor	r0, r0
 866:	0a 94       	dec	r0
 868:	12 16       	cp	r1, r18
 86a:	13 06       	cpc	r1, r19
 86c:	14 06       	cpc	r1, r20
 86e:	05 06       	cpc	r0, r21
 870:	08 95       	ret

00000872 <__fp_round>:
 872:	09 2e       	mov	r0, r25
 874:	03 94       	inc	r0
 876:	00 0c       	add	r0, r0
 878:	11 f4       	brne	.+4      	; 0x87e <__fp_round+0xc>
 87a:	88 23       	and	r24, r24
 87c:	52 f0       	brmi	.+20     	; 0x892 <__fp_round+0x20>
 87e:	bb 0f       	add	r27, r27
 880:	40 f4       	brcc	.+16     	; 0x892 <__fp_round+0x20>
 882:	bf 2b       	or	r27, r31
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0x18>
 886:	60 ff       	sbrs	r22, 0
 888:	04 c0       	rjmp	.+8      	; 0x892 <__fp_round+0x20>
 88a:	6f 5f       	subi	r22, 0xFF	; 255
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <__fp_split3>:
 894:	57 fd       	sbrc	r21, 7
 896:	90 58       	subi	r25, 0x80	; 128
 898:	44 0f       	add	r20, r20
 89a:	55 1f       	adc	r21, r21
 89c:	59 f0       	breq	.+22     	; 0x8b4 <__fp_splitA+0x10>
 89e:	5f 3f       	cpi	r21, 0xFF	; 255
 8a0:	71 f0       	breq	.+28     	; 0x8be <__fp_splitA+0x1a>
 8a2:	47 95       	ror	r20

000008a4 <__fp_splitA>:
 8a4:	88 0f       	add	r24, r24
 8a6:	97 fb       	bst	r25, 7
 8a8:	99 1f       	adc	r25, r25
 8aa:	61 f0       	breq	.+24     	; 0x8c4 <__fp_splitA+0x20>
 8ac:	9f 3f       	cpi	r25, 0xFF	; 255
 8ae:	79 f0       	breq	.+30     	; 0x8ce <__fp_splitA+0x2a>
 8b0:	87 95       	ror	r24
 8b2:	08 95       	ret
 8b4:	12 16       	cp	r1, r18
 8b6:	13 06       	cpc	r1, r19
 8b8:	14 06       	cpc	r1, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	f2 cf       	rjmp	.-28     	; 0x8a2 <__fp_split3+0xe>
 8be:	46 95       	lsr	r20
 8c0:	f1 df       	rcall	.-30     	; 0x8a4 <__fp_splitA>
 8c2:	08 c0       	rjmp	.+16     	; 0x8d4 <__fp_splitA+0x30>
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	f1 cf       	rjmp	.-30     	; 0x8b0 <__fp_splitA+0xc>
 8ce:	86 95       	lsr	r24
 8d0:	71 05       	cpc	r23, r1
 8d2:	61 05       	cpc	r22, r1
 8d4:	08 94       	sec
 8d6:	08 95       	ret

000008d8 <__fp_zero>:
 8d8:	e8 94       	clt

000008da <__fp_szero>:
 8da:	bb 27       	eor	r27, r27
 8dc:	66 27       	eor	r22, r22
 8de:	77 27       	eor	r23, r23
 8e0:	cb 01       	movw	r24, r22
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret

000008e6 <__mulsf3>:
 8e6:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsf3x>
 8ea:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 8ee:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__stack+0x3>
 8f4:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__stack+0x3>
 8fa:	95 23       	and	r25, r21
 8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
 8fe:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 902:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>
 906:	11 24       	eor	r1, r1
 908:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>

0000090c <__mulsf3x>:
 90c:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 910:	70 f3       	brcs	.-36     	; 0x8ee <__mulsf3+0x8>

00000912 <__mulsf3_pse>:
 912:	95 9f       	mul	r25, r21
 914:	c1 f3       	breq	.-16     	; 0x906 <__stack+0x7>
 916:	95 0f       	add	r25, r21
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	55 1f       	adc	r21, r21
 91c:	62 9f       	mul	r22, r18
 91e:	f0 01       	movw	r30, r0
 920:	72 9f       	mul	r23, r18
 922:	bb 27       	eor	r27, r27
 924:	f0 0d       	add	r31, r0
 926:	b1 1d       	adc	r27, r1
 928:	63 9f       	mul	r22, r19
 92a:	aa 27       	eor	r26, r26
 92c:	f0 0d       	add	r31, r0
 92e:	b1 1d       	adc	r27, r1
 930:	aa 1f       	adc	r26, r26
 932:	64 9f       	mul	r22, r20
 934:	66 27       	eor	r22, r22
 936:	b0 0d       	add	r27, r0
 938:	a1 1d       	adc	r26, r1
 93a:	66 1f       	adc	r22, r22
 93c:	82 9f       	mul	r24, r18
 93e:	22 27       	eor	r18, r18
 940:	b0 0d       	add	r27, r0
 942:	a1 1d       	adc	r26, r1
 944:	62 1f       	adc	r22, r18
 946:	73 9f       	mul	r23, r19
 948:	b0 0d       	add	r27, r0
 94a:	a1 1d       	adc	r26, r1
 94c:	62 1f       	adc	r22, r18
 94e:	83 9f       	mul	r24, r19
 950:	a0 0d       	add	r26, r0
 952:	61 1d       	adc	r22, r1
 954:	22 1f       	adc	r18, r18
 956:	74 9f       	mul	r23, r20
 958:	33 27       	eor	r19, r19
 95a:	a0 0d       	add	r26, r0
 95c:	61 1d       	adc	r22, r1
 95e:	23 1f       	adc	r18, r19
 960:	84 9f       	mul	r24, r20
 962:	60 0d       	add	r22, r0
 964:	21 1d       	adc	r18, r1
 966:	82 2f       	mov	r24, r18
 968:	76 2f       	mov	r23, r22
 96a:	6a 2f       	mov	r22, r26
 96c:	11 24       	eor	r1, r1
 96e:	9f 57       	subi	r25, 0x7F	; 127
 970:	50 40       	sbci	r21, 0x00	; 0
 972:	9a f0       	brmi	.+38     	; 0x99a <__mulsf3_pse+0x88>
 974:	f1 f0       	breq	.+60     	; 0x9b2 <__mulsf3_pse+0xa0>
 976:	88 23       	and	r24, r24
 978:	4a f0       	brmi	.+18     	; 0x98c <__mulsf3_pse+0x7a>
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	bb 1f       	adc	r27, r27
 980:	66 1f       	adc	r22, r22
 982:	77 1f       	adc	r23, r23
 984:	88 1f       	adc	r24, r24
 986:	91 50       	subi	r25, 0x01	; 1
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	a9 f7       	brne	.-22     	; 0x976 <__mulsf3_pse+0x64>
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	51 05       	cpc	r21, r1
 990:	80 f0       	brcs	.+32     	; 0x9b2 <__mulsf3_pse+0xa0>
 992:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 996:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	e4 f3       	brlt	.-8      	; 0x996 <__mulsf3_pse+0x84>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	d4 f3       	brlt	.-12     	; 0x996 <__mulsf3_pse+0x84>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	e7 95       	ror	r30
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x90>
 9b2:	fe 2b       	or	r31, r30
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <_exit>:
 9c0:	f8 94       	cli

000009c2 <__stop_program>:
 9c2:	ff cf       	rjmp	.-2      	; 0x9c2 <__stop_program>
