
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009af  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077f  00000000  00000000  00000d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000467  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049a  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b8  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_11>
  30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_14>
  3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 19 01 	call	0x232	; 0x232 <main>
  88:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <driverTimers_Init>:
#define TOGGLE_SW4 PORTD ^= (1<<PD6)



void driverTimers_Init(){
 	TCCR0B |= (1<<CS00); //Set up 8bit timer to use 8MHZ clock
  90:	85 b5       	in	r24, 0x25	; 37
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bd       	out	0x25, r24	; 37
 	OCR0A = DEAD_TIME_COUNT_HIGH; //DEAD_TIME_COUNT_HIGH;	
  96:	80 ed       	ldi	r24, 0xD0	; 208
  98:	87 bd       	out	0x27, r24	; 39
 	OCR0B = DEAD_TIME_COUNT_LOW; //DEAD_TIME_COUNT_LOW;			//Initializing dead times which remain constant		
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	88 bd       	out	0x28, r24	; 40

	TCCR1B |= (1<<CS11);//Set up 16 bit timer with pre-scaler 8
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	DDRB = (1 << DDB0); //Configuring driver pins to output
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
  ac:	80 ee       	ldi	r24, 0xE0	; 224
  ae:	8a b9       	out	0x0a, r24	; 10
			//CLEAR ALL OUTPUT PINS except for switch 1 & 4
	PORTB |= (1<<PB0);
  b0:	28 9a       	sbi	0x05, 0	; 5
	PORTD &= ~(1<<PD5);
  b2:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<PD7);
  b4:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= (1<<PD6);
  b6:	5e 9a       	sbi	0x0b, 6	; 11
	
	isNegativeCycle = false; 
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  bc:	08 95       	ret

000000be <setFrequency>:
void setFrequency(float frequency, float dutyCycle){
// 	double OFFTime = ((1/frequency) - 4*dutyCycle + 200)/ (4 + MAGNITUDE_DELAY); //Find T_ON, T_OFF1, T_OFF2 from given frequency
// 	T_OFF1 = (uint16_t) (round(OFFTime));
// 	T_OFF2 = (uint16_t) (round(OFFTime*(1.0+MAGNITUDE_DELAY)));
// 	T_ON = 2*(dutyCycle-50) + T_OFF1;
	T_ON = 20000;
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <T_ON+0x1>
  c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <T_ON>
	OCR1A = 20000+T_ON;
  ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <T_ON>
  ce:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <T_ON+0x1>
  d2:	80 5e       	subi	r24, 0xE0	; 224
  d4:	91 4b       	sbci	r25, 0xB1	; 177
  d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = T_ON;
  de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <T_ON>
  e2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <T_ON+0x1>
  e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  ee:	08 95       	ret

000000f0 <driverTimersInterrupts_Init>:
	//OCR1A = T_ON + DEAD_TIME_COUNT_HIGH*8 + T_OFF1;
}

void driverTimersInterrupts_Init(){
	sei();									//Enable global interrupts	
  f0:	78 94       	sei
	TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);	// Enable on/off time timer compare match interrupts
  f2:	ef e6       	ldi	r30, 0x6F	; 111
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <__vector_15>:

}

  ISR(TIMER0_COMPB_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	TIMSK0 &= ~(1<<OCIE0B);
 110:	ee e6       	ldi	r30, 0x6E	; 110
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	80 83       	st	Z, r24
	TCNT1 = 0;
 11a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 		
		if (isNegativeCycle){		//Set pins for next half cycle
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	88 23       	and	r24, r24
 128:	29 f0       	breq	.+10     	; 0x134 <__vector_15+0x36>
			TOGGLE_SW1; //sets pins for positive cycle
 12a:	95 b1       	in	r25, 0x05	; 5
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	89 27       	eor	r24, r25
 130:	85 b9       	out	0x05, r24	; 5
 132:	04 c0       	rjmp	.+8      	; 0x13c <__vector_15+0x3e>
			} else {
			TOGGLE_SW2;//set pins on for positive cycle
 134:	9b b1       	in	r25, 0x0b	; 11
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	89 27       	eor	r24, r25
 13a:	8b b9       	out	0x0b, r24	; 11
		}
		isNegativeCycle = !isNegativeCycle; //set flag to indicate next half cycle
 13c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	89 27       	eor	r24, r25
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  }
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_14>:

 																		
ISR(TIMER0_COMPA_vect){
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	TIMSK0 &= ~(1<<OCIE0A);	//turn off compare A interrupt enable
 16c:	ee e6       	ldi	r30, 0x6E	; 110
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	80 83       	st	Z, r24
	if (isNegativeCycle){
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17a:	88 23       	and	r24, r24
 17c:	29 f0       	breq	.+10     	; 0x188 <__vector_14+0x2e>
		TOGGLE_SW4;
 17e:	9b b1       	in	r25, 0x0b	; 11
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	89 27       	eor	r24, r25
 184:	8b b9       	out	0x0b, r24	; 11
 186:	03 c0       	rjmp	.+6      	; 0x18e <__vector_14+0x34>
	} else {
		TOGGLE_SW3; 
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	80 58       	subi	r24, 0x80	; 128
 18c:	8b b9       	out	0x0b, r24	; 11
	}									// Disable high dead time timer interrupts

}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_12>:

ISR(TIMER1_COMPB_vect){// Set up timer0 compare match ISRs
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 	if (isNegativeCycle){		//set timer 1 on/off timer compare value to correct value 
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b6:	88 23       	and	r24, r24
 1b8:	59 f0       	breq	.+22     	; 0x1d0 <__vector_12+0x30>
 		TOGGLE_SW2; //turn off SW2
 1ba:	9b b1       	in	r25, 0x0b	; 11
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	89 27       	eor	r24, r25
 1c0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	87 ee       	ldi	r24, 0xE7	; 231
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <__vector_12+0x26>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <__vector_12+0x2c>
 1cc:	00 00       	nop
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <__vector_12+0x38>
		_delay_us(500);
		//OCR1A = T_ON + (DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8 + T_OFF1;
 	} else {
 		//OCR1A = T_ON + (DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8 + T_OFF2;
 		TOGGLE_SW1; //TURN OFF SWITCH 1
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	89 27       	eor	r24, r25
 1d6:	85 b9       	out	0x05, r24	; 5

 	}

	TCNT0=0; 													//clear counter to start dead time timer
 1d8:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A);										// Enable dead time timer compare match A interrupts
 1da:	ee e6       	ldi	r30, 0x6E	; 110
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 83       	st	Z, r24
}	
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_11>:

	
ISR(TIMER1_COMPA_vect){
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	
		if (isNegativeCycle){
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 208:	88 23       	and	r24, r24
 20a:	21 f0       	breq	.+8      	; 0x214 <__vector_11+0x1e>
 			TOGGLE_SW3;
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 58       	subi	r24, 0x80	; 128
 210:	8b b9       	out	0x0b, r24	; 11
 212:	04 c0       	rjmp	.+8      	; 0x21c <__vector_11+0x26>
 		} else {
 			TOGGLE_SW4; //turns off switch 4
 214:	9b b1       	in	r25, 0x0b	; 11
 216:	80 e4       	ldi	r24, 0x40	; 64
 218:	89 27       	eor	r24, r25
 21a:	8b b9       	out	0x0b, r24	; 11
 		}
 			TCNT0 = 0 ; //reset timer 0
 21c:	16 bc       	out	0x26, r1	; 38
 			TIMSK0 = (1<<OCIE0B); //enable low deadtime timer interrupts		
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <main>:
	*/
	
	float frequency = 12;
	float dutyCycle= 50;
	
	setFrequency(frequency, dutyCycle);//acquire on/off times or alternatively could manually set on and off times
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	48 e4       	ldi	r20, 0x48	; 72
 238:	52 e4       	ldi	r21, 0x42	; 66
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e4       	ldi	r24, 0x40	; 64
 240:	91 e4       	ldi	r25, 0x41	; 65
 242:	0e 94 5f 00 	call	0xbe	; 0xbe <setFrequency>
	driverTimers_Init();
 246:	0e 94 48 00 	call	0x90	; 0x90 <driverTimers_Init>
	driverTimersInterrupts_Init();
 24a:	0e 94 78 00 	call	0xf0	; 0xf0 <driverTimersInterrupts_Init>
 24e:	ff cf       	rjmp	.-2      	; 0x24e <main+0x1c>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
