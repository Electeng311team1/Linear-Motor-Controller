
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800100  00800100  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aff  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000859  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c6  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004be  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ff  00000000  00000000  0000297e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_11>
  30:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_14>
  3c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 24 04 	jmp	0x848	; 0x848 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

float* frequency;
float* duty_cycle;
uint8_t* mfc;
//ISR for UART receive
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	char tmp = UDR0; 
  b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
  bc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <message_complete>
  c0:	91 11       	cpse	r25, r1
  c2:	47 c0       	rjmp	.+142    	; 0x152 <__vector_18+0xac>
		if(tmp == '{'){
  c4:	8b 37       	cpi	r24, 0x7B	; 123
  c6:	49 f4       	brne	.+18     	; 0xda <__vector_18+0x34>
			net_brackets++;
  c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <net_brackets>
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <net_brackets>
			message_start = true;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_end>
  d8:	12 c0       	rjmp	.+36     	; 0xfe <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
  da:	8d 37       	cpi	r24, 0x7D	; 125
  dc:	81 f4       	brne	.+32     	; 0xfe <__vector_18+0x58>
  de:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	61 f4       	brne	.+24     	; 0xfe <__vector_18+0x58>
			net_brackets--;
  e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <net_brackets>
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <net_brackets>
			if(net_brackets == 0){
  f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <net_brackets>
  f4:	91 11       	cpse	r25, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_18+0x58>
				message_complete = true;
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <message_complete>
			}
		}

		if(message_start == true){
  fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
 102:	91 30       	cpi	r25, 0x01	; 1
 104:	a9 f4       	brne	.+42     	; 0x130 <__vector_18+0x8a>
			received_message[message_index] = tmp;
 106:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <message_index>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e6 5f       	subi	r30, 0xF6	; 246
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 83       	st	Z, r24
			message_index++;
 112:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <message_index>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <message_index>
			if(message_complete == true){
 11c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <message_complete>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <__vector_18+0x8a>
				received_message[message_index] = '\0';
 124:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <message_index>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e6 5f       	subi	r30, 0xF6	; 246
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 130:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <message_index>
 134:	8e 3f       	cpi	r24, 0xFE	; 254
 136:	21 f0       	breq	.+8      	; 0x140 <__vector_18+0x9a>
 138:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <net_brackets>
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	48 f0       	brcs	.+18     	; 0x152 <__vector_18+0xac>
			receive_error = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <receive_error>
			message_start = false;
 146:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
			message_complete = false;
 14a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <message_complete>
			message_index = 0;
 14e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <message_index>
		}
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 164:	83 e3       	ldi	r24, 0x33	; 51
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 06 02 	call	0x40c	; 0x40c <uart_initiate>

	//Enable Global interrupts
	sei();
 16c:	78 94       	sei
// 	PORTD &= ~(1 << PD5);
// 	PORTD |= (1 << PD7);
// 	PORTD |= (1 << PD6);

	//enable timers
	driver_timer_initiate();
 16e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <driver_timer_initiate>

	*mfc = 120;
 172:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <mfc>
 176:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <mfc+0x1>
 17a:	88 e7       	ldi	r24, 0x78	; 120
 17c:	80 83       	st	Z, r24
	*duty_cycle = 0.5;
 17e:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <duty_cycle>
 182:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <duty_cycle+0x1>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	bf e3       	ldi	r27, 0x3F	; 63
 18e:	80 83       	st	Z, r24
 190:	91 83       	std	Z+1, r25	; 0x01
 192:	a2 83       	std	Z+2, r26	; 0x02
 194:	b3 83       	std	Z+3, r27	; 0x03
	*frequency = 12.5;
 196:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <frequency>
 19a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <frequency+0x1>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	a8 e4       	ldi	r26, 0x48	; 72
 1a4:	b1 e4       	ldi	r27, 0x41	; 65
 1a6:	80 83       	st	Z, r24
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	a2 83       	std	Z+2, r26	; 0x02
 1ac:	b3 83       	std	Z+3, r27	; 0x03
	set_parameters(frequency, duty_cycle, mfc);
 1ae:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <mfc>
 1b2:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <mfc+0x1>
 1b6:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <duty_cycle>
 1ba:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <duty_cycle+0x1>
 1be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <frequency>
 1c2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frequency+0x1>
 1c6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <set_parameters>
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <main+0x66>

000001cc <driver_timer_initiate>:
 #define SET_SW4 PORTD |= (1 << PD6)
 #define CLR_SW4 PORTD &= ~(1 << PD6) 

 void driver_timer_initiate(void){
	//Timer 1 8bit (no prescalar)
	TCCR0B |= (1 << CS00);
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 bd       	out	0x25, r24	; 37
	OCR0B = LOW_OFF_TIME;
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	88 bd       	out	0x28, r24	; 40
	OCR0A = HIGH_OFF_TIME;
 1d6:	80 ed       	ldi	r24, 0xD0	; 208
 1d8:	87 bd       	out	0x27, r24	; 39

	//Timer 2 16bit (8 prescalar)
	TCCR1B |= (1 << CS11);
 1da:	e1 e8       	ldi	r30, 0x81	; 129
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 83       	st	Z, r24

	//Set pins to output
	DDRB |= (1 << DDB0);
 1e4:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
 1e6:	8a b1       	in	r24, 0x0a	; 10
 1e8:	80 6e       	ori	r24, 0xE0	; 224
 1ea:	8a b9       	out	0x0a, r24	; 10

	//Set initial switches
	SET_SW1;
 1ec:	28 9a       	sbi	0x05, 0	; 5
	SET_SW4;
 1ee:	5e 9a       	sbi	0x0b, 6	; 11
	CLR_SW2;
 1f0:	5d 98       	cbi	0x0b, 5	; 11
	CLR_SW3;
 1f2:	5f 98       	cbi	0x0b, 7	; 11

	isNegative = false;
 1f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <isNegative>
 1f8:	08 95       	ret

000001fa <set_parameters>:
 }

 void set_parameters(float* frequency, float* duty_cycle, uint8_t* mfc){
 1fa:	4f 92       	push	r4
 1fc:	5f 92       	push	r5
 1fe:	6f 92       	push	r6
 200:	7f 92       	push	r7
 202:	8f 92       	push	r8
 204:	9f 92       	push	r9
 206:	af 92       	push	r10
 208:	bf 92       	push	r11
 20a:	cf 92       	push	r12
 20c:	df 92       	push	r13
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
 218:	7b 01       	movw	r14, r22
	*duty_cycle = *mfc/255;
 21a:	fa 01       	movw	r30, r20
 21c:	80 81       	ld	r24, Z
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	8f 3f       	cpi	r24, 0xFF	; 255
 222:	08 f4       	brcc	.+2      	; 0x226 <set_parameters+0x2c>
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 2b 03 	call	0x656	; 0x656 <__floatsisf>
 230:	4b 01       	movw	r8, r22
 232:	5c 01       	movw	r10, r24
 234:	f7 01       	movw	r30, r14
 236:	60 83       	st	Z, r22
 238:	71 83       	std	Z+1, r23	; 0x01
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	93 83       	std	Z+3, r25	; 0x03

	uint16_t off_time = (uint16_t)((1000/(2*(float)*frequency))-LOW_OFF_TIME-HIGH_OFF_TIME)*(1-(float)*duty_cycle);
 23e:	68 81       	ld	r22, Y
 240:	79 81       	ldd	r23, Y+1	; 0x01
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	9b 81       	ldd	r25, Y+3	; 0x03
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	0e 94 1c 02 	call	0x438	; 0x438 <__addsf3>
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	8a e7       	ldi	r24, 0x7A	; 122
 258:	94 e4       	ldi	r25, 0x44	; 68
 25a:	0e 94 88 02 	call	0x510	; 0x510 <__divsf3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 ec       	ldi	r20, 0xC0	; 192
 264:	51 e4       	ldi	r21, 0x41	; 65
 266:	0e 94 1b 02 	call	0x436	; 0x436 <__subsf3>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e5       	ldi	r20, 0x50	; 80
 270:	53 e4       	ldi	r21, 0x43	; 67
 272:	0e 94 1b 02 	call	0x436	; 0x436 <__subsf3>
 276:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixunssfsi>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 29 03 	call	0x652	; 0x652 <__floatunsisf>
 282:	2b 01       	movw	r4, r22
 284:	3c 01       	movw	r6, r24
	uint16_t on_time = (uint16_t)((1000/(2*(float)*frequency))-LOW_OFF_TIME-HIGH_OFF_TIME)*((float)*duty_cycle);
 286:	9b 01       	movw	r18, r22
 288:	ac 01       	movw	r20, r24
 28a:	c5 01       	movw	r24, r10
 28c:	b4 01       	movw	r22, r8
 28e:	0e 94 b7 03 	call	0x76e	; 0x76e <__mulsf3>
 292:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixunssfsi>
 296:	6b 01       	movw	r12, r22
 298:	7c 01       	movw	r14, r24

	//Set T1 Compare
	OCR1A = (on_time + off_time + HIGH_OFF_TIME)*1000;
 29a:	a5 01       	movw	r20, r10
 29c:	94 01       	movw	r18, r8
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	9f e3       	ldi	r25, 0x3F	; 63
 2a6:	0e 94 1b 02 	call	0x436	; 0x436 <__subsf3>
 2aa:	a3 01       	movw	r20, r6
 2ac:	92 01       	movw	r18, r4
 2ae:	0e 94 b7 03 	call	0x76e	; 0x76e <__mulsf3>
 2b2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixunssfsi>
 2b6:	6c 0d       	add	r22, r12
 2b8:	7d 1d       	adc	r23, r13
 2ba:	28 ee       	ldi	r18, 0xE8	; 232
 2bc:	33 e0       	ldi	r19, 0x03	; 3
 2be:	62 9f       	mul	r22, r18
 2c0:	c0 01       	movw	r24, r0
 2c2:	63 9f       	mul	r22, r19
 2c4:	90 0d       	add	r25, r0
 2c6:	72 9f       	mul	r23, r18
 2c8:	90 0d       	add	r25, r0
 2ca:	11 24       	eor	r1, r1
 2cc:	80 58       	subi	r24, 0x80	; 128
 2ce:	93 4d       	sbci	r25, 0xD3	; 211
 2d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = on_time*1000;
 2d8:	2c 9d       	mul	r18, r12
 2da:	c0 01       	movw	r24, r0
 2dc:	2d 9d       	mul	r18, r13
 2de:	90 0d       	add	r25, r0
 2e0:	3c 9d       	mul	r19, r12
 2e2:	90 0d       	add	r25, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	//Initialise timer interrupt
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
 2ee:	ef e6       	ldi	r30, 0x6F	; 111
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	86 60       	ori	r24, 0x06	; 6
 2f6:	80 83       	st	Z, r24
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	bf 90       	pop	r11
 306:	af 90       	pop	r10
 308:	9f 90       	pop	r9
 30a:	8f 90       	pop	r8
 30c:	7f 90       	pop	r7
 30e:	6f 90       	pop	r6
 310:	5f 90       	pop	r5
 312:	4f 90       	pop	r4
 314:	08 95       	ret

00000316 <__vector_14>:

ISR(TIMER0_COMPA_vect){	
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	8f 93       	push	r24
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0A);
 326:	ee e6       	ldi	r30, 0x6E	; 110
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	8d 7f       	andi	r24, 0xFD	; 253
 32e:	80 83       	st	Z, r24
	if(isNegative == false){
 330:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isNegative>
 334:	81 11       	cpse	r24, r1
 336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_14+0x26>
		SET_SW3;
 338:	5f 9a       	sbi	0x0b, 7	; 11
 33a:	01 c0       	rjmp	.+2      	; 0x33e <__vector_14+0x28>
	}
	else{
		SET_SW4;
 33c:	5e 9a       	sbi	0x0b, 6	; 11
	}

}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	8f 91       	pop	r24
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_11>:

ISR(TIMER1_COMPA_vect){
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	8f 93       	push	r24
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	if(isNegative == false){
 35e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isNegative>
 362:	81 11       	cpse	r24, r1
 364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_11+0x1c>
		CLR_SW4;
 366:	5e 98       	cbi	0x0b, 6	; 11
 368:	01 c0       	rjmp	.+2      	; 0x36c <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 36a:	5f 98       	cbi	0x0b, 7	; 11
	}
	TCNT0 = 0;
 36c:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE1B);
 36e:	ee e6       	ldi	r30, 0x6E	; 110
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	84 60       	ori	r24, 0x04	; 4
 376:	80 83       	st	Z, r24
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	8f 91       	pop	r24
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_15>:

ISR(TIMER0_COMPB_vect){
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	8f 93       	push	r24
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0B);
 398:	ee e6       	ldi	r30, 0x6E	; 110
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	8b 7f       	andi	r24, 0xFB	; 251
 3a0:	80 83       	st	Z, r24
	if(isNegative == false){
 3a2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isNegative>
 3a6:	81 11       	cpse	r24, r1
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <__vector_15+0x2c>
		SET_SW2;
 3aa:	5d 9a       	sbi	0x0b, 5	; 11
		isNegative = true;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <isNegative>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <__vector_15+0x32>
	}
	else{
		SET_SW1;
 3b4:	28 9a       	sbi	0x05, 0	; 5
		isNegative = false;
 3b6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <isNegative>
	}
	TCNT1 = 0;
 3ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	8f 91       	pop	r24
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	8f 93       	push	r24
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	if(isNegative == false){
 3e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isNegative>
 3e6:	81 11       	cpse	r24, r1
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__vector_12+0x1c>
		CLR_SW1;
 3ea:	28 98       	cbi	0x05, 0	; 5
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <__vector_12+0x1e>
	}
	else{
		CLR_SW2;
 3ee:	5d 98       	cbi	0x0b, 5	; 11
	}
	TCNT0 = 0;
 3f0:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);
 3f2:	ee e6       	ldi	r30, 0x6E	; 110
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	80 83       	st	Z, r24
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	8f 91       	pop	r24
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 40c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 410:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 414:	e1 ec       	ldi	r30, 0xC1	; 193
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	88 60       	ori	r24, 0x08	; 8
 41c:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 41e:	80 81       	ld	r24, Z
 420:	80 61       	ori	r24, 0x10	; 16
 422:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 424:	80 81       	ld	r24, Z
 426:	80 68       	ori	r24, 0x80	; 128
 428:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 42a:	e2 ec       	ldi	r30, 0xC2	; 194
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	86 60       	ori	r24, 0x06	; 6
 432:	80 83       	st	Z, r24
 434:	08 95       	ret

00000436 <__subsf3>:
 436:	50 58       	subi	r21, 0x80	; 128

00000438 <__addsf3>:
 438:	bb 27       	eor	r27, r27
 43a:	aa 27       	eor	r26, r26
 43c:	0e 94 33 02 	call	0x466	; 0x466 <__addsf3x>
 440:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_round>
 444:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_pscA>
 448:	38 f0       	brcs	.+14     	; 0x458 <__addsf3+0x20>
 44a:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fp_pscB>
 44e:	20 f0       	brcs	.+8      	; 0x458 <__addsf3+0x20>
 450:	39 f4       	brne	.+14     	; 0x460 <__addsf3+0x28>
 452:	9f 3f       	cpi	r25, 0xFF	; 255
 454:	19 f4       	brne	.+6      	; 0x45c <__addsf3+0x24>
 456:	26 f4       	brtc	.+8      	; 0x460 <__addsf3+0x28>
 458:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_nan>
 45c:	0e f4       	brtc	.+2      	; 0x460 <__addsf3+0x28>
 45e:	e0 95       	com	r30
 460:	e7 fb       	bst	r30, 7
 462:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_inf>

00000466 <__addsf3x>:
 466:	e9 2f       	mov	r30, r25
 468:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_split3>
 46c:	58 f3       	brcs	.-42     	; 0x444 <__addsf3+0xc>
 46e:	ba 17       	cp	r27, r26
 470:	62 07       	cpc	r22, r18
 472:	73 07       	cpc	r23, r19
 474:	84 07       	cpc	r24, r20
 476:	95 07       	cpc	r25, r21
 478:	20 f0       	brcs	.+8      	; 0x482 <__addsf3x+0x1c>
 47a:	79 f4       	brne	.+30     	; 0x49a <__addsf3x+0x34>
 47c:	a6 f5       	brtc	.+104    	; 0x4e6 <__addsf3x+0x80>
 47e:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_zero>
 482:	0e f4       	brtc	.+2      	; 0x486 <__addsf3x+0x20>
 484:	e0 95       	com	r30
 486:	0b 2e       	mov	r0, r27
 488:	ba 2f       	mov	r27, r26
 48a:	a0 2d       	mov	r26, r0
 48c:	0b 01       	movw	r0, r22
 48e:	b9 01       	movw	r22, r18
 490:	90 01       	movw	r18, r0
 492:	0c 01       	movw	r0, r24
 494:	ca 01       	movw	r24, r20
 496:	a0 01       	movw	r20, r0
 498:	11 24       	eor	r1, r1
 49a:	ff 27       	eor	r31, r31
 49c:	59 1b       	sub	r21, r25
 49e:	99 f0       	breq	.+38     	; 0x4c6 <__addsf3x+0x60>
 4a0:	59 3f       	cpi	r21, 0xF9	; 249
 4a2:	50 f4       	brcc	.+20     	; 0x4b8 <__addsf3x+0x52>
 4a4:	50 3e       	cpi	r21, 0xE0	; 224
 4a6:	68 f1       	brcs	.+90     	; 0x502 <__addsf3x+0x9c>
 4a8:	1a 16       	cp	r1, r26
 4aa:	f0 40       	sbci	r31, 0x00	; 0
 4ac:	a2 2f       	mov	r26, r18
 4ae:	23 2f       	mov	r18, r19
 4b0:	34 2f       	mov	r19, r20
 4b2:	44 27       	eor	r20, r20
 4b4:	58 5f       	subi	r21, 0xF8	; 248
 4b6:	f3 cf       	rjmp	.-26     	; 0x49e <__addsf3x+0x38>
 4b8:	46 95       	lsr	r20
 4ba:	37 95       	ror	r19
 4bc:	27 95       	ror	r18
 4be:	a7 95       	ror	r26
 4c0:	f0 40       	sbci	r31, 0x00	; 0
 4c2:	53 95       	inc	r21
 4c4:	c9 f7       	brne	.-14     	; 0x4b8 <__addsf3x+0x52>
 4c6:	7e f4       	brtc	.+30     	; 0x4e6 <__addsf3x+0x80>
 4c8:	1f 16       	cp	r1, r31
 4ca:	ba 0b       	sbc	r27, r26
 4cc:	62 0b       	sbc	r22, r18
 4ce:	73 0b       	sbc	r23, r19
 4d0:	84 0b       	sbc	r24, r20
 4d2:	ba f0       	brmi	.+46     	; 0x502 <__addsf3x+0x9c>
 4d4:	91 50       	subi	r25, 0x01	; 1
 4d6:	a1 f0       	breq	.+40     	; 0x500 <__addsf3x+0x9a>
 4d8:	ff 0f       	add	r31, r31
 4da:	bb 1f       	adc	r27, r27
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	c2 f7       	brpl	.-16     	; 0x4d4 <__addsf3x+0x6e>
 4e4:	0e c0       	rjmp	.+28     	; 0x502 <__addsf3x+0x9c>
 4e6:	ba 0f       	add	r27, r26
 4e8:	62 1f       	adc	r22, r18
 4ea:	73 1f       	adc	r23, r19
 4ec:	84 1f       	adc	r24, r20
 4ee:	48 f4       	brcc	.+18     	; 0x502 <__addsf3x+0x9c>
 4f0:	87 95       	ror	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f7 95       	ror	r31
 4fa:	9e 3f       	cpi	r25, 0xFE	; 254
 4fc:	08 f0       	brcs	.+2      	; 0x500 <__addsf3x+0x9a>
 4fe:	b0 cf       	rjmp	.-160    	; 0x460 <__addsf3+0x28>
 500:	93 95       	inc	r25
 502:	88 0f       	add	r24, r24
 504:	08 f0       	brcs	.+2      	; 0x508 <__addsf3x+0xa2>
 506:	99 27       	eor	r25, r25
 508:	ee 0f       	add	r30, r30
 50a:	97 95       	ror	r25
 50c:	87 95       	ror	r24
 50e:	08 95       	ret

00000510 <__divsf3>:
 510:	0e 94 9c 02 	call	0x538	; 0x538 <__divsf3x>
 514:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_round>
 518:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fp_pscB>
 51c:	58 f0       	brcs	.+22     	; 0x534 <__divsf3+0x24>
 51e:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_pscA>
 522:	40 f0       	brcs	.+16     	; 0x534 <__divsf3+0x24>
 524:	29 f4       	brne	.+10     	; 0x530 <__divsf3+0x20>
 526:	5f 3f       	cpi	r21, 0xFF	; 255
 528:	29 f0       	breq	.+10     	; 0x534 <__divsf3+0x24>
 52a:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_inf>
 52e:	51 11       	cpse	r21, r1
 530:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_szero>
 534:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_nan>

00000538 <__divsf3x>:
 538:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_split3>
 53c:	68 f3       	brcs	.-38     	; 0x518 <__divsf3+0x8>

0000053e <__divsf3_pse>:
 53e:	99 23       	and	r25, r25
 540:	b1 f3       	breq	.-20     	; 0x52e <__divsf3+0x1e>
 542:	55 23       	and	r21, r21
 544:	91 f3       	breq	.-28     	; 0x52a <__divsf3+0x1a>
 546:	95 1b       	sub	r25, r21
 548:	55 0b       	sbc	r21, r21
 54a:	bb 27       	eor	r27, r27
 54c:	aa 27       	eor	r26, r26
 54e:	62 17       	cp	r22, r18
 550:	73 07       	cpc	r23, r19
 552:	84 07       	cpc	r24, r20
 554:	38 f0       	brcs	.+14     	; 0x564 <__divsf3_pse+0x26>
 556:	9f 5f       	subi	r25, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	44 1f       	adc	r20, r20
 560:	aa 1f       	adc	r26, r26
 562:	a9 f3       	breq	.-22     	; 0x54e <__divsf3_pse+0x10>
 564:	35 d0       	rcall	.+106    	; 0x5d0 <__divsf3_pse+0x92>
 566:	0e 2e       	mov	r0, r30
 568:	3a f0       	brmi	.+14     	; 0x578 <__divsf3_pse+0x3a>
 56a:	e0 e8       	ldi	r30, 0x80	; 128
 56c:	32 d0       	rcall	.+100    	; 0x5d2 <__divsf3_pse+0x94>
 56e:	91 50       	subi	r25, 0x01	; 1
 570:	50 40       	sbci	r21, 0x00	; 0
 572:	e6 95       	lsr	r30
 574:	00 1c       	adc	r0, r0
 576:	ca f7       	brpl	.-14     	; 0x56a <__divsf3_pse+0x2c>
 578:	2b d0       	rcall	.+86     	; 0x5d0 <__divsf3_pse+0x92>
 57a:	fe 2f       	mov	r31, r30
 57c:	29 d0       	rcall	.+82     	; 0x5d0 <__divsf3_pse+0x92>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	bb 1f       	adc	r27, r27
 586:	26 17       	cp	r18, r22
 588:	37 07       	cpc	r19, r23
 58a:	48 07       	cpc	r20, r24
 58c:	ab 07       	cpc	r26, r27
 58e:	b0 e8       	ldi	r27, 0x80	; 128
 590:	09 f0       	breq	.+2      	; 0x594 <__divsf3_pse+0x56>
 592:	bb 0b       	sbc	r27, r27
 594:	80 2d       	mov	r24, r0
 596:	bf 01       	movw	r22, r30
 598:	ff 27       	eor	r31, r31
 59a:	93 58       	subi	r25, 0x83	; 131
 59c:	5f 4f       	sbci	r21, 0xFF	; 255
 59e:	3a f0       	brmi	.+14     	; 0x5ae <__divsf3_pse+0x70>
 5a0:	9e 3f       	cpi	r25, 0xFE	; 254
 5a2:	51 05       	cpc	r21, r1
 5a4:	78 f0       	brcs	.+30     	; 0x5c4 <__divsf3_pse+0x86>
 5a6:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_inf>
 5aa:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_szero>
 5ae:	5f 3f       	cpi	r21, 0xFF	; 255
 5b0:	e4 f3       	brlt	.-8      	; 0x5aa <__divsf3_pse+0x6c>
 5b2:	98 3e       	cpi	r25, 0xE8	; 232
 5b4:	d4 f3       	brlt	.-12     	; 0x5aa <__divsf3_pse+0x6c>
 5b6:	86 95       	lsr	r24
 5b8:	77 95       	ror	r23
 5ba:	67 95       	ror	r22
 5bc:	b7 95       	ror	r27
 5be:	f7 95       	ror	r31
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__divsf3_pse+0x78>
 5c4:	88 0f       	add	r24, r24
 5c6:	91 1d       	adc	r25, r1
 5c8:	96 95       	lsr	r25
 5ca:	87 95       	ror	r24
 5cc:	97 f9       	bld	r25, 7
 5ce:	08 95       	ret
 5d0:	e1 e0       	ldi	r30, 0x01	; 1
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	bb 1f       	adc	r27, r27
 5da:	62 17       	cp	r22, r18
 5dc:	73 07       	cpc	r23, r19
 5de:	84 07       	cpc	r24, r20
 5e0:	ba 07       	cpc	r27, r26
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <__divsf3_pse+0xae>
 5e4:	62 1b       	sub	r22, r18
 5e6:	73 0b       	sbc	r23, r19
 5e8:	84 0b       	sbc	r24, r20
 5ea:	ba 0b       	sbc	r27, r26
 5ec:	ee 1f       	adc	r30, r30
 5ee:	88 f7       	brcc	.-30     	; 0x5d2 <__divsf3_pse+0x94>
 5f0:	e0 95       	com	r30
 5f2:	08 95       	ret

000005f4 <__fixunssfsi>:
 5f4:	0e 94 96 03 	call	0x72c	; 0x72c <__fp_splitA>
 5f8:	88 f0       	brcs	.+34     	; 0x61c <__fixunssfsi+0x28>
 5fa:	9f 57       	subi	r25, 0x7F	; 127
 5fc:	98 f0       	brcs	.+38     	; 0x624 <__fixunssfsi+0x30>
 5fe:	b9 2f       	mov	r27, r25
 600:	99 27       	eor	r25, r25
 602:	b7 51       	subi	r27, 0x17	; 23
 604:	b0 f0       	brcs	.+44     	; 0x632 <__fixunssfsi+0x3e>
 606:	e1 f0       	breq	.+56     	; 0x640 <__fixunssfsi+0x4c>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	1a f0       	brmi	.+6      	; 0x618 <__fixunssfsi+0x24>
 612:	ba 95       	dec	r27
 614:	c9 f7       	brne	.-14     	; 0x608 <__fixunssfsi+0x14>
 616:	14 c0       	rjmp	.+40     	; 0x640 <__fixunssfsi+0x4c>
 618:	b1 30       	cpi	r27, 0x01	; 1
 61a:	91 f0       	breq	.+36     	; 0x640 <__fixunssfsi+0x4c>
 61c:	0e 94 b0 03 	call	0x760	; 0x760 <__fp_zero>
 620:	b1 e0       	ldi	r27, 0x01	; 1
 622:	08 95       	ret
 624:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_zero>
 628:	67 2f       	mov	r22, r23
 62a:	78 2f       	mov	r23, r24
 62c:	88 27       	eor	r24, r24
 62e:	b8 5f       	subi	r27, 0xF8	; 248
 630:	39 f0       	breq	.+14     	; 0x640 <__fixunssfsi+0x4c>
 632:	b9 3f       	cpi	r27, 0xF9	; 249
 634:	cc f3       	brlt	.-14     	; 0x628 <__fixunssfsi+0x34>
 636:	86 95       	lsr	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b3 95       	inc	r27
 63e:	d9 f7       	brne	.-10     	; 0x636 <__fixunssfsi+0x42>
 640:	3e f4       	brtc	.+14     	; 0x650 <__fixunssfsi+0x5c>
 642:	90 95       	com	r25
 644:	80 95       	com	r24
 646:	70 95       	com	r23
 648:	61 95       	neg	r22
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	8f 4f       	sbci	r24, 0xFF	; 255
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	08 95       	ret

00000652 <__floatunsisf>:
 652:	e8 94       	clt
 654:	09 c0       	rjmp	.+18     	; 0x668 <__floatsisf+0x12>

00000656 <__floatsisf>:
 656:	97 fb       	bst	r25, 7
 658:	3e f4       	brtc	.+14     	; 0x668 <__floatsisf+0x12>
 65a:	90 95       	com	r25
 65c:	80 95       	com	r24
 65e:	70 95       	com	r23
 660:	61 95       	neg	r22
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	99 23       	and	r25, r25
 66a:	a9 f0       	breq	.+42     	; 0x696 <__floatsisf+0x40>
 66c:	f9 2f       	mov	r31, r25
 66e:	96 e9       	ldi	r25, 0x96	; 150
 670:	bb 27       	eor	r27, r27
 672:	93 95       	inc	r25
 674:	f6 95       	lsr	r31
 676:	87 95       	ror	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b7 95       	ror	r27
 67e:	f1 11       	cpse	r31, r1
 680:	f8 cf       	rjmp	.-16     	; 0x672 <__floatsisf+0x1c>
 682:	fa f4       	brpl	.+62     	; 0x6c2 <__floatsisf+0x6c>
 684:	bb 0f       	add	r27, r27
 686:	11 f4       	brne	.+4      	; 0x68c <__floatsisf+0x36>
 688:	60 ff       	sbrs	r22, 0
 68a:	1b c0       	rjmp	.+54     	; 0x6c2 <__floatsisf+0x6c>
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	16 c0       	rjmp	.+44     	; 0x6c2 <__floatsisf+0x6c>
 696:	88 23       	and	r24, r24
 698:	11 f0       	breq	.+4      	; 0x69e <__floatsisf+0x48>
 69a:	96 e9       	ldi	r25, 0x96	; 150
 69c:	11 c0       	rjmp	.+34     	; 0x6c0 <__floatsisf+0x6a>
 69e:	77 23       	and	r23, r23
 6a0:	21 f0       	breq	.+8      	; 0x6aa <__floatsisf+0x54>
 6a2:	9e e8       	ldi	r25, 0x8E	; 142
 6a4:	87 2f       	mov	r24, r23
 6a6:	76 2f       	mov	r23, r22
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <__floatsisf+0x5e>
 6aa:	66 23       	and	r22, r22
 6ac:	71 f0       	breq	.+28     	; 0x6ca <__floatsisf+0x74>
 6ae:	96 e8       	ldi	r25, 0x86	; 134
 6b0:	86 2f       	mov	r24, r22
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	2a f0       	brmi	.+10     	; 0x6c2 <__floatsisf+0x6c>
 6b8:	9a 95       	dec	r25
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	da f7       	brpl	.-10     	; 0x6b8 <__floatsisf+0x62>
 6c2:	88 0f       	add	r24, r24
 6c4:	96 95       	lsr	r25
 6c6:	87 95       	ror	r24
 6c8:	97 f9       	bld	r25, 7
 6ca:	08 95       	ret

000006cc <__fp_inf>:
 6cc:	97 f9       	bld	r25, 7
 6ce:	9f 67       	ori	r25, 0x7F	; 127
 6d0:	80 e8       	ldi	r24, 0x80	; 128
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	08 95       	ret

000006d8 <__fp_nan>:
 6d8:	9f ef       	ldi	r25, 0xFF	; 255
 6da:	80 ec       	ldi	r24, 0xC0	; 192
 6dc:	08 95       	ret

000006de <__fp_pscA>:
 6de:	00 24       	eor	r0, r0
 6e0:	0a 94       	dec	r0
 6e2:	16 16       	cp	r1, r22
 6e4:	17 06       	cpc	r1, r23
 6e6:	18 06       	cpc	r1, r24
 6e8:	09 06       	cpc	r0, r25
 6ea:	08 95       	ret

000006ec <__fp_pscB>:
 6ec:	00 24       	eor	r0, r0
 6ee:	0a 94       	dec	r0
 6f0:	12 16       	cp	r1, r18
 6f2:	13 06       	cpc	r1, r19
 6f4:	14 06       	cpc	r1, r20
 6f6:	05 06       	cpc	r0, r21
 6f8:	08 95       	ret

000006fa <__fp_round>:
 6fa:	09 2e       	mov	r0, r25
 6fc:	03 94       	inc	r0
 6fe:	00 0c       	add	r0, r0
 700:	11 f4       	brne	.+4      	; 0x706 <__fp_round+0xc>
 702:	88 23       	and	r24, r24
 704:	52 f0       	brmi	.+20     	; 0x71a <__fp_round+0x20>
 706:	bb 0f       	add	r27, r27
 708:	40 f4       	brcc	.+16     	; 0x71a <__fp_round+0x20>
 70a:	bf 2b       	or	r27, r31
 70c:	11 f4       	brne	.+4      	; 0x712 <__fp_round+0x18>
 70e:	60 ff       	sbrs	r22, 0
 710:	04 c0       	rjmp	.+8      	; 0x71a <__fp_round+0x20>
 712:	6f 5f       	subi	r22, 0xFF	; 255
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__fp_split3>:
 71c:	57 fd       	sbrc	r21, 7
 71e:	90 58       	subi	r25, 0x80	; 128
 720:	44 0f       	add	r20, r20
 722:	55 1f       	adc	r21, r21
 724:	59 f0       	breq	.+22     	; 0x73c <__fp_splitA+0x10>
 726:	5f 3f       	cpi	r21, 0xFF	; 255
 728:	71 f0       	breq	.+28     	; 0x746 <__fp_splitA+0x1a>
 72a:	47 95       	ror	r20

0000072c <__fp_splitA>:
 72c:	88 0f       	add	r24, r24
 72e:	97 fb       	bst	r25, 7
 730:	99 1f       	adc	r25, r25
 732:	61 f0       	breq	.+24     	; 0x74c <__fp_splitA+0x20>
 734:	9f 3f       	cpi	r25, 0xFF	; 255
 736:	79 f0       	breq	.+30     	; 0x756 <__fp_splitA+0x2a>
 738:	87 95       	ror	r24
 73a:	08 95       	ret
 73c:	12 16       	cp	r1, r18
 73e:	13 06       	cpc	r1, r19
 740:	14 06       	cpc	r1, r20
 742:	55 1f       	adc	r21, r21
 744:	f2 cf       	rjmp	.-28     	; 0x72a <__fp_split3+0xe>
 746:	46 95       	lsr	r20
 748:	f1 df       	rcall	.-30     	; 0x72c <__fp_splitA>
 74a:	08 c0       	rjmp	.+16     	; 0x75c <__fp_splitA+0x30>
 74c:	16 16       	cp	r1, r22
 74e:	17 06       	cpc	r1, r23
 750:	18 06       	cpc	r1, r24
 752:	99 1f       	adc	r25, r25
 754:	f1 cf       	rjmp	.-30     	; 0x738 <__fp_splitA+0xc>
 756:	86 95       	lsr	r24
 758:	71 05       	cpc	r23, r1
 75a:	61 05       	cpc	r22, r1
 75c:	08 94       	sec
 75e:	08 95       	ret

00000760 <__fp_zero>:
 760:	e8 94       	clt

00000762 <__fp_szero>:
 762:	bb 27       	eor	r27, r27
 764:	66 27       	eor	r22, r22
 766:	77 27       	eor	r23, r23
 768:	cb 01       	movw	r24, r22
 76a:	97 f9       	bld	r25, 7
 76c:	08 95       	ret

0000076e <__mulsf3>:
 76e:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3x>
 772:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_round>
 776:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_pscA>
 77a:	38 f0       	brcs	.+14     	; 0x78a <__mulsf3+0x1c>
 77c:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fp_pscB>
 780:	20 f0       	brcs	.+8      	; 0x78a <__mulsf3+0x1c>
 782:	95 23       	and	r25, r21
 784:	11 f0       	breq	.+4      	; 0x78a <__mulsf3+0x1c>
 786:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_inf>
 78a:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_nan>
 78e:	11 24       	eor	r1, r1
 790:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_szero>

00000794 <__mulsf3x>:
 794:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_split3>
 798:	70 f3       	brcs	.-36     	; 0x776 <__mulsf3+0x8>

0000079a <__mulsf3_pse>:
 79a:	95 9f       	mul	r25, r21
 79c:	c1 f3       	breq	.-16     	; 0x78e <__mulsf3+0x20>
 79e:	95 0f       	add	r25, r21
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	55 1f       	adc	r21, r21
 7a4:	62 9f       	mul	r22, r18
 7a6:	f0 01       	movw	r30, r0
 7a8:	72 9f       	mul	r23, r18
 7aa:	bb 27       	eor	r27, r27
 7ac:	f0 0d       	add	r31, r0
 7ae:	b1 1d       	adc	r27, r1
 7b0:	63 9f       	mul	r22, r19
 7b2:	aa 27       	eor	r26, r26
 7b4:	f0 0d       	add	r31, r0
 7b6:	b1 1d       	adc	r27, r1
 7b8:	aa 1f       	adc	r26, r26
 7ba:	64 9f       	mul	r22, r20
 7bc:	66 27       	eor	r22, r22
 7be:	b0 0d       	add	r27, r0
 7c0:	a1 1d       	adc	r26, r1
 7c2:	66 1f       	adc	r22, r22
 7c4:	82 9f       	mul	r24, r18
 7c6:	22 27       	eor	r18, r18
 7c8:	b0 0d       	add	r27, r0
 7ca:	a1 1d       	adc	r26, r1
 7cc:	62 1f       	adc	r22, r18
 7ce:	73 9f       	mul	r23, r19
 7d0:	b0 0d       	add	r27, r0
 7d2:	a1 1d       	adc	r26, r1
 7d4:	62 1f       	adc	r22, r18
 7d6:	83 9f       	mul	r24, r19
 7d8:	a0 0d       	add	r26, r0
 7da:	61 1d       	adc	r22, r1
 7dc:	22 1f       	adc	r18, r18
 7de:	74 9f       	mul	r23, r20
 7e0:	33 27       	eor	r19, r19
 7e2:	a0 0d       	add	r26, r0
 7e4:	61 1d       	adc	r22, r1
 7e6:	23 1f       	adc	r18, r19
 7e8:	84 9f       	mul	r24, r20
 7ea:	60 0d       	add	r22, r0
 7ec:	21 1d       	adc	r18, r1
 7ee:	82 2f       	mov	r24, r18
 7f0:	76 2f       	mov	r23, r22
 7f2:	6a 2f       	mov	r22, r26
 7f4:	11 24       	eor	r1, r1
 7f6:	9f 57       	subi	r25, 0x7F	; 127
 7f8:	50 40       	sbci	r21, 0x00	; 0
 7fa:	9a f0       	brmi	.+38     	; 0x822 <__mulsf3_pse+0x88>
 7fc:	f1 f0       	breq	.+60     	; 0x83a <__mulsf3_pse+0xa0>
 7fe:	88 23       	and	r24, r24
 800:	4a f0       	brmi	.+18     	; 0x814 <__mulsf3_pse+0x7a>
 802:	ee 0f       	add	r30, r30
 804:	ff 1f       	adc	r31, r31
 806:	bb 1f       	adc	r27, r27
 808:	66 1f       	adc	r22, r22
 80a:	77 1f       	adc	r23, r23
 80c:	88 1f       	adc	r24, r24
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	50 40       	sbci	r21, 0x00	; 0
 812:	a9 f7       	brne	.-22     	; 0x7fe <__mulsf3_pse+0x64>
 814:	9e 3f       	cpi	r25, 0xFE	; 254
 816:	51 05       	cpc	r21, r1
 818:	80 f0       	brcs	.+32     	; 0x83a <__mulsf3_pse+0xa0>
 81a:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_inf>
 81e:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_szero>
 822:	5f 3f       	cpi	r21, 0xFF	; 255
 824:	e4 f3       	brlt	.-8      	; 0x81e <__mulsf3_pse+0x84>
 826:	98 3e       	cpi	r25, 0xE8	; 232
 828:	d4 f3       	brlt	.-12     	; 0x81e <__mulsf3_pse+0x84>
 82a:	86 95       	lsr	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	e7 95       	ror	r30
 836:	9f 5f       	subi	r25, 0xFF	; 255
 838:	c1 f7       	brne	.-16     	; 0x82a <__mulsf3_pse+0x90>
 83a:	fe 2b       	or	r31, r30
 83c:	88 0f       	add	r24, r24
 83e:	91 1d       	adc	r25, r1
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <_exit>:
 848:	f8 94       	cli

0000084a <__stop_program>:
 84a:	ff cf       	rjmp	.-2      	; 0x84a <__stop_program>
