
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000939  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ba  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f9  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000463  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000147  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
//Test variables 
volatile uint8_t received_byte = 0;
volatile uint8_t new_byte = false;

//This is the ISR for UART receive
ISR(USART_RX_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
// 
// 	if(net_brackets > 0){
// 		received_message[message_index] = tmp;
// 		message_index++;
// 	}
	while(!RECEIVE_COMPLETE);
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 23       	and	r24, r24
  a8:	ec f7       	brge	.-6      	; 0xa4 <__vector_18+0x14>
	received_byte = UDR0;
  aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <received_byte>
	new_byte = true;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	//uart_flush();
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:

int main(void)
{
	uint8_t old_byte = 0;
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
  c8:	83 e3       	ldi	r24, 0x33	; 51
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 7d 00 	call	0xfa	; 0xfa <uart_initiate>

	//Enable Global interrupts
	sei();
  d0:	78 94       	sei
	//uart_flush();
}

int main(void)
{
	uint8_t old_byte = 0;
  d2:	c0 e0       	ldi	r28, 0x00	; 0
	//Enable Global interrupts
	sei();

    while (1){

		if(new_byte == true){
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0xc>
			new_byte = false;
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			//uart_flush();
			//UCSR0B &= ~(1 << RXEN0);
			if(old_byte != received_byte){
  e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <received_byte>
  e4:	c8 17       	cp	r28, r24
  e6:	21 f0       	breq	.+8      	; 0xf0 <main+0x28>
				uart_transmit_byte(received_byte);
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <received_byte>
  ec:	0e 94 9b 00 	call	0x136	; 0x136 <uart_transmit_byte>
			}
			old_byte = received_byte;
  f0:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <received_byte>
			uart_flush();
  f4:	0e 94 92 00 	call	0x124	; 0x124 <uart_flush>
  f8:	ed cf       	rjmp	.-38     	; 0xd4 <main+0xc>

000000fa <uart_initiate>:
	while(message[i] != '\0'){
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
  fa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 102:	e1 ec       	ldi	r30, 0xC1	; 193
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	80 83       	st	Z, r24
 10c:	80 81       	ld	r24, Z
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	80 83       	st	Z, r24
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
 118:	e2 ec       	ldi	r30, 0xC2	; 194
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <uart_flush>:

//This function flushes the UART buffer
void uart_flush(void){
	UCSR0B &= ~(1 << RXEN0);
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	8f 7e       	andi	r24, 0xEF	; 239
 12c:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0);
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <uart_transmit_byte>:
}

//test function
void uart_transmit_byte(uint8_t byte){
	while((UCSR0A & 0x20) == 0){
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	95 ff       	sbrs	r25, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <uart_transmit_byte+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	ef e1       	ldi	r30, 0x1F	; 31
 142:	fe e4       	ldi	r31, 0x4E	; 78
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <uart_transmit_byte+0xe>
 148:	00 c0       	rjmp	.+0      	; 0x14a <uart_transmit_byte+0x14>
 14a:	00 00       	nop
		;
	}
	_delay_ms(10);
	UDR0 = byte;
 14c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
