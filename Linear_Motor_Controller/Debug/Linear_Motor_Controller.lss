
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000c30  00000cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000115  00800148  00800148  00000d0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f2c  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaa  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be0  00000000  00000000  00003832  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00004414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e5  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001218  00000000  00000000  00004c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005e9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_7>
  20:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_8>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_11>
  30:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 35       	cpi	r26, 0x5D	; 93
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  9e:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_initiate>:

 #include "includes.h"

 void adc_initiate(){
 	//Set ADC prescalar
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
 
 	//Select AVcc reference
	//ADMUX |= (1 << REFS0);

	//Enable ADC
	ADCSRA |= (1 << ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//ADMUX |= (1 << ADLAR);
	
	//Enable ADC interrupt
	ADCSRA |= (1 << ADIE);
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	//Enable ADC auto trigger
	ADCSRA |= (1 << ADATE);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	//Set timer 0 prescalar to 64
	//TCCR0B |= (1 << CS00) | (1 << CS01);

	//Enable conversion 

	ADMUX |= (1 << MUX0);
  c2:	ac e7       	ldi	r26, 0x7C	; 124
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	8c 91       	ld	r24, X
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8c 93       	st	X, r24

	ADCSRA |= (1 << ADSC);
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <adc_start>:
 void adc_start(float* operating_frequency){
// 
// 	OCR0A = 200;//(uint8_t)(F_CPU/(64.0 * (float)SAMPLING_SIZE * (*operating_frequency)));
// 	TIMSK0 |= (1 << OCIE0A);
// 	TCNT0 = 0;
	compA_count = 0;
  d4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <compA_count>
  d8:	08 95       	ret

000000da <__vector_21>:
// 	ADCSRA |= (1 << ADSC);
// 	compA_count++;
// 	TCNT0 = 0;
//  }

 ISR(ADC_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	if(!testvalue){
  e8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <testvalue>
  ec:	81 11       	cpse	r24, r1
  ee:	0b c0       	rjmp	.+22     	; 0x106 <__vector_21+0x2c>
		testadcvalue = ADC;
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  f8:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <testadcvalue+0x1>
  fc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <testadcvalue>
		testvalue = true;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <testvalue>
// 			compA_count = 0;
// 		} else {
// 			ADCSRA |= (1<<ADATE);
// 		}

}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	char tmp = UDR0; 
 126:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
 12a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <message_complete>
 12e:	91 11       	cpse	r25, r1
 130:	47 c0       	rjmp	.+142    	; 0x1c0 <__vector_18+0xac>
		if(tmp == '{'){
 132:	8b 37       	cpi	r24, 0x7B	; 123
 134:	49 f4       	brne	.+18     	; 0x148 <__vector_18+0x34>
			net_brackets++;
 136:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 13a:	9f 5f       	subi	r25, 0xFF	; 255
 13c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			message_start = true;
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__data_end>
 146:	12 c0       	rjmp	.+36     	; 0x16c <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
 148:	8d 37       	cpi	r24, 0x7D	; 125
 14a:	81 f4       	brne	.+32     	; 0x16c <__vector_18+0x58>
 14c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 150:	91 30       	cpi	r25, 0x01	; 1
 152:	61 f4       	brne	.+24     	; 0x16c <__vector_18+0x58>
			net_brackets--;
 154:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			if(net_brackets == 0){
 15e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 162:	91 11       	cpse	r25, r1
 164:	03 c0       	rjmp	.+6      	; 0x16c <__vector_18+0x58>
				message_complete = true;
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <message_complete>
			}
		}

		if(message_start == true){
 16c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 170:	91 30       	cpi	r25, 0x01	; 1
 172:	a9 f4       	brne	.+42     	; 0x19e <__vector_18+0x8a>
			received_message[message_index] = tmp;
 174:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e4 5a       	subi	r30, 0xA4	; 164
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	80 83       	st	Z, r24
			message_index++;
 180:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <message_index>
			if(message_complete == true){
 18a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	31 f4       	brne	.+12     	; 0x19e <__vector_18+0x8a>
				received_message[message_index] = '\0';
 192:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e4 5a       	subi	r30, 0xA4	; 164
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 19e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 1a2:	8e 3f       	cpi	r24, 0xFE	; 254
 1a4:	21 f0       	breq	.+8      	; 0x1ae <__vector_18+0x9a>
 1a6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <net_brackets>
 1aa:	84 30       	cpi	r24, 0x04	; 4
 1ac:	48 f0       	brcs	.+18     	; 0x1c0 <__vector_18+0xac>
			receive_error = true;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <receive_error>
			message_start = false;
 1b4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_complete = false;
 1b8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_index = 0;
 1bc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
		}
	}
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <main>:

int main(void)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0x6>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <main+0x8>
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 1e0:	83 e3       	ldi	r24, 0x33	; 51
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 a3 03 	call	0x746	; 0x746 <uart_initiate>

	//Enable Global interrupts
	sei();
 1e8:	78 94       	sei

	*frequency = 12.5;
 1ea:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <frequency>
 1ee:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <frequency+0x1>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	a8 e4       	ldi	r26, 0x48	; 72
 1f8:	b1 e4       	ldi	r27, 0x41	; 65
 1fa:	80 83       	st	Z, r24
 1fc:	91 83       	std	Z+1, r25	; 0x01
 1fe:	a2 83       	std	Z+2, r26	; 0x02
 200:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 150;
 202:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <mfc>
 206:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <mfc+0x1>
 20a:	86 e9       	ldi	r24, 0x96	; 150
 20c:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 20e:	0e 94 01 02 	call	0x402	; 0x402 <driver_timer_initiate>
	//set_parameters(*frequency, *mfc);
	soft_start(*frequency, *mfc);
 212:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <mfc>
 216:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <mfc+0x1>
 21a:	40 81       	ld	r20, Z
 21c:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <frequency>
 220:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <frequency+0x1>
 224:	60 81       	ld	r22, Z
 226:	71 81       	ldd	r23, Z+1	; 0x01
 228:	82 81       	ldd	r24, Z+2	; 0x02
 22a:	93 81       	ldd	r25, Z+3	; 0x03
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	0e 94 b9 02 	call	0x572	; 0x572 <soft_start>

	adc_initiate();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_initiate>
	adc_start((float*)frequency);
 236:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <frequency>
 23a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <frequency+0x1>
 23e:	0e 94 6a 00 	call	0xd4	; 0xd4 <adc_start>

    while (1){
		if(testvalue){
			uint16_t tmp = testadcvalue;
			uint8_t thousands = (tmp/1000) + 48;
			uint8_t hundreds = ((tmp%1000)/100) + 48;
 242:	0f 2e       	mov	r0, r31
 244:	f8 ee       	ldi	r31, 0xE8	; 232
 246:	ef 2e       	mov	r14, r31
 248:	f3 e0       	ldi	r31, 0x03	; 3
 24a:	ff 2e       	mov	r15, r31
 24c:	f0 2d       	mov	r31, r0
			uint8_t tens = (((tmp%1000)%100)/10) + 48;
 24e:	0f 2e       	mov	r0, r31
 250:	f4 e6       	ldi	r31, 0x64	; 100
 252:	df 2e       	mov	r13, r31
 254:	f0 2d       	mov	r31, r0
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 256:	01 ec       	ldi	r16, 0xC1	; 193
 258:	10 e0       	ldi	r17, 0x00	; 0

	adc_initiate();
	adc_start((float*)frequency);

    while (1){
		if(testvalue){
 25a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <testvalue>
 25e:	88 23       	and	r24, r24
 260:	09 f4       	brne	.+2      	; 0x264 <main+0x92>
 262:	7d c0       	rjmp	.+250    	; 0x35e <main+0x18c>
			uint16_t tmp = testadcvalue;
 264:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <testadcvalue>
 268:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <testadcvalue+0x1>
			uint8_t thousands = (tmp/1000) + 48;
			uint8_t hundreds = ((tmp%1000)/100) + 48;
 26c:	4a 01       	movw	r8, r20
 26e:	96 94       	lsr	r9
 270:	87 94       	ror	r8
 272:	96 94       	lsr	r9
 274:	87 94       	ror	r8
 276:	96 94       	lsr	r9
 278:	87 94       	ror	r8
 27a:	94 01       	movw	r18, r8
 27c:	a5 ec       	ldi	r26, 0xC5	; 197
 27e:	b0 e2       	ldi	r27, 0x20	; 32
 280:	0e 94 07 06 	call	0xc0e	; 0xc0e <__umulhisi3>
 284:	fc 01       	movw	r30, r24
 286:	f2 95       	swap	r31
 288:	e2 95       	swap	r30
 28a:	ef 70       	andi	r30, 0x0F	; 15
 28c:	ef 27       	eor	r30, r31
 28e:	ff 70       	andi	r31, 0x0F	; 15
 290:	ef 27       	eor	r30, r31
 292:	ee 9d       	mul	r30, r14
 294:	c0 01       	movw	r24, r0
 296:	ef 9d       	mul	r30, r15
 298:	90 0d       	add	r25, r0
 29a:	fe 9d       	mul	r31, r14
 29c:	90 0d       	add	r25, r0
 29e:	11 24       	eor	r1, r1
 2a0:	fa 01       	movw	r30, r20
 2a2:	e8 1b       	sub	r30, r24
 2a4:	f9 0b       	sbc	r31, r25
			uint8_t tens = (((tmp%1000)%100)/10) + 48;
 2a6:	5f 01       	movw	r10, r30
 2a8:	b6 94       	lsr	r11
 2aa:	a7 94       	ror	r10
 2ac:	b6 94       	lsr	r11
 2ae:	a7 94       	ror	r10
 2b0:	95 01       	movw	r18, r10
 2b2:	ab e7       	ldi	r26, 0x7B	; 123
 2b4:	b4 e1       	ldi	r27, 0x14	; 20
 2b6:	0e 94 07 06 	call	0xc0e	; 0xc0e <__umulhisi3>
 2ba:	ac 01       	movw	r20, r24
 2bc:	56 95       	lsr	r21
 2be:	47 95       	ror	r20
 2c0:	d4 9e       	mul	r13, r20
 2c2:	c0 01       	movw	r24, r0
 2c4:	d5 9e       	mul	r13, r21
 2c6:	90 0d       	add	r25, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	af 01       	movw	r20, r30
 2cc:	48 1b       	sub	r20, r24
 2ce:	59 0b       	sbc	r21, r25
			uint8_t ones = ((((tmp%1000)%100)%10)) + 48;
			char array[5];
			array[0] = thousands;
 2d0:	94 01       	movw	r18, r8
 2d2:	a5 ec       	ldi	r26, 0xC5	; 197
 2d4:	b0 e2       	ldi	r27, 0x20	; 32
 2d6:	0e 94 07 06 	call	0xc0e	; 0xc0e <__umulhisi3>
 2da:	92 95       	swap	r25
 2dc:	82 95       	swap	r24
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	89 27       	eor	r24, r25
 2e2:	9f 70       	andi	r25, 0x0F	; 15
 2e4:	89 27       	eor	r24, r25
 2e6:	80 5d       	subi	r24, 0xD0	; 208
 2e8:	89 83       	std	Y+1, r24	; 0x01
			array[1] = hundreds;
 2ea:	95 01       	movw	r18, r10
 2ec:	ab e7       	ldi	r26, 0x7B	; 123
 2ee:	b4 e1       	ldi	r27, 0x14	; 20
 2f0:	0e 94 07 06 	call	0xc0e	; 0xc0e <__umulhisi3>
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	80 5d       	subi	r24, 0xD0	; 208
 2fa:	8a 83       	std	Y+2, r24	; 0x02
			array[2] = tens;
 2fc:	9a 01       	movw	r18, r20
 2fe:	ad ec       	ldi	r26, 0xCD	; 205
 300:	bc ec       	ldi	r27, 0xCC	; 204
 302:	0e 94 07 06 	call	0xc0e	; 0xc0e <__umulhisi3>
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	20 e3       	ldi	r18, 0x30	; 48
 314:	28 0f       	add	r18, r24
 316:	2b 83       	std	Y+3, r18	; 0x03
			array[3] = ones;
 318:	9c 01       	movw	r18, r24
 31a:	22 0f       	add	r18, r18
 31c:	33 1f       	adc	r19, r19
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	82 0f       	add	r24, r18
 32c:	93 1f       	adc	r25, r19
 32e:	48 1b       	sub	r20, r24
 330:	59 0b       	sbc	r21, r25
 332:	40 5d       	subi	r20, 0xD0	; 208
 334:	4c 83       	std	Y+4, r20	; 0x04
			array[4] = '\0';
 336:	1d 82       	std	Y+5, r1	; 0x05
			uart_transmit(array);
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
			uart_transmit("\n\r");
 340:	84 e4       	ldi	r24, 0x44	; 68
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
			testvalue = false;
 348:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <testvalue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	81 ee       	ldi	r24, 0xE1	; 225
 350:	94 e0       	ldi	r25, 0x04	; 4
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x180>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x18a>
 35c:	00 00       	nop

		#ifdef SITH
			project_skywalker();
		#endif
		
		if(message_complete == true){
 35e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	91 f5       	brne	.+100    	; 0x3ca <main+0x1f8>
			UCSR0B &= ~(1 << RXEN0);
 366:	f8 01       	movw	r30, r16
 368:	80 81       	ld	r24, Z
 36a:	8f 7e       	andi	r24, 0xEF	; 239
 36c:	80 83       	st	Z, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
			uart_transmit((char*)received_message);
 376:	8c e5       	ldi	r24, 0x5C	; 92
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 37e:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <mfc>
 382:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <mfc+0x1>
 386:	8c e5       	ldi	r24, 0x5C	; 92
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 ce 03 	call	0x79c	; 0x79c <process_message>
			set_parameters(*frequency, *mfc);
 38e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <mfc>
 392:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <mfc+0x1>
 396:	40 81       	ld	r20, Z
 398:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <frequency>
 39c:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <frequency+0x1>
 3a0:	60 81       	ld	r22, Z
 3a2:	71 81       	ldd	r23, Z+1	; 0x01
 3a4:	82 81       	ldd	r24, Z+2	; 0x02
 3a6:	93 81       	ldd	r25, Z+3	; 0x03
 3a8:	0e 94 1f 02 	call	0x43e	; 0x43e <set_parameters>
			uart_transmit("\n\r");
 3ac:	84 e4       	ldi	r24, 0x44	; 68
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
			message_complete = false;
 3b4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_start = false;
 3b8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_index = 0;
 3bc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
			UCSR0B |= (1 << RXEN0);
 3c0:	f8 01       	movw	r30, r16
 3c2:	80 81       	ld	r24, Z
 3c4:	80 61       	ori	r24, 0x10	; 16
 3c6:	80 83       	st	Z, r24
 3c8:	48 cf       	rjmp	.-368    	; 0x25a <main+0x88>
		}
		else if(receive_error == true){
 3ca:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receive_error>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <main+0x202>
 3d2:	43 cf       	rjmp	.-378    	; 0x25a <main+0x88>
			UCSR0B &= ~(1 << RXEN0);
 3d4:	f8 01       	movw	r30, r16
 3d6:	80 81       	ld	r24, Z
 3d8:	8f 7e       	andi	r24, 0xEF	; 239
 3da:	80 83       	st	Z, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 3e4:	89 e1       	ldi	r24, 0x19	; 25
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
			receive_error = false;
 3ec:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <receive_error>
			message_start = false;
 3f0:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			net_brackets = 0;
 3f4:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <net_brackets>
			UCSR0B |= (1 << RXEN0);
 3f8:	f8 01       	movw	r30, r16
 3fa:	80 81       	ld	r24, Z
 3fc:	80 61       	ori	r24, 0x10	; 16
 3fe:	80 83       	st	Z, r24
 400:	2c cf       	rjmp	.-424    	; 0x25a <main+0x88>

00000402 <driver_timer_initiate>:
 #define SET_SW4 PORTD |= (1 << PD6)
 #define CLR_SW4 PORTD &= ~(1 << PD6) 

 void driver_timer_initiate(void){
	//Timer 1 8bit (no prescalar)
	TCCR2B |= (1 << CS20);
 402:	e1 eb       	ldi	r30, 0xB1	; 177
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	81 60       	ori	r24, 0x01	; 1
 40a:	80 83       	st	Z, r24
	OCR2A = HIGH_OFF_TIME_COUNT_VALUE;
 40c:	80 e4       	ldi	r24, 0x40	; 64
 40e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = LOW_OFF_TIME_COUNT_VALUE;
 412:	80 e1       	ldi	r24, 0x10	; 16
 414:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	//Timer 2 16bit (8 prescalar)
	TCCR1B |= (1 << CS11);
 418:	e1 e8       	ldi	r30, 0x81	; 129
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	80 83       	st	Z, r24

	//Set pins to output
	DDRB |= (1 << DDB0);
 422:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
 424:	8a b1       	in	r24, 0x0a	; 10
 426:	80 6e       	ori	r24, 0xE0	; 224
 428:	8a b9       	out	0x0a, r24	; 10

	//Set initial switches
	SET_SW1;
 42a:	28 9a       	sbi	0x05, 0	; 5
	SET_SW4;
 42c:	5e 9a       	sbi	0x0b, 6	; 11
	CLR_SW2;
 42e:	5d 98       	cbi	0x0b, 5	; 11
	CLR_SW3;
 430:	5f 98       	cbi	0x0b, 7	; 11

	change_duty = false;
 432:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <change_duty>
	first_cycle = true;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <first_cycle>
 43c:	08 95       	ret

0000043e <set_parameters>:
 }

 void set_parameters(float frequency, uint8_t mfc){
 43e:	4f 92       	push	r4
 440:	5f 92       	push	r5
 442:	6f 92       	push	r6
 444:	7f 92       	push	r7
 446:	8f 92       	push	r8
 448:	9f 92       	push	r9
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	6b 01       	movw	r12, r22
 458:	7c 01       	movw	r14, r24
	mfr = (int)mfc;
 45a:	84 2f       	mov	r24, r20
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <mfr+0x1>
 462:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <mfr>
	float duty_cycle = (float)mfc/255;
 466:	64 2f       	mov	r22, r20
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 0c 05 	call	0xa18	; 0xa18 <__floatunsisf>
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	4f e7       	ldi	r20, 0x7F	; 127
 478:	53 e4       	ldi	r21, 0x43	; 67
 47a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__divsf3>
 47e:	2b 01       	movw	r4, r22
 480:	3c 01       	movw	r6, r24
	float off_time = ((1000/(2*(frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(1-duty_cycle);
 482:	a7 01       	movw	r20, r14
 484:	96 01       	movw	r18, r12
 486:	c7 01       	movw	r24, r14
 488:	b6 01       	movw	r22, r12
 48a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__addsf3>
 48e:	9b 01       	movw	r18, r22
 490:	ac 01       	movw	r20, r24
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	8a e7       	ldi	r24, 0x7A	; 122
 498:	94 e4       	ldi	r25, 0x44	; 68
 49a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__divsf3>
 49e:	4b 01       	movw	r8, r22
 4a0:	5c 01       	movw	r10, r24
	float on_time = ((1000/(2*(frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(duty_cycle);
 4a2:	9b 01       	movw	r18, r22
 4a4:	ac 01       	movw	r20, r24
 4a6:	c3 01       	movw	r24, r6
 4a8:	b2 01       	movw	r22, r4
 4aa:	0e 94 9a 05 	call	0xb34	; 0xb34 <__mulsf3>
 4ae:	6b 01       	movw	r12, r22
 4b0:	7c 01       	movw	r14, r24

	//Set T1 Compare
	t1_compare_a = (uint16_t)((on_time+off_time+HIGH_OFF_TIME/1000)*1000);
 4b2:	a3 01       	movw	r20, r6
 4b4:	92 01       	movw	r18, r4
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	80 e8       	ldi	r24, 0x80	; 128
 4bc:	9f e3       	ldi	r25, 0x3F	; 63
 4be:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__subsf3>
 4c2:	a5 01       	movw	r20, r10
 4c4:	94 01       	movw	r18, r8
 4c6:	0e 94 9a 05 	call	0xb34	; 0xb34 <__mulsf3>
 4ca:	a7 01       	movw	r20, r14
 4cc:	96 01       	movw	r18, r12
 4ce:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__addsf3>
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__addsf3>
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	4a e7       	ldi	r20, 0x7A	; 122
 4e2:	54 e4       	ldi	r21, 0x44	; 68
 4e4:	0e 94 9a 05 	call	0xb34	; 0xb34 <__mulsf3>
 4e8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fixunssfsi>
 4ec:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <t1_compare_a+0x1>
 4f0:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <t1_compare_a>
	t1_compare_b = (uint16_t)(on_time*1000);
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	4a e7       	ldi	r20, 0x7A	; 122
 4fa:	54 e4       	ldi	r21, 0x44	; 68
 4fc:	c7 01       	movw	r24, r14
 4fe:	b6 01       	movw	r22, r12
 500:	0e 94 9a 05 	call	0xb34	; 0xb34 <__mulsf3>
 504:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fixunssfsi>
 508:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <t1_compare_b+0x1>
 50c:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <t1_compare_b>

	isNegative = false;
 510:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <isNegative>
	change_duty = true;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <change_duty>

	if(first_cycle){
 51a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <first_cycle>
 51e:	88 23       	and	r24, r24
 520:	91 f0       	breq	.+36     	; 0x546 <set_parameters+0x108>
		OCR1A = (uint16_t)t1_compare_a;
 522:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <t1_compare_a>
 526:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <t1_compare_a+0x1>
 52a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 52e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = (uint16_t)t1_compare_b;
 532:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <t1_compare_b>
 536:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <t1_compare_b+0x1>
 53a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 53e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		first_cycle = false;
 542:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <first_cycle>
		OCR1A = (uint16_t)t1_compare_a;
		OCR1B = (uint16_t)t1_compare_b;
	#endif

	//Initialise timer interrupt
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
 546:	ef e6       	ldi	r30, 0x6F	; 111
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	86 60       	ori	r24, 0x06	; 6
 54e:	80 83       	st	Z, r24
	TCNT1 = 0;
 550:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 554:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	bf 90       	pop	r11
 562:	af 90       	pop	r10
 564:	9f 90       	pop	r9
 566:	8f 90       	pop	r8
 568:	7f 90       	pop	r7
 56a:	6f 90       	pop	r6
 56c:	5f 90       	pop	r5
 56e:	4f 90       	pop	r4
 570:	08 95       	ret

00000572 <soft_start>:

void soft_start(float req_freq, int req_mfc){
 572:	cf 92       	push	r12
 574:	df 92       	push	r13
 576:	ef 92       	push	r14
 578:	ff 92       	push	r15
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
	unsigned int i = 0;
	while(i != req_mfc){
 582:	41 15       	cp	r20, r1
 584:	51 05       	cpc	r21, r1
 586:	71 f0       	breq	.+28     	; 0x5a4 <soft_start+0x32>
 588:	8a 01       	movw	r16, r20
 58a:	6b 01       	movw	r12, r22
 58c:	7c 01       	movw	r14, r24
 58e:	c0 e0       	ldi	r28, 0x00	; 0
 590:	d0 e0       	ldi	r29, 0x00	; 0
		set_parameters(req_freq, i);
 592:	4c 2f       	mov	r20, r28
 594:	c7 01       	movw	r24, r14
 596:	b6 01       	movw	r22, r12
 598:	0e 94 1f 02 	call	0x43e	; 0x43e <set_parameters>
		i++;
 59c:	21 96       	adiw	r28, 0x01	; 1
	TCNT1 = 0;
}

void soft_start(float req_freq, int req_mfc){
	unsigned int i = 0;
	while(i != req_mfc){
 59e:	c0 17       	cp	r28, r16
 5a0:	d1 07       	cpc	r29, r17
 5a2:	b9 f7       	brne	.-18     	; 0x592 <soft_start+0x20>
		set_parameters(req_freq, i);
		i++;
	}
}
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	df 90       	pop	r13
 5b2:	cf 90       	pop	r12
 5b4:	08 95       	ret

000005b6 <__vector_7>:

ISR(TIMER2_COMPA_vect){	
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	8f 93       	push	r24
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2A);
 5c6:	e0 e7       	ldi	r30, 0x70	; 112
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	8d 7f       	andi	r24, 0xFD	; 253
 5ce:	80 83       	st	Z, r24
	if(isNegative == false){
 5d0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <isNegative>
 5d4:	81 11       	cpse	r24, r1
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__vector_7+0x26>
		SET_SW3;
 5d8:	5f 9a       	sbi	0x0b, 7	; 11
 5da:	01 c0       	rjmp	.+2      	; 0x5de <__vector_7+0x28>
	}
	else{
		SET_SW4;
 5dc:	5e 9a       	sbi	0x0b, 6	; 11
	}
}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	8f 91       	pop	r24
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <__vector_11>:

ISR(TIMER1_COMPA_vect){
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	8f 93       	push	r24
 5fa:	ef 93       	push	r30
 5fc:	ff 93       	push	r31
	if(isNegative == false){
 5fe:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <isNegative>
 602:	81 11       	cpse	r24, r1
 604:	02 c0       	rjmp	.+4      	; 0x60a <__vector_11+0x1c>
		CLR_SW4;
 606:	5e 98       	cbi	0x0b, 6	; 11
 608:	01 c0       	rjmp	.+2      	; 0x60c <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 60a:	5f 98       	cbi	0x0b, 7	; 11
	}
	TIMSK1 &= ~(1 << OCIE1A);
 60c:	ef e6       	ldi	r30, 0x6F	; 111
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	8d 7f       	andi	r24, 0xFD	; 253
 614:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1B);
 616:	80 81       	ld	r24, Z
 618:	8b 7f       	andi	r24, 0xFB	; 251
 61a:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2B);
 61c:	e0 e7       	ldi	r30, 0x70	; 112
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	84 60       	ori	r24, 0x04	; 4
 624:	80 83       	st	Z, r24
	TCNT2 = 0;
 626:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	8f 91       	pop	r24
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <__vector_8>:

ISR(TIMER2_COMPB_vect){
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2B);
 64c:	e0 e7       	ldi	r30, 0x70	; 112
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	8b 7f       	andi	r24, 0xFB	; 251
 654:	80 83       	st	Z, r24
	if(mfr == 0){
 656:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <mfr>
 65a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <mfr+0x1>
 65e:	89 2b       	or	r24, r25
 660:	c1 f4       	brne	.+48     	; 0x692 <__vector_8+0x58>
		TIMSK2 &= ~(1 << OCIE2A);
 662:	80 81       	ld	r24, Z
 664:	8d 7f       	andi	r24, 0xFD	; 253
 666:	80 83       	st	Z, r24
		TIMSK2 &= ~(1 << OCIE2B);
 668:	80 81       	ld	r24, Z
 66a:	8b 7f       	andi	r24, 0xFB	; 251
 66c:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);
 66e:	ef e6       	ldi	r30, 0x6F	; 111
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	8d 7f       	andi	r24, 0xFD	; 253
 676:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1B);
 678:	80 81       	ld	r24, Z
 67a:	8b 7f       	andi	r24, 0xFB	; 251
 67c:	80 83       	st	Z, r24
		CLR_SW3;
 67e:	5f 98       	cbi	0x0b, 7	; 11
		CLR_SW4;
 680:	5e 98       	cbi	0x0b, 6	; 11
		CLR_SW1;
 682:	28 98       	cbi	0x05, 0	; 5
		CLR_SW2;
 684:	5d 98       	cbi	0x0b, 5	; 11
		SET_SW3;
 686:	5f 9a       	sbi	0x0b, 7	; 11
		SET_SW4;
 688:	5e 9a       	sbi	0x0b, 6	; 11
		first_cycle = true;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <first_cycle>
 690:	2e c0       	rjmp	.+92     	; 0x6ee <__vector_8+0xb4>
		
	}
	else{
		if(isNegative == false){
 692:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <isNegative>
 696:	81 11       	cpse	r24, r1
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <__vector_8+0x6a>
			SET_SW2;
 69a:	5d 9a       	sbi	0x0b, 5	; 11
			isNegative = true;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <isNegative>
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <__vector_8+0x70>
		}
		else{
			SET_SW1;
 6a4:	28 9a       	sbi	0x05, 0	; 5
			isNegative = false;
 6a6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <isNegative>
		}

		if(change_duty == true){
 6aa:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <change_duty>
 6ae:	88 23       	and	r24, r24
 6b0:	91 f0       	breq	.+36     	; 0x6d6 <__vector_8+0x9c>
			OCR1A = t1_compare_a;
 6b2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <t1_compare_a>
 6b6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <t1_compare_a+0x1>
 6ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B = t1_compare_b;
 6c2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <t1_compare_b>
 6c6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <t1_compare_b+0x1>
 6ca:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 6ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			change_duty = false;
 6d2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <change_duty>
			}		
	
		TIMSK1 |= (1 << OCIE1B);
 6d6:	ef e6       	ldi	r30, 0x6F	; 111
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	84 60       	ori	r24, 0x04	; 4
 6de:	80 83       	st	Z, r24
		TIMSK1 |= (1 << OCIE1A);
 6e0:	80 81       	ld	r24, Z
 6e2:	82 60       	ori	r24, 0x02	; 2
 6e4:	80 83       	st	Z, r24
		TCNT1 = 0;
 6e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 6ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	}

	
}
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	8f 93       	push	r24
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
	TIMSK1 &= ~(1 << OCIE1B);
 710:	ef e6       	ldi	r30, 0x6F	; 111
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	8b 7f       	andi	r24, 0xFB	; 251
 718:	80 83       	st	Z, r24
	if(isNegative == false){
 71a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <isNegative>
 71e:	81 11       	cpse	r24, r1
 720:	02 c0       	rjmp	.+4      	; 0x726 <__vector_12+0x26>
		CLR_SW1;
 722:	28 98       	cbi	0x05, 0	; 5
 724:	01 c0       	rjmp	.+2      	; 0x728 <__vector_12+0x28>
	}
	else{
		CLR_SW2;
 726:	5d 98       	cbi	0x0b, 5	; 11
	}
	TIMSK2 |= (1 << OCIE2A);
 728:	e0 e7       	ldi	r30, 0x70	; 112
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	82 60       	ori	r24, 0x02	; 2
 730:	80 83       	st	Z, r24
	TCNT2 = 0;
 732:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	8f 91       	pop	r24
 73c:	0f 90       	pop	r0
 73e:	0f be       	out	0x3f, r0	; 63
 740:	0f 90       	pop	r0
 742:	1f 90       	pop	r1
 744:	18 95       	reti

00000746 <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 746:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 74a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 74e:	e1 ec       	ldi	r30, 0xC1	; 193
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	88 60       	ori	r24, 0x08	; 8
 756:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 758:	80 81       	ld	r24, Z
 75a:	80 61       	ori	r24, 0x10	; 16
 75c:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 75e:	80 81       	ld	r24, Z
 760:	80 68       	ori	r24, 0x80	; 128
 762:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 764:	e2 ec       	ldi	r30, 0xC2	; 194
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	86 60       	ori	r24, 0x06	; 6
 76c:	80 83       	st	Z, r24
 76e:	08 95       	ret

00000770 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 774:	fc 01       	movw	r30, r24
 776:	20 81       	ld	r18, Z
 778:	22 23       	and	r18, r18
 77a:	69 f0       	breq	.+26     	; 0x796 <uart_transmit+0x26>
 77c:	dc 01       	movw	r26, r24
 77e:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 780:	e0 ec       	ldi	r30, 0xC0	; 192
 782:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 784:	c6 ec       	ldi	r28, 0xC6	; 198
 786:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 788:	90 81       	ld	r25, Z
 78a:	95 ff       	sbrs	r25, 5
 78c:	fd cf       	rjmp	.-6      	; 0x788 <uart_transmit+0x18>
		UDR0 = message[i];
 78e:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 790:	2d 91       	ld	r18, X+
 792:	21 11       	cpse	r18, r1
 794:	f9 cf       	rjmp	.-14     	; 0x788 <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	8b 01       	movw	r16, r22
 7a6:	fc 01       	movw	r30, r24
 7a8:	31 96       	adiw	r30, 0x01	; 1
 7aa:	ac 01       	movw	r20, r24
 7ac:	4c 5f       	subi	r20, 0xFC	; 252
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
	int value = 0;
 7b0:	c0 e0       	ldi	r28, 0x00	; 0
 7b2:	d0 e0       	ldi	r29, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 7b4:	9e 01       	movw	r18, r28
 7b6:	22 0f       	add	r18, r18
 7b8:	33 1f       	adc	r19, r19
 7ba:	cc 0f       	add	r28, r28
 7bc:	dd 1f       	adc	r29, r29
 7be:	cc 0f       	add	r28, r28
 7c0:	dd 1f       	adc	r29, r29
 7c2:	cc 0f       	add	r28, r28
 7c4:	dd 1f       	adc	r29, r29
 7c6:	c2 0f       	add	r28, r18
 7c8:	d3 1f       	adc	r29, r19
 7ca:	21 91       	ld	r18, Z+
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	20 53       	subi	r18, 0x30	; 48
 7d0:	31 09       	sbc	r19, r1
 7d2:	c2 0f       	add	r28, r18
 7d4:	d3 1f       	adc	r29, r19

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 7d6:	e4 17       	cp	r30, r20
 7d8:	f5 07       	cpc	r31, r21
 7da:	61 f7       	brne	.-40     	; 0x7b4 <process_message+0x18>

// 	for(unsigned int i = 0; i < 3; i++){
// 		value = value*10 + (tmp[i] - 48);
// 	}

	if(message[1] == 'p'){
 7dc:	fc 01       	movw	r30, r24
 7de:	81 81       	ldd	r24, Z+1	; 0x01
 7e0:	80 37       	cpi	r24, 0x70	; 112
 7e2:	21 f4       	brne	.+8      	; 0x7ec <process_message+0x50>
		uart_transmit("\n\rits here!\n\r");
 7e4:	89 e3       	ldi	r24, 0x39	; 57
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	0e 94 b8 03 	call	0x770	; 0x770 <uart_transmit>
	}
	*mfc = value;
 7ec:	f8 01       	movw	r30, r16
 7ee:	d1 83       	std	Z+1, r29	; 0x01
 7f0:	c0 83       	st	Z, r28
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	08 95       	ret

000007fc <__subsf3>:
 7fc:	50 58       	subi	r21, 0x80	; 128

000007fe <__addsf3>:
 7fe:	bb 27       	eor	r27, r27
 800:	aa 27       	eor	r26, r26
 802:	0e 94 16 04 	call	0x82c	; 0x82c <__addsf3x>
 806:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_round>
 80a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_pscA>
 80e:	38 f0       	brcs	.+14     	; 0x81e <__addsf3+0x20>
 810:	0e 94 59 05 	call	0xab2	; 0xab2 <__fp_pscB>
 814:	20 f0       	brcs	.+8      	; 0x81e <__addsf3+0x20>
 816:	39 f4       	brne	.+14     	; 0x826 <__addsf3+0x28>
 818:	9f 3f       	cpi	r25, 0xFF	; 255
 81a:	19 f4       	brne	.+6      	; 0x822 <__addsf3+0x24>
 81c:	26 f4       	brtc	.+8      	; 0x826 <__addsf3+0x28>
 81e:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_nan>
 822:	0e f4       	brtc	.+2      	; 0x826 <__addsf3+0x28>
 824:	e0 95       	com	r30
 826:	e7 fb       	bst	r30, 7
 828:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_inf>

0000082c <__addsf3x>:
 82c:	e9 2f       	mov	r30, r25
 82e:	0e 94 71 05 	call	0xae2	; 0xae2 <__fp_split3>
 832:	58 f3       	brcs	.-42     	; 0x80a <__addsf3+0xc>
 834:	ba 17       	cp	r27, r26
 836:	62 07       	cpc	r22, r18
 838:	73 07       	cpc	r23, r19
 83a:	84 07       	cpc	r24, r20
 83c:	95 07       	cpc	r25, r21
 83e:	20 f0       	brcs	.+8      	; 0x848 <__addsf3x+0x1c>
 840:	79 f4       	brne	.+30     	; 0x860 <__addsf3x+0x34>
 842:	a6 f5       	brtc	.+104    	; 0x8ac <__addsf3x+0x80>
 844:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_zero>
 848:	0e f4       	brtc	.+2      	; 0x84c <__addsf3x+0x20>
 84a:	e0 95       	com	r30
 84c:	0b 2e       	mov	r0, r27
 84e:	ba 2f       	mov	r27, r26
 850:	a0 2d       	mov	r26, r0
 852:	0b 01       	movw	r0, r22
 854:	b9 01       	movw	r22, r18
 856:	90 01       	movw	r18, r0
 858:	0c 01       	movw	r0, r24
 85a:	ca 01       	movw	r24, r20
 85c:	a0 01       	movw	r20, r0
 85e:	11 24       	eor	r1, r1
 860:	ff 27       	eor	r31, r31
 862:	59 1b       	sub	r21, r25
 864:	99 f0       	breq	.+38     	; 0x88c <__addsf3x+0x60>
 866:	59 3f       	cpi	r21, 0xF9	; 249
 868:	50 f4       	brcc	.+20     	; 0x87e <__addsf3x+0x52>
 86a:	50 3e       	cpi	r21, 0xE0	; 224
 86c:	68 f1       	brcs	.+90     	; 0x8c8 <__addsf3x+0x9c>
 86e:	1a 16       	cp	r1, r26
 870:	f0 40       	sbci	r31, 0x00	; 0
 872:	a2 2f       	mov	r26, r18
 874:	23 2f       	mov	r18, r19
 876:	34 2f       	mov	r19, r20
 878:	44 27       	eor	r20, r20
 87a:	58 5f       	subi	r21, 0xF8	; 248
 87c:	f3 cf       	rjmp	.-26     	; 0x864 <__addsf3x+0x38>
 87e:	46 95       	lsr	r20
 880:	37 95       	ror	r19
 882:	27 95       	ror	r18
 884:	a7 95       	ror	r26
 886:	f0 40       	sbci	r31, 0x00	; 0
 888:	53 95       	inc	r21
 88a:	c9 f7       	brne	.-14     	; 0x87e <__addsf3x+0x52>
 88c:	7e f4       	brtc	.+30     	; 0x8ac <__addsf3x+0x80>
 88e:	1f 16       	cp	r1, r31
 890:	ba 0b       	sbc	r27, r26
 892:	62 0b       	sbc	r22, r18
 894:	73 0b       	sbc	r23, r19
 896:	84 0b       	sbc	r24, r20
 898:	ba f0       	brmi	.+46     	; 0x8c8 <__addsf3x+0x9c>
 89a:	91 50       	subi	r25, 0x01	; 1
 89c:	a1 f0       	breq	.+40     	; 0x8c6 <__addsf3x+0x9a>
 89e:	ff 0f       	add	r31, r31
 8a0:	bb 1f       	adc	r27, r27
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	c2 f7       	brpl	.-16     	; 0x89a <__addsf3x+0x6e>
 8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <__addsf3x+0x9c>
 8ac:	ba 0f       	add	r27, r26
 8ae:	62 1f       	adc	r22, r18
 8b0:	73 1f       	adc	r23, r19
 8b2:	84 1f       	adc	r24, r20
 8b4:	48 f4       	brcc	.+18     	; 0x8c8 <__addsf3x+0x9c>
 8b6:	87 95       	ror	r24
 8b8:	77 95       	ror	r23
 8ba:	67 95       	ror	r22
 8bc:	b7 95       	ror	r27
 8be:	f7 95       	ror	r31
 8c0:	9e 3f       	cpi	r25, 0xFE	; 254
 8c2:	08 f0       	brcs	.+2      	; 0x8c6 <__addsf3x+0x9a>
 8c4:	b0 cf       	rjmp	.-160    	; 0x826 <__addsf3+0x28>
 8c6:	93 95       	inc	r25
 8c8:	88 0f       	add	r24, r24
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <__addsf3x+0xa2>
 8cc:	99 27       	eor	r25, r25
 8ce:	ee 0f       	add	r30, r30
 8d0:	97 95       	ror	r25
 8d2:	87 95       	ror	r24
 8d4:	08 95       	ret

000008d6 <__divsf3>:
 8d6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__divsf3x>
 8da:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_round>
 8de:	0e 94 59 05 	call	0xab2	; 0xab2 <__fp_pscB>
 8e2:	58 f0       	brcs	.+22     	; 0x8fa <__divsf3+0x24>
 8e4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_pscA>
 8e8:	40 f0       	brcs	.+16     	; 0x8fa <__divsf3+0x24>
 8ea:	29 f4       	brne	.+10     	; 0x8f6 <__divsf3+0x20>
 8ec:	5f 3f       	cpi	r21, 0xFF	; 255
 8ee:	29 f0       	breq	.+10     	; 0x8fa <__divsf3+0x24>
 8f0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_inf>
 8f4:	51 11       	cpse	r21, r1
 8f6:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_szero>
 8fa:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_nan>

000008fe <__divsf3x>:
 8fe:	0e 94 71 05 	call	0xae2	; 0xae2 <__fp_split3>
 902:	68 f3       	brcs	.-38     	; 0x8de <__divsf3+0x8>

00000904 <__divsf3_pse>:
 904:	99 23       	and	r25, r25
 906:	b1 f3       	breq	.-20     	; 0x8f4 <__divsf3+0x1e>
 908:	55 23       	and	r21, r21
 90a:	91 f3       	breq	.-28     	; 0x8f0 <__divsf3+0x1a>
 90c:	95 1b       	sub	r25, r21
 90e:	55 0b       	sbc	r21, r21
 910:	bb 27       	eor	r27, r27
 912:	aa 27       	eor	r26, r26
 914:	62 17       	cp	r22, r18
 916:	73 07       	cpc	r23, r19
 918:	84 07       	cpc	r24, r20
 91a:	38 f0       	brcs	.+14     	; 0x92a <__divsf3_pse+0x26>
 91c:	9f 5f       	subi	r25, 0xFF	; 255
 91e:	5f 4f       	sbci	r21, 0xFF	; 255
 920:	22 0f       	add	r18, r18
 922:	33 1f       	adc	r19, r19
 924:	44 1f       	adc	r20, r20
 926:	aa 1f       	adc	r26, r26
 928:	a9 f3       	breq	.-22     	; 0x914 <__divsf3_pse+0x10>
 92a:	35 d0       	rcall	.+106    	; 0x996 <__divsf3_pse+0x92>
 92c:	0e 2e       	mov	r0, r30
 92e:	3a f0       	brmi	.+14     	; 0x93e <__divsf3_pse+0x3a>
 930:	e0 e8       	ldi	r30, 0x80	; 128
 932:	32 d0       	rcall	.+100    	; 0x998 <__divsf3_pse+0x94>
 934:	91 50       	subi	r25, 0x01	; 1
 936:	50 40       	sbci	r21, 0x00	; 0
 938:	e6 95       	lsr	r30
 93a:	00 1c       	adc	r0, r0
 93c:	ca f7       	brpl	.-14     	; 0x930 <__divsf3_pse+0x2c>
 93e:	2b d0       	rcall	.+86     	; 0x996 <__divsf3_pse+0x92>
 940:	fe 2f       	mov	r31, r30
 942:	29 d0       	rcall	.+82     	; 0x996 <__divsf3_pse+0x92>
 944:	66 0f       	add	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	bb 1f       	adc	r27, r27
 94c:	26 17       	cp	r18, r22
 94e:	37 07       	cpc	r19, r23
 950:	48 07       	cpc	r20, r24
 952:	ab 07       	cpc	r26, r27
 954:	b0 e8       	ldi	r27, 0x80	; 128
 956:	09 f0       	breq	.+2      	; 0x95a <__divsf3_pse+0x56>
 958:	bb 0b       	sbc	r27, r27
 95a:	80 2d       	mov	r24, r0
 95c:	bf 01       	movw	r22, r30
 95e:	ff 27       	eor	r31, r31
 960:	93 58       	subi	r25, 0x83	; 131
 962:	5f 4f       	sbci	r21, 0xFF	; 255
 964:	3a f0       	brmi	.+14     	; 0x974 <__divsf3_pse+0x70>
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	51 05       	cpc	r21, r1
 96a:	78 f0       	brcs	.+30     	; 0x98a <__divsf3_pse+0x86>
 96c:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_inf>
 970:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_szero>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	e4 f3       	brlt	.-8      	; 0x970 <__divsf3_pse+0x6c>
 978:	98 3e       	cpi	r25, 0xE8	; 232
 97a:	d4 f3       	brlt	.-12     	; 0x970 <__divsf3_pse+0x6c>
 97c:	86 95       	lsr	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f7 95       	ror	r31
 986:	9f 5f       	subi	r25, 0xFF	; 255
 988:	c9 f7       	brne	.-14     	; 0x97c <__divsf3_pse+0x78>
 98a:	88 0f       	add	r24, r24
 98c:	91 1d       	adc	r25, r1
 98e:	96 95       	lsr	r25
 990:	87 95       	ror	r24
 992:	97 f9       	bld	r25, 7
 994:	08 95       	ret
 996:	e1 e0       	ldi	r30, 0x01	; 1
 998:	66 0f       	add	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	bb 1f       	adc	r27, r27
 9a0:	62 17       	cp	r22, r18
 9a2:	73 07       	cpc	r23, r19
 9a4:	84 07       	cpc	r24, r20
 9a6:	ba 07       	cpc	r27, r26
 9a8:	20 f0       	brcs	.+8      	; 0x9b2 <__divsf3_pse+0xae>
 9aa:	62 1b       	sub	r22, r18
 9ac:	73 0b       	sbc	r23, r19
 9ae:	84 0b       	sbc	r24, r20
 9b0:	ba 0b       	sbc	r27, r26
 9b2:	ee 1f       	adc	r30, r30
 9b4:	88 f7       	brcc	.-30     	; 0x998 <__divsf3_pse+0x94>
 9b6:	e0 95       	com	r30
 9b8:	08 95       	ret

000009ba <__fixunssfsi>:
 9ba:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_splitA>
 9be:	88 f0       	brcs	.+34     	; 0x9e2 <__fixunssfsi+0x28>
 9c0:	9f 57       	subi	r25, 0x7F	; 127
 9c2:	98 f0       	brcs	.+38     	; 0x9ea <__fixunssfsi+0x30>
 9c4:	b9 2f       	mov	r27, r25
 9c6:	99 27       	eor	r25, r25
 9c8:	b7 51       	subi	r27, 0x17	; 23
 9ca:	b0 f0       	brcs	.+44     	; 0x9f8 <__fixunssfsi+0x3e>
 9cc:	e1 f0       	breq	.+56     	; 0xa06 <__fixunssfsi+0x4c>
 9ce:	66 0f       	add	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 1f       	adc	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	1a f0       	brmi	.+6      	; 0x9de <__fixunssfsi+0x24>
 9d8:	ba 95       	dec	r27
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__fixunssfsi+0x14>
 9dc:	14 c0       	rjmp	.+40     	; 0xa06 <__fixunssfsi+0x4c>
 9de:	b1 30       	cpi	r27, 0x01	; 1
 9e0:	91 f0       	breq	.+36     	; 0xa06 <__fixunssfsi+0x4c>
 9e2:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_zero>
 9e6:	b1 e0       	ldi	r27, 0x01	; 1
 9e8:	08 95       	ret
 9ea:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_zero>
 9ee:	67 2f       	mov	r22, r23
 9f0:	78 2f       	mov	r23, r24
 9f2:	88 27       	eor	r24, r24
 9f4:	b8 5f       	subi	r27, 0xF8	; 248
 9f6:	39 f0       	breq	.+14     	; 0xa06 <__fixunssfsi+0x4c>
 9f8:	b9 3f       	cpi	r27, 0xF9	; 249
 9fa:	cc f3       	brlt	.-14     	; 0x9ee <__fixunssfsi+0x34>
 9fc:	86 95       	lsr	r24
 9fe:	77 95       	ror	r23
 a00:	67 95       	ror	r22
 a02:	b3 95       	inc	r27
 a04:	d9 f7       	brne	.-10     	; 0x9fc <__fixunssfsi+0x42>
 a06:	3e f4       	brtc	.+14     	; 0xa16 <__fixunssfsi+0x5c>
 a08:	90 95       	com	r25
 a0a:	80 95       	com	r24
 a0c:	70 95       	com	r23
 a0e:	61 95       	neg	r22
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	08 95       	ret

00000a18 <__floatunsisf>:
 a18:	e8 94       	clt
 a1a:	09 c0       	rjmp	.+18     	; 0xa2e <__floatsisf+0x12>

00000a1c <__floatsisf>:
 a1c:	97 fb       	bst	r25, 7
 a1e:	3e f4       	brtc	.+14     	; 0xa2e <__floatsisf+0x12>
 a20:	90 95       	com	r25
 a22:	80 95       	com	r24
 a24:	70 95       	com	r23
 a26:	61 95       	neg	r22
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	8f 4f       	sbci	r24, 0xFF	; 255
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	99 23       	and	r25, r25
 a30:	a9 f0       	breq	.+42     	; 0xa5c <__floatsisf+0x40>
 a32:	f9 2f       	mov	r31, r25
 a34:	96 e9       	ldi	r25, 0x96	; 150
 a36:	bb 27       	eor	r27, r27
 a38:	93 95       	inc	r25
 a3a:	f6 95       	lsr	r31
 a3c:	87 95       	ror	r24
 a3e:	77 95       	ror	r23
 a40:	67 95       	ror	r22
 a42:	b7 95       	ror	r27
 a44:	f1 11       	cpse	r31, r1
 a46:	f8 cf       	rjmp	.-16     	; 0xa38 <__floatsisf+0x1c>
 a48:	fa f4       	brpl	.+62     	; 0xa88 <__floatsisf+0x6c>
 a4a:	bb 0f       	add	r27, r27
 a4c:	11 f4       	brne	.+4      	; 0xa52 <__floatsisf+0x36>
 a4e:	60 ff       	sbrs	r22, 0
 a50:	1b c0       	rjmp	.+54     	; 0xa88 <__floatsisf+0x6c>
 a52:	6f 5f       	subi	r22, 0xFF	; 255
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	8f 4f       	sbci	r24, 0xFF	; 255
 a58:	9f 4f       	sbci	r25, 0xFF	; 255
 a5a:	16 c0       	rjmp	.+44     	; 0xa88 <__floatsisf+0x6c>
 a5c:	88 23       	and	r24, r24
 a5e:	11 f0       	breq	.+4      	; 0xa64 <__floatsisf+0x48>
 a60:	96 e9       	ldi	r25, 0x96	; 150
 a62:	11 c0       	rjmp	.+34     	; 0xa86 <__floatsisf+0x6a>
 a64:	77 23       	and	r23, r23
 a66:	21 f0       	breq	.+8      	; 0xa70 <__floatsisf+0x54>
 a68:	9e e8       	ldi	r25, 0x8E	; 142
 a6a:	87 2f       	mov	r24, r23
 a6c:	76 2f       	mov	r23, r22
 a6e:	05 c0       	rjmp	.+10     	; 0xa7a <__floatsisf+0x5e>
 a70:	66 23       	and	r22, r22
 a72:	71 f0       	breq	.+28     	; 0xa90 <__floatsisf+0x74>
 a74:	96 e8       	ldi	r25, 0x86	; 134
 a76:	86 2f       	mov	r24, r22
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	2a f0       	brmi	.+10     	; 0xa88 <__floatsisf+0x6c>
 a7e:	9a 95       	dec	r25
 a80:	66 0f       	add	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	da f7       	brpl	.-10     	; 0xa7e <__floatsisf+0x62>
 a88:	88 0f       	add	r24, r24
 a8a:	96 95       	lsr	r25
 a8c:	87 95       	ror	r24
 a8e:	97 f9       	bld	r25, 7
 a90:	08 95       	ret

00000a92 <__fp_inf>:
 a92:	97 f9       	bld	r25, 7
 a94:	9f 67       	ori	r25, 0x7F	; 127
 a96:	80 e8       	ldi	r24, 0x80	; 128
 a98:	70 e0       	ldi	r23, 0x00	; 0
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	08 95       	ret

00000a9e <__fp_nan>:
 a9e:	9f ef       	ldi	r25, 0xFF	; 255
 aa0:	80 ec       	ldi	r24, 0xC0	; 192
 aa2:	08 95       	ret

00000aa4 <__fp_pscA>:
 aa4:	00 24       	eor	r0, r0
 aa6:	0a 94       	dec	r0
 aa8:	16 16       	cp	r1, r22
 aaa:	17 06       	cpc	r1, r23
 aac:	18 06       	cpc	r1, r24
 aae:	09 06       	cpc	r0, r25
 ab0:	08 95       	ret

00000ab2 <__fp_pscB>:
 ab2:	00 24       	eor	r0, r0
 ab4:	0a 94       	dec	r0
 ab6:	12 16       	cp	r1, r18
 ab8:	13 06       	cpc	r1, r19
 aba:	14 06       	cpc	r1, r20
 abc:	05 06       	cpc	r0, r21
 abe:	08 95       	ret

00000ac0 <__fp_round>:
 ac0:	09 2e       	mov	r0, r25
 ac2:	03 94       	inc	r0
 ac4:	00 0c       	add	r0, r0
 ac6:	11 f4       	brne	.+4      	; 0xacc <__fp_round+0xc>
 ac8:	88 23       	and	r24, r24
 aca:	52 f0       	brmi	.+20     	; 0xae0 <__fp_round+0x20>
 acc:	bb 0f       	add	r27, r27
 ace:	40 f4       	brcc	.+16     	; 0xae0 <__fp_round+0x20>
 ad0:	bf 2b       	or	r27, r31
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__fp_round+0x18>
 ad4:	60 ff       	sbrs	r22, 0
 ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__fp_round+0x20>
 ad8:	6f 5f       	subi	r22, 0xFF	; 255
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	08 95       	ret

00000ae2 <__fp_split3>:
 ae2:	57 fd       	sbrc	r21, 7
 ae4:	90 58       	subi	r25, 0x80	; 128
 ae6:	44 0f       	add	r20, r20
 ae8:	55 1f       	adc	r21, r21
 aea:	59 f0       	breq	.+22     	; 0xb02 <__fp_splitA+0x10>
 aec:	5f 3f       	cpi	r21, 0xFF	; 255
 aee:	71 f0       	breq	.+28     	; 0xb0c <__fp_splitA+0x1a>
 af0:	47 95       	ror	r20

00000af2 <__fp_splitA>:
 af2:	88 0f       	add	r24, r24
 af4:	97 fb       	bst	r25, 7
 af6:	99 1f       	adc	r25, r25
 af8:	61 f0       	breq	.+24     	; 0xb12 <__fp_splitA+0x20>
 afa:	9f 3f       	cpi	r25, 0xFF	; 255
 afc:	79 f0       	breq	.+30     	; 0xb1c <__fp_splitA+0x2a>
 afe:	87 95       	ror	r24
 b00:	08 95       	ret
 b02:	12 16       	cp	r1, r18
 b04:	13 06       	cpc	r1, r19
 b06:	14 06       	cpc	r1, r20
 b08:	55 1f       	adc	r21, r21
 b0a:	f2 cf       	rjmp	.-28     	; 0xaf0 <__fp_split3+0xe>
 b0c:	46 95       	lsr	r20
 b0e:	f1 df       	rcall	.-30     	; 0xaf2 <__fp_splitA>
 b10:	08 c0       	rjmp	.+16     	; 0xb22 <__fp_splitA+0x30>
 b12:	16 16       	cp	r1, r22
 b14:	17 06       	cpc	r1, r23
 b16:	18 06       	cpc	r1, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	f1 cf       	rjmp	.-30     	; 0xafe <__fp_splitA+0xc>
 b1c:	86 95       	lsr	r24
 b1e:	71 05       	cpc	r23, r1
 b20:	61 05       	cpc	r22, r1
 b22:	08 94       	sec
 b24:	08 95       	ret

00000b26 <__fp_zero>:
 b26:	e8 94       	clt

00000b28 <__fp_szero>:
 b28:	bb 27       	eor	r27, r27
 b2a:	66 27       	eor	r22, r22
 b2c:	77 27       	eor	r23, r23
 b2e:	cb 01       	movw	r24, r22
 b30:	97 f9       	bld	r25, 7
 b32:	08 95       	ret

00000b34 <__mulsf3>:
 b34:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__mulsf3x>
 b38:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_round>
 b3c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_pscA>
 b40:	38 f0       	brcs	.+14     	; 0xb50 <__mulsf3+0x1c>
 b42:	0e 94 59 05 	call	0xab2	; 0xab2 <__fp_pscB>
 b46:	20 f0       	brcs	.+8      	; 0xb50 <__mulsf3+0x1c>
 b48:	95 23       	and	r25, r21
 b4a:	11 f0       	breq	.+4      	; 0xb50 <__mulsf3+0x1c>
 b4c:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_inf>
 b50:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_nan>
 b54:	11 24       	eor	r1, r1
 b56:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_szero>

00000b5a <__mulsf3x>:
 b5a:	0e 94 71 05 	call	0xae2	; 0xae2 <__fp_split3>
 b5e:	70 f3       	brcs	.-36     	; 0xb3c <__mulsf3+0x8>

00000b60 <__mulsf3_pse>:
 b60:	95 9f       	mul	r25, r21
 b62:	c1 f3       	breq	.-16     	; 0xb54 <__mulsf3+0x20>
 b64:	95 0f       	add	r25, r21
 b66:	50 e0       	ldi	r21, 0x00	; 0
 b68:	55 1f       	adc	r21, r21
 b6a:	62 9f       	mul	r22, r18
 b6c:	f0 01       	movw	r30, r0
 b6e:	72 9f       	mul	r23, r18
 b70:	bb 27       	eor	r27, r27
 b72:	f0 0d       	add	r31, r0
 b74:	b1 1d       	adc	r27, r1
 b76:	63 9f       	mul	r22, r19
 b78:	aa 27       	eor	r26, r26
 b7a:	f0 0d       	add	r31, r0
 b7c:	b1 1d       	adc	r27, r1
 b7e:	aa 1f       	adc	r26, r26
 b80:	64 9f       	mul	r22, r20
 b82:	66 27       	eor	r22, r22
 b84:	b0 0d       	add	r27, r0
 b86:	a1 1d       	adc	r26, r1
 b88:	66 1f       	adc	r22, r22
 b8a:	82 9f       	mul	r24, r18
 b8c:	22 27       	eor	r18, r18
 b8e:	b0 0d       	add	r27, r0
 b90:	a1 1d       	adc	r26, r1
 b92:	62 1f       	adc	r22, r18
 b94:	73 9f       	mul	r23, r19
 b96:	b0 0d       	add	r27, r0
 b98:	a1 1d       	adc	r26, r1
 b9a:	62 1f       	adc	r22, r18
 b9c:	83 9f       	mul	r24, r19
 b9e:	a0 0d       	add	r26, r0
 ba0:	61 1d       	adc	r22, r1
 ba2:	22 1f       	adc	r18, r18
 ba4:	74 9f       	mul	r23, r20
 ba6:	33 27       	eor	r19, r19
 ba8:	a0 0d       	add	r26, r0
 baa:	61 1d       	adc	r22, r1
 bac:	23 1f       	adc	r18, r19
 bae:	84 9f       	mul	r24, r20
 bb0:	60 0d       	add	r22, r0
 bb2:	21 1d       	adc	r18, r1
 bb4:	82 2f       	mov	r24, r18
 bb6:	76 2f       	mov	r23, r22
 bb8:	6a 2f       	mov	r22, r26
 bba:	11 24       	eor	r1, r1
 bbc:	9f 57       	subi	r25, 0x7F	; 127
 bbe:	50 40       	sbci	r21, 0x00	; 0
 bc0:	9a f0       	brmi	.+38     	; 0xbe8 <__mulsf3_pse+0x88>
 bc2:	f1 f0       	breq	.+60     	; 0xc00 <__mulsf3_pse+0xa0>
 bc4:	88 23       	and	r24, r24
 bc6:	4a f0       	brmi	.+18     	; 0xbda <__mulsf3_pse+0x7a>
 bc8:	ee 0f       	add	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	bb 1f       	adc	r27, r27
 bce:	66 1f       	adc	r22, r22
 bd0:	77 1f       	adc	r23, r23
 bd2:	88 1f       	adc	r24, r24
 bd4:	91 50       	subi	r25, 0x01	; 1
 bd6:	50 40       	sbci	r21, 0x00	; 0
 bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__mulsf3_pse+0x64>
 bda:	9e 3f       	cpi	r25, 0xFE	; 254
 bdc:	51 05       	cpc	r21, r1
 bde:	80 f0       	brcs	.+32     	; 0xc00 <__mulsf3_pse+0xa0>
 be0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_inf>
 be4:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__fp_szero>
 be8:	5f 3f       	cpi	r21, 0xFF	; 255
 bea:	e4 f3       	brlt	.-8      	; 0xbe4 <__mulsf3_pse+0x84>
 bec:	98 3e       	cpi	r25, 0xE8	; 232
 bee:	d4 f3       	brlt	.-12     	; 0xbe4 <__mulsf3_pse+0x84>
 bf0:	86 95       	lsr	r24
 bf2:	77 95       	ror	r23
 bf4:	67 95       	ror	r22
 bf6:	b7 95       	ror	r27
 bf8:	f7 95       	ror	r31
 bfa:	e7 95       	ror	r30
 bfc:	9f 5f       	subi	r25, 0xFF	; 255
 bfe:	c1 f7       	brne	.-16     	; 0xbf0 <__mulsf3_pse+0x90>
 c00:	fe 2b       	or	r31, r30
 c02:	88 0f       	add	r24, r24
 c04:	91 1d       	adc	r25, r1
 c06:	96 95       	lsr	r25
 c08:	87 95       	ror	r24
 c0a:	97 f9       	bld	r25, 7
 c0c:	08 95       	ret

00000c0e <__umulhisi3>:
 c0e:	a2 9f       	mul	r26, r18
 c10:	b0 01       	movw	r22, r0
 c12:	b3 9f       	mul	r27, r19
 c14:	c0 01       	movw	r24, r0
 c16:	a3 9f       	mul	r26, r19
 c18:	70 0d       	add	r23, r0
 c1a:	81 1d       	adc	r24, r1
 c1c:	11 24       	eor	r1, r1
 c1e:	91 1d       	adc	r25, r1
 c20:	b2 9f       	mul	r27, r18
 c22:	70 0d       	add	r23, r0
 c24:	81 1d       	adc	r24, r1
 c26:	11 24       	eor	r1, r1
 c28:	91 1d       	adc	r25, r1
 c2a:	08 95       	ret

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
