
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000230  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800130  00800130  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000934  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073e  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d1  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000126  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  9e:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
volatile unsigned int message_index = 0;
volatile unsigned int net_brackets = 0;
volatile uint8_t message_complete = false;

//This is the ISR for UART receive
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
 	while(!RECEIVE_COMPLETE);
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <__vector_18+0x1a>
	char tmp = UDR0; 
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(tmp == '{'){
  ca:	8b 37       	cpi	r24, 0x7B	; 123
  cc:	59 f4       	brne	.+22     	; 0xe4 <__vector_18+0x3e>
		net_brackets++;
  ce:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <net_brackets>
  d2:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <net_brackets+0x1>
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <net_brackets+0x1>
  de:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <net_brackets>
  e2:	15 c0       	rjmp	.+42     	; 0x10e <__vector_18+0x68>
	}
	else if(tmp == '}'){
  e4:	8d 37       	cpi	r24, 0x7D	; 125
  e6:	99 f4       	brne	.+38     	; 0x10e <__vector_18+0x68>
		net_brackets--;
  e8:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <net_brackets>
  ec:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <net_brackets+0x1>
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	31 09       	sbc	r19, r1
  f4:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <net_brackets+0x1>
  f8:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <net_brackets>
		if(net_brackets == 0){
  fc:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <net_brackets>
 100:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <net_brackets+0x1>
 104:	23 2b       	or	r18, r19
 106:	19 f4       	brne	.+6      	; 0x10e <__vector_18+0x68>
			message_complete = true;
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__data_end>
		}
	}

	if(net_brackets > 0){
 10e:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <net_brackets>
 112:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <net_brackets+0x1>
 116:	23 2b       	or	r18, r19
 118:	81 f0       	breq	.+32     	; 0x13a <__vector_18+0x94>
		received_message[message_index] = tmp;
 11a:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <message_index>
 11e:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <message_index+0x1>
 122:	eb 5c       	subi	r30, 0xCB	; 203
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	80 83       	st	Z, r24
		message_index++;
 128:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <message_index>
 12c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <message_index+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <message_index+0x1>
 136:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <message_index>
	}
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uart_initiate>

	//Enable Global interrupts
	sei();
 158:	78 94       	sei
    while (1){
		//Trying to distinguish between the message sent from USB and message sent from LLC
		//Better way of clearing array or using message_pos required
		if(received_message[message_index] == '}'){
 15a:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <message_index>
 15e:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <message_index+0x1>
 162:	eb 5c       	subi	r30, 0xCB	; 203
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 81       	ld	r24, Z
 168:	8d 37       	cpi	r24, 0x7D	; 125
 16a:	b9 f7       	brne	.-18     	; 0x15a <main+0xa>
			//Disable Global interrupts 
			cli();
 16c:	f8 94       	cli

			uart_transmit("Message sent from LLC {");
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_transmit>
			uart_transmit_byte(13);
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	0e 94 0e 01 	call	0x21c	; 0x21c <uart_transmit_byte>
			uart_transmit_byte(10);
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	0e 94 0e 01 	call	0x21c	; 0x21c <uart_transmit_byte>

			uart_transmit((char*) received_message);
 182:	85 e3       	ldi	r24, 0x35	; 53
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_transmit>

			//Clearing the array to receive another message
			message_index = 0;
 18a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <message_index+0x1>
 18e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <message_index>
			received_message[0] = '\0';
 192:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <received_message>
			net_brackets = 0;
 196:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <net_brackets+0x1>
 19a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <net_brackets>
			message_complete = false;
 19e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>

			uart_transmit_byte(13);
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 0e 01 	call	0x21c	; 0x21c <uart_transmit_byte>
			uart_transmit_byte(10);
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	0e 94 0e 01 	call	0x21c	; 0x21c <uart_transmit_byte>
			uart_transmit("} Message sent from LLC");
 1ae:	88 e1       	ldi	r24, 0x18	; 24
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_transmit>
			uart_transmit_byte(13);
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	0e 94 0e 01 	call	0x21c	; 0x21c <uart_transmit_byte>
			uart_transmit_byte(10);
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	0e 94 0e 01 	call	0x21c	; 0x21c <uart_transmit_byte>

			//Re-enable Global interrupts 
			sei();
 1c2:	78 94       	sei
 1c4:	ca cf       	rjmp	.-108    	; 0x15a <main+0xa>

000001c6 <uart_initiate>:
#define MAX_SIZE 30

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){

	UCSR0A = 0x00;
 1c6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 1ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 1ce:	e1 ec       	ldi	r30, 0xC1	; 193
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 1d8:	80 81       	ld	r24, Z
 1da:	80 61       	ori	r24, 0x10	; 16
 1dc:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 1de:	80 81       	ld	r24, Z
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 1e4:	e2 ec       	ldi	r30, 0xC2	; 194
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	86 60       	ori	r24, 0x06	; 6
 1ec:	80 83       	st	Z, r24
 1ee:	08 95       	ret

000001f0 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 81       	ld	r18, Z
 1f8:	22 23       	and	r18, r18
 1fa:	69 f0       	breq	.+26     	; 0x216 <uart_transmit+0x26>
 1fc:	dc 01       	movw	r26, r24
 1fe:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 200:	e0 ec       	ldi	r30, 0xC0	; 192
 202:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 204:	c6 ec       	ldi	r28, 0xC6	; 198
 206:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 208:	90 81       	ld	r25, Z
 20a:	95 ff       	sbrs	r25, 5
 20c:	fd cf       	rjmp	.-6      	; 0x208 <uart_transmit+0x18>
		UDR0 = message[i];
 20e:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 210:	2d 91       	ld	r18, X+
 212:	21 11       	cpse	r18, r1
 214:	f9 cf       	rjmp	.-14     	; 0x208 <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <uart_transmit_byte>:

//test function
void uart_transmit_byte(uint8_t byte){
	while((UCSR0A & 0x20) == 0);
 21c:	e0 ec       	ldi	r30, 0xC0	; 192
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	90 81       	ld	r25, Z
 222:	95 ff       	sbrs	r25, 5
 224:	fd cf       	rjmp	.-6      	; 0x220 <uart_transmit_byte+0x4>
	UDR0 = byte;
 226:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
