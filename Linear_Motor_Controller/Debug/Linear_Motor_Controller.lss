
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000096e  00000a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  0080013a  0080013a  00000a3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab5  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000949  00000000  00000000  00002611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096e  00000000  00000000  00002f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  000038c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000563  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea8  00000000  00000000  00004013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004ebb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_11>
  30:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_14>
  3c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	char tmp = UDR0; 
  b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
  bc:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <message_complete>
  c0:	91 11       	cpse	r25, r1
  c2:	47 c0       	rjmp	.+142    	; 0x152 <__vector_18+0xac>
		if(tmp == '{'){
  c4:	8b 37       	cpi	r24, 0x7B	; 123
  c6:	49 f4       	brne	.+18     	; 0xda <__vector_18+0x34>
			net_brackets++;
  c8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <net_brackets>
			message_start = true;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <__data_end>
  d8:	12 c0       	rjmp	.+36     	; 0xfe <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
  da:	8d 37       	cpi	r24, 0x7D	; 125
  dc:	81 f4       	brne	.+32     	; 0xfe <__vector_18+0x58>
  de:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	61 f4       	brne	.+24     	; 0xfe <__vector_18+0x58>
			net_brackets--;
  e6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <net_brackets>
			if(net_brackets == 0){
  f0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  f4:	91 11       	cpse	r25, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_18+0x58>
				message_complete = true;
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <message_complete>
			}
		}

		if(message_start == true){
  fe:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
 102:	91 30       	cpi	r25, 0x01	; 1
 104:	a9 f4       	brne	.+42     	; 0x130 <__vector_18+0x8a>
			received_message[message_index] = tmp;
 106:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <message_index>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	eb 5b       	subi	r30, 0xBB	; 187
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 83       	st	Z, r24
			message_index++;
 112:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <message_index>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <message_index>
			if(message_complete == true){
 11c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <message_complete>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <__vector_18+0x8a>
				received_message[message_index] = '\0';
 124:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <message_index>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	eb 5b       	subi	r30, 0xBB	; 187
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 130:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <message_index>
 134:	8e 3f       	cpi	r24, 0xFE	; 254
 136:	21 f0       	breq	.+8      	; 0x140 <__vector_18+0x9a>
 138:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <net_brackets>
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	48 f0       	brcs	.+18     	; 0x152 <__vector_18+0xac>
			receive_error = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <receive_error>
			message_start = false;
 146:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			message_complete = false;
 14a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <message_complete>
			message_index = 0;
 14e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <message_index>
		}
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 164:	83 e3       	ldi	r24, 0x33	; 51
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_initiate>

	//Enable Global interrupts
	sei();
 16c:	78 94       	sei

	*frequency = 12.5;
 16e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 172:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a8 e4       	ldi	r26, 0x48	; 72
 17c:	b1 e4       	ldi	r27, 0x41	; 65
 17e:	80 83       	st	Z, r24
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	a2 83       	std	Z+2, r26	; 0x02
 184:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 150;
 186:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 18a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 18e:	86 e9       	ldi	r24, 0x96	; 150
 190:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 192:	0e 94 29 01 	call	0x252	; 0x252 <driver_timer_initiate>
	set_parameters(*frequency, *mfc);
 196:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 19a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 19e:	40 81       	ld	r20, Z
 1a0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 1a4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 1a8:	60 81       	ld	r22, Z
 1aa:	71 81       	ldd	r23, Z+1	; 0x01
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	93 81       	ldd	r25, Z+3	; 0x03
 1b0:	0e 94 40 01 	call	0x280	; 0x280 <set_parameters>
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 1b4:	c1 ec       	ldi	r28, 0xC1	; 193
 1b6:	d0 e0       	ldi	r29, 0x00	; 0

		#ifdef SITH
			project_skywalker();
		#endif

		if(message_complete == true){
 1b8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <message_complete>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	81 f5       	brne	.+96     	; 0x220 <main+0xbc>
			UCSR0B &= ~(1 << RXEN0);
 1c0:	88 81       	ld	r24, Y
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uart_transmit>
			uart_transmit((char*)received_message);
 1ce:	85 e4       	ldi	r24, 0x45	; 69
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 1d6:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <mfc>
 1da:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <mfc+0x1>
 1de:	85 e4       	ldi	r24, 0x45	; 69
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 8f 02 	call	0x51e	; 0x51e <process_message>
			set_parameters(*frequency, *mfc);
 1e6:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 1ea:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 1ee:	40 81       	ld	r20, Z
 1f0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 1f4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 1f8:	60 81       	ld	r22, Z
 1fa:	71 81       	ldd	r23, Z+1	; 0x01
 1fc:	82 81       	ldd	r24, Z+2	; 0x02
 1fe:	93 81       	ldd	r25, Z+3	; 0x03
 200:	0e 94 40 01 	call	0x280	; 0x280 <set_parameters>
			uart_transmit("\n\r");
 204:	86 e3       	ldi	r24, 0x36	; 54
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uart_transmit>
			message_complete = false;
 20c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <message_complete>
			message_start = false;
 210:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			message_index = 0;
 214:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <message_index>
			UCSR0B |= (1 << RXEN0);
 218:	88 81       	ld	r24, Y
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	88 83       	st	Y, r24
 21e:	cc cf       	rjmp	.-104    	; 0x1b8 <main+0x54>
		}
		else if(receive_error == true){
 220:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <receive_error>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	41 f6       	brne	.-112    	; 0x1b8 <main+0x54>
			UCSR0B &= ~(1 << RXEN0);
 228:	88 81       	ld	r24, Y
 22a:	8f 7e       	andi	r24, 0xEF	; 239
 22c:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 236:	89 e1       	ldi	r24, 0x19	; 25
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uart_transmit>
			receive_error = false;
 23e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <receive_error>
			message_start = false;
 242:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			net_brackets = 0;
 246:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <net_brackets>
			UCSR0B |= (1 << RXEN0);
 24a:	88 81       	ld	r24, Y
 24c:	80 61       	ori	r24, 0x10	; 16
 24e:	88 83       	st	Y, r24
 250:	b3 cf       	rjmp	.-154    	; 0x1b8 <main+0x54>

00000252 <driver_timer_initiate>:

	//Initialise timer interrupt
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
}

void soft_start(float* req_freq, int* req_mfc){
 252:	85 b5       	in	r24, 0x25	; 37
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 bd       	out	0x25, r24	; 37
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	87 bd       	out	0x27, r24	; 39
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	88 bd       	out	0x28, r24	; 40
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
 26a:	20 9a       	sbi	0x04, 0	; 4
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 6e       	ori	r24, 0xE0	; 224
 270:	8a b9       	out	0x0a, r24	; 10
 272:	28 9a       	sbi	0x05, 0	; 5
 274:	5e 9a       	sbi	0x0b, 6	; 11
 276:	5d 98       	cbi	0x0b, 5	; 11
 278:	5f 98       	cbi	0x0b, 7	; 11
 27a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <change_duty>
 27e:	08 95       	ret

00000280 <set_parameters>:
 280:	4f 92       	push	r4
 282:	5f 92       	push	r5
 284:	6f 92       	push	r6
 286:	7f 92       	push	r7
 288:	8f 92       	push	r8
 28a:	9f 92       	push	r9
 28c:	af 92       	push	r10
 28e:	bf 92       	push	r11
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	6b 01       	movw	r12, r22
 29a:	7c 01       	movw	r14, r24
 29c:	64 2f       	mov	r22, r20
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 ba 03 	call	0x774	; 0x774 <__floatunsisf>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	4f e7       	ldi	r20, 0x7F	; 127
 2ae:	53 e4       	ldi	r21, 0x43	; 67
 2b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
 2b4:	2b 01       	movw	r4, r22
 2b6:	3c 01       	movw	r6, r24
 2b8:	a7 01       	movw	r20, r14
 2ba:	96 01       	movw	r18, r12
 2bc:	c7 01       	movw	r24, r14
 2be:	b6 01       	movw	r22, r12
 2c0:	0e 94 ad 02 	call	0x55a	; 0x55a <__addsf3>
 2c4:	9b 01       	movw	r18, r22
 2c6:	ac 01       	movw	r20, r24
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	8a e7       	ldi	r24, 0x7A	; 122
 2ce:	94 e4       	ldi	r25, 0x44	; 68
 2d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
 2d4:	4b 01       	movw	r8, r22
 2d6:	5c 01       	movw	r10, r24
 2d8:	9b 01       	movw	r18, r22
 2da:	ac 01       	movw	r20, r24
 2dc:	c3 01       	movw	r24, r6
 2de:	b2 01       	movw	r22, r4
 2e0:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3>
 2e4:	6b 01       	movw	r12, r22
 2e6:	7c 01       	movw	r14, r24
 2e8:	a3 01       	movw	r20, r6
 2ea:	92 01       	movw	r18, r4
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	80 e8       	ldi	r24, 0x80	; 128
 2f2:	9f e3       	ldi	r25, 0x3F	; 63
 2f4:	0e 94 ac 02 	call	0x558	; 0x558 <__subsf3>
 2f8:	a5 01       	movw	r20, r10
 2fa:	94 01       	movw	r18, r8
 2fc:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3>
 300:	a7 01       	movw	r20, r14
 302:	96 01       	movw	r18, r12
 304:	0e 94 ad 02 	call	0x55a	; 0x55a <__addsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	a9 01       	movw	r20, r18
 30e:	0e 94 ad 02 	call	0x55a	; 0x55a <__addsf3>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	4a e7       	ldi	r20, 0x7A	; 122
 318:	54 e4       	ldi	r21, 0x44	; 68
 31a:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3>
 31e:	0e 94 8b 03 	call	0x716	; 0x716 <__fixunssfsi>
 322:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <t1_compare_a+0x1>
 326:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <t1_compare_a>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	4a e7       	ldi	r20, 0x7A	; 122
 330:	54 e4       	ldi	r21, 0x44	; 68
 332:	c7 01       	movw	r24, r14
 334:	b6 01       	movw	r22, r12
 336:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3>
 33a:	0e 94 8b 03 	call	0x716	; 0x716 <__fixunssfsi>
 33e:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <t1_compare_b+0x1>
 342:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <t1_compare_b>
 346:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <isNegative>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <change_duty>
 350:	ef e6       	ldi	r30, 0x6F	; 111
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	86 60       	ori	r24, 0x06	; 6
 358:	80 83       	st	Z, r24
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	9f 90       	pop	r9
 368:	8f 90       	pop	r8
 36a:	7f 90       	pop	r7
 36c:	6f 90       	pop	r6
 36e:	5f 90       	pop	r5
 370:	4f 90       	pop	r4
 372:	08 95       	ret

00000374 <__vector_14>:

}

ISR(TIMER0_COMPA_vect){	
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	8f 93       	push	r24
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0A);
 384:	ee e6       	ldi	r30, 0x6E	; 110
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	8d 7f       	andi	r24, 0xFD	; 253
 38c:	80 83       	st	Z, r24
	if(isNegative == false){
 38e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <isNegative>
 392:	81 11       	cpse	r24, r1
 394:	02 c0       	rjmp	.+4      	; 0x39a <__vector_14+0x26>
		SET_SW3;
 396:	5f 9a       	sbi	0x0b, 7	; 11
 398:	01 c0       	rjmp	.+2      	; 0x39c <__vector_14+0x28>
	}
	else{
		SET_SW4;
 39a:	5e 9a       	sbi	0x0b, 6	; 11
	}
}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_11>:

ISR(TIMER1_COMPA_vect){
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	if(isNegative == false){
 3bc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <isNegative>
 3c0:	81 11       	cpse	r24, r1
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <__vector_11+0x1c>
		CLR_SW4;
 3c4:	5e 98       	cbi	0x0b, 6	; 11
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 3c8:	5f 98       	cbi	0x0b, 7	; 11
	}
	TIMSK0 |= (1 << OCIE0B);
 3ca:	ee e6       	ldi	r30, 0x6E	; 110
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	84 60       	ori	r24, 0x04	; 4
 3d2:	80 83       	st	Z, r24
	TCNT0 = 0;
 3d4:	16 bc       	out	0x26, r1	; 38

}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	8f 91       	pop	r24
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_15>:

ISR(TIMER0_COMPB_vect){
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0B);
 3f8:	ee e6       	ldi	r30, 0x6E	; 110
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8b 7f       	andi	r24, 0xFB	; 251
 400:	80 83       	st	Z, r24
	if(isNegative == false){
 402:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <isNegative>
 406:	81 11       	cpse	r24, r1
 408:	05 c0       	rjmp	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		SET_SW2;
 40a:	5d 9a       	sbi	0x0b, 5	; 11
		isNegative = true;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <isNegative>
 412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	}
	else{
		SET_SW1;
 414:	28 9a       	sbi	0x05, 0	; 5
		isNegative = false;
 416:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <isNegative>
	}
	if(change_duty == true){
 41a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <change_duty>
 41e:	88 23       	and	r24, r24
 420:	e1 f0       	breq	.+56     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		TIMSK0 &= ~(1 << OCIE0A);
 422:	ee e6       	ldi	r30, 0x6E	; 110
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	8d 7f       	andi	r24, 0xFD	; 253
 42a:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);
 42c:	ef e6       	ldi	r30, 0x6F	; 111
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	8d 7f       	andi	r24, 0xFD	; 253
 434:	80 83       	st	Z, r24
		TIMSK1 &= (1 << OCIE1B);
 436:	80 81       	ld	r24, Z
 438:	84 70       	andi	r24, 0x04	; 4
 43a:	80 83       	st	Z, r24
		OCR0A = t1_compare_a;
 43c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <t1_compare_a>
 440:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <t1_compare_a+0x1>
 444:	87 bd       	out	0x27, r24	; 39
		OCR1B = t1_compare_b;
 446:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <t1_compare_b>
 44a:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <t1_compare_b+0x1>
 44e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 452:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		change_duty = false;
 456:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <change_duty>
	}
	TIMSK1 |= (1 << OCIE1B);
 45a:	ef e6       	ldi	r30, 0x6F	; 111
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	84 60       	ori	r24, 0x04	; 4
 462:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 464:	80 81       	ld	r24, Z
 466:	82 60       	ori	r24, 0x02	; 2
 468:	80 83       	st	Z, r24
	TCNT1 = 0;
 46a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 46e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	9f 91       	pop	r25
 478:	8f 91       	pop	r24
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	8f 93       	push	r24
 490:	ef 93       	push	r30
 492:	ff 93       	push	r31
	TIMSK1 &= ~(1 << OCIE1B);
 494:	ef e6       	ldi	r30, 0x6F	; 111
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	8b 7f       	andi	r24, 0xFB	; 251
 49c:	80 83       	st	Z, r24
	if(isNegative == false){
 49e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <isNegative>
 4a2:	81 11       	cpse	r24, r1
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__vector_12+0x26>
		CLR_SW1;
 4a6:	28 98       	cbi	0x05, 0	; 5
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__vector_12+0x28>
	}
	else{
		CLR_SW2;
 4aa:	5d 98       	cbi	0x0b, 5	; 11
	}
	TIMSK0 |= (1 << OCIE0A);
 4ac:	ee e6       	ldi	r30, 0x6E	; 110
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	80 83       	st	Z, r24
	TCNT0 = 0;
 4b6:	16 bc       	out	0x26, r1	; 38
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	8f 91       	pop	r24
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 4c8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 4cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 4d0:	e1 ec       	ldi	r30, 0xC1	; 193
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 4da:	80 81       	ld	r24, Z
 4dc:	80 61       	ori	r24, 0x10	; 16
 4de:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 4e0:	80 81       	ld	r24, Z
 4e2:	80 68       	ori	r24, 0x80	; 128
 4e4:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 4e6:	e2 ec       	ldi	r30, 0xC2	; 194
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	86 60       	ori	r24, 0x06	; 6
 4ee:	80 83       	st	Z, r24
 4f0:	08 95       	ret

000004f2 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 81       	ld	r18, Z
 4fa:	22 23       	and	r18, r18
 4fc:	69 f0       	breq	.+26     	; 0x518 <uart_transmit+0x26>
 4fe:	dc 01       	movw	r26, r24
 500:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 502:	e0 ec       	ldi	r30, 0xC0	; 192
 504:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 506:	c6 ec       	ldi	r28, 0xC6	; 198
 508:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 50a:	90 81       	ld	r25, Z
 50c:	95 ff       	sbrs	r25, 5
 50e:	fd cf       	rjmp	.-6      	; 0x50a <uart_transmit+0x18>
		UDR0 = message[i];
 510:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 512:	2d 91       	ld	r18, X+
 514:	21 11       	cpse	r18, r1
 516:	f9 cf       	rjmp	.-14     	; 0x50a <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 51e:	fc 01       	movw	r30, r24
 520:	31 96       	adiw	r30, 0x01	; 1
 522:	04 96       	adiw	r24, 0x04	; 4
	int value = 0;
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 528:	a9 01       	movw	r20, r18
 52a:	44 0f       	add	r20, r20
 52c:	55 1f       	adc	r21, r21
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	22 0f       	add	r18, r18
 538:	33 1f       	adc	r19, r19
 53a:	24 0f       	add	r18, r20
 53c:	35 1f       	adc	r19, r21
 53e:	41 91       	ld	r20, Z+
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	40 53       	subi	r20, 0x30	; 48
 544:	51 09       	sbc	r21, r1
 546:	24 0f       	add	r18, r20
 548:	35 1f       	adc	r19, r21

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 54a:	e8 17       	cp	r30, r24
 54c:	f9 07       	cpc	r31, r25
 54e:	61 f7       	brne	.-40     	; 0x528 <process_message+0xa>
// 	}

// 	for(unsigned int i = 0; i < 3; i++){
// 		value = value*10 + (tmp[i] - 48);
// 	}
	*mfc = value;
 550:	fb 01       	movw	r30, r22
 552:	31 83       	std	Z+1, r19	; 0x01
 554:	20 83       	st	Z, r18
 556:	08 95       	ret

00000558 <__subsf3>:
 558:	50 58       	subi	r21, 0x80	; 128

0000055a <__addsf3>:
 55a:	bb 27       	eor	r27, r27
 55c:	aa 27       	eor	r26, r26
 55e:	0e 94 c4 02 	call	0x588	; 0x588 <__addsf3x>
 562:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_round>
 566:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscA>
 56a:	38 f0       	brcs	.+14     	; 0x57a <__addsf3+0x20>
 56c:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_pscB>
 570:	20 f0       	brcs	.+8      	; 0x57a <__addsf3+0x20>
 572:	39 f4       	brne	.+14     	; 0x582 <__addsf3+0x28>
 574:	9f 3f       	cpi	r25, 0xFF	; 255
 576:	19 f4       	brne	.+6      	; 0x57e <__addsf3+0x24>
 578:	26 f4       	brtc	.+8      	; 0x582 <__addsf3+0x28>
 57a:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_nan>
 57e:	0e f4       	brtc	.+2      	; 0x582 <__addsf3+0x28>
 580:	e0 95       	com	r30
 582:	e7 fb       	bst	r30, 7
 584:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>

00000588 <__addsf3x>:
 588:	e9 2f       	mov	r30, r25
 58a:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_split3>
 58e:	58 f3       	brcs	.-42     	; 0x566 <__addsf3+0xc>
 590:	ba 17       	cp	r27, r26
 592:	62 07       	cpc	r22, r18
 594:	73 07       	cpc	r23, r19
 596:	84 07       	cpc	r24, r20
 598:	95 07       	cpc	r25, r21
 59a:	20 f0       	brcs	.+8      	; 0x5a4 <__addsf3x+0x1c>
 59c:	79 f4       	brne	.+30     	; 0x5bc <__addsf3x+0x34>
 59e:	a6 f5       	brtc	.+104    	; 0x608 <__addsf3x+0x80>
 5a0:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_zero>
 5a4:	0e f4       	brtc	.+2      	; 0x5a8 <__addsf3x+0x20>
 5a6:	e0 95       	com	r30
 5a8:	0b 2e       	mov	r0, r27
 5aa:	ba 2f       	mov	r27, r26
 5ac:	a0 2d       	mov	r26, r0
 5ae:	0b 01       	movw	r0, r22
 5b0:	b9 01       	movw	r22, r18
 5b2:	90 01       	movw	r18, r0
 5b4:	0c 01       	movw	r0, r24
 5b6:	ca 01       	movw	r24, r20
 5b8:	a0 01       	movw	r20, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	ff 27       	eor	r31, r31
 5be:	59 1b       	sub	r21, r25
 5c0:	99 f0       	breq	.+38     	; 0x5e8 <__addsf3x+0x60>
 5c2:	59 3f       	cpi	r21, 0xF9	; 249
 5c4:	50 f4       	brcc	.+20     	; 0x5da <__addsf3x+0x52>
 5c6:	50 3e       	cpi	r21, 0xE0	; 224
 5c8:	68 f1       	brcs	.+90     	; 0x624 <__addsf3x+0x9c>
 5ca:	1a 16       	cp	r1, r26
 5cc:	f0 40       	sbci	r31, 0x00	; 0
 5ce:	a2 2f       	mov	r26, r18
 5d0:	23 2f       	mov	r18, r19
 5d2:	34 2f       	mov	r19, r20
 5d4:	44 27       	eor	r20, r20
 5d6:	58 5f       	subi	r21, 0xF8	; 248
 5d8:	f3 cf       	rjmp	.-26     	; 0x5c0 <__addsf3x+0x38>
 5da:	46 95       	lsr	r20
 5dc:	37 95       	ror	r19
 5de:	27 95       	ror	r18
 5e0:	a7 95       	ror	r26
 5e2:	f0 40       	sbci	r31, 0x00	; 0
 5e4:	53 95       	inc	r21
 5e6:	c9 f7       	brne	.-14     	; 0x5da <__addsf3x+0x52>
 5e8:	7e f4       	brtc	.+30     	; 0x608 <__addsf3x+0x80>
 5ea:	1f 16       	cp	r1, r31
 5ec:	ba 0b       	sbc	r27, r26
 5ee:	62 0b       	sbc	r22, r18
 5f0:	73 0b       	sbc	r23, r19
 5f2:	84 0b       	sbc	r24, r20
 5f4:	ba f0       	brmi	.+46     	; 0x624 <__addsf3x+0x9c>
 5f6:	91 50       	subi	r25, 0x01	; 1
 5f8:	a1 f0       	breq	.+40     	; 0x622 <__addsf3x+0x9a>
 5fa:	ff 0f       	add	r31, r31
 5fc:	bb 1f       	adc	r27, r27
 5fe:	66 1f       	adc	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	c2 f7       	brpl	.-16     	; 0x5f6 <__addsf3x+0x6e>
 606:	0e c0       	rjmp	.+28     	; 0x624 <__addsf3x+0x9c>
 608:	ba 0f       	add	r27, r26
 60a:	62 1f       	adc	r22, r18
 60c:	73 1f       	adc	r23, r19
 60e:	84 1f       	adc	r24, r20
 610:	48 f4       	brcc	.+18     	; 0x624 <__addsf3x+0x9c>
 612:	87 95       	ror	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b7 95       	ror	r27
 61a:	f7 95       	ror	r31
 61c:	9e 3f       	cpi	r25, 0xFE	; 254
 61e:	08 f0       	brcs	.+2      	; 0x622 <__addsf3x+0x9a>
 620:	b0 cf       	rjmp	.-160    	; 0x582 <__addsf3+0x28>
 622:	93 95       	inc	r25
 624:	88 0f       	add	r24, r24
 626:	08 f0       	brcs	.+2      	; 0x62a <__addsf3x+0xa2>
 628:	99 27       	eor	r25, r25
 62a:	ee 0f       	add	r30, r30
 62c:	97 95       	ror	r25
 62e:	87 95       	ror	r24
 630:	08 95       	ret

00000632 <__divsf3>:
 632:	0e 94 2d 03 	call	0x65a	; 0x65a <__divsf3x>
 636:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_round>
 63a:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_pscB>
 63e:	58 f0       	brcs	.+22     	; 0x656 <__divsf3+0x24>
 640:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscA>
 644:	40 f0       	brcs	.+16     	; 0x656 <__divsf3+0x24>
 646:	29 f4       	brne	.+10     	; 0x652 <__divsf3+0x20>
 648:	5f 3f       	cpi	r21, 0xFF	; 255
 64a:	29 f0       	breq	.+10     	; 0x656 <__divsf3+0x24>
 64c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 650:	51 11       	cpse	r21, r1
 652:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>
 656:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_nan>

0000065a <__divsf3x>:
 65a:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_split3>
 65e:	68 f3       	brcs	.-38     	; 0x63a <__divsf3+0x8>

00000660 <__divsf3_pse>:
 660:	99 23       	and	r25, r25
 662:	b1 f3       	breq	.-20     	; 0x650 <__divsf3+0x1e>
 664:	55 23       	and	r21, r21
 666:	91 f3       	breq	.-28     	; 0x64c <__divsf3+0x1a>
 668:	95 1b       	sub	r25, r21
 66a:	55 0b       	sbc	r21, r21
 66c:	bb 27       	eor	r27, r27
 66e:	aa 27       	eor	r26, r26
 670:	62 17       	cp	r22, r18
 672:	73 07       	cpc	r23, r19
 674:	84 07       	cpc	r24, r20
 676:	38 f0       	brcs	.+14     	; 0x686 <__divsf3_pse+0x26>
 678:	9f 5f       	subi	r25, 0xFF	; 255
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	44 1f       	adc	r20, r20
 682:	aa 1f       	adc	r26, r26
 684:	a9 f3       	breq	.-22     	; 0x670 <__divsf3_pse+0x10>
 686:	35 d0       	rcall	.+106    	; 0x6f2 <__divsf3_pse+0x92>
 688:	0e 2e       	mov	r0, r30
 68a:	3a f0       	brmi	.+14     	; 0x69a <__divsf3_pse+0x3a>
 68c:	e0 e8       	ldi	r30, 0x80	; 128
 68e:	32 d0       	rcall	.+100    	; 0x6f4 <__divsf3_pse+0x94>
 690:	91 50       	subi	r25, 0x01	; 1
 692:	50 40       	sbci	r21, 0x00	; 0
 694:	e6 95       	lsr	r30
 696:	00 1c       	adc	r0, r0
 698:	ca f7       	brpl	.-14     	; 0x68c <__divsf3_pse+0x2c>
 69a:	2b d0       	rcall	.+86     	; 0x6f2 <__divsf3_pse+0x92>
 69c:	fe 2f       	mov	r31, r30
 69e:	29 d0       	rcall	.+82     	; 0x6f2 <__divsf3_pse+0x92>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	88 1f       	adc	r24, r24
 6a6:	bb 1f       	adc	r27, r27
 6a8:	26 17       	cp	r18, r22
 6aa:	37 07       	cpc	r19, r23
 6ac:	48 07       	cpc	r20, r24
 6ae:	ab 07       	cpc	r26, r27
 6b0:	b0 e8       	ldi	r27, 0x80	; 128
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__divsf3_pse+0x56>
 6b4:	bb 0b       	sbc	r27, r27
 6b6:	80 2d       	mov	r24, r0
 6b8:	bf 01       	movw	r22, r30
 6ba:	ff 27       	eor	r31, r31
 6bc:	93 58       	subi	r25, 0x83	; 131
 6be:	5f 4f       	sbci	r21, 0xFF	; 255
 6c0:	3a f0       	brmi	.+14     	; 0x6d0 <__divsf3_pse+0x70>
 6c2:	9e 3f       	cpi	r25, 0xFE	; 254
 6c4:	51 05       	cpc	r21, r1
 6c6:	78 f0       	brcs	.+30     	; 0x6e6 <__divsf3_pse+0x86>
 6c8:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 6cc:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	e4 f3       	brlt	.-8      	; 0x6cc <__divsf3_pse+0x6c>
 6d4:	98 3e       	cpi	r25, 0xE8	; 232
 6d6:	d4 f3       	brlt	.-12     	; 0x6cc <__divsf3_pse+0x6c>
 6d8:	86 95       	lsr	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b7 95       	ror	r27
 6e0:	f7 95       	ror	r31
 6e2:	9f 5f       	subi	r25, 0xFF	; 255
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__divsf3_pse+0x78>
 6e6:	88 0f       	add	r24, r24
 6e8:	91 1d       	adc	r25, r1
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret
 6f2:	e1 e0       	ldi	r30, 0x01	; 1
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	bb 1f       	adc	r27, r27
 6fc:	62 17       	cp	r22, r18
 6fe:	73 07       	cpc	r23, r19
 700:	84 07       	cpc	r24, r20
 702:	ba 07       	cpc	r27, r26
 704:	20 f0       	brcs	.+8      	; 0x70e <__divsf3_pse+0xae>
 706:	62 1b       	sub	r22, r18
 708:	73 0b       	sbc	r23, r19
 70a:	84 0b       	sbc	r24, r20
 70c:	ba 0b       	sbc	r27, r26
 70e:	ee 1f       	adc	r30, r30
 710:	88 f7       	brcc	.-30     	; 0x6f4 <__divsf3_pse+0x94>
 712:	e0 95       	com	r30
 714:	08 95       	ret

00000716 <__fixunssfsi>:
 716:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_splitA>
 71a:	88 f0       	brcs	.+34     	; 0x73e <__fixunssfsi+0x28>
 71c:	9f 57       	subi	r25, 0x7F	; 127
 71e:	98 f0       	brcs	.+38     	; 0x746 <__fixunssfsi+0x30>
 720:	b9 2f       	mov	r27, r25
 722:	99 27       	eor	r25, r25
 724:	b7 51       	subi	r27, 0x17	; 23
 726:	b0 f0       	brcs	.+44     	; 0x754 <__fixunssfsi+0x3e>
 728:	e1 f0       	breq	.+56     	; 0x762 <__fixunssfsi+0x4c>
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	1a f0       	brmi	.+6      	; 0x73a <__fixunssfsi+0x24>
 734:	ba 95       	dec	r27
 736:	c9 f7       	brne	.-14     	; 0x72a <__fixunssfsi+0x14>
 738:	14 c0       	rjmp	.+40     	; 0x762 <__fixunssfsi+0x4c>
 73a:	b1 30       	cpi	r27, 0x01	; 1
 73c:	91 f0       	breq	.+36     	; 0x762 <__fixunssfsi+0x4c>
 73e:	0e 94 41 04 	call	0x882	; 0x882 <__fp_zero>
 742:	b1 e0       	ldi	r27, 0x01	; 1
 744:	08 95       	ret
 746:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_zero>
 74a:	67 2f       	mov	r22, r23
 74c:	78 2f       	mov	r23, r24
 74e:	88 27       	eor	r24, r24
 750:	b8 5f       	subi	r27, 0xF8	; 248
 752:	39 f0       	breq	.+14     	; 0x762 <__fixunssfsi+0x4c>
 754:	b9 3f       	cpi	r27, 0xF9	; 249
 756:	cc f3       	brlt	.-14     	; 0x74a <__fixunssfsi+0x34>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b3 95       	inc	r27
 760:	d9 f7       	brne	.-10     	; 0x758 <__fixunssfsi+0x42>
 762:	3e f4       	brtc	.+14     	; 0x772 <__fixunssfsi+0x5c>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	08 95       	ret

00000774 <__floatunsisf>:
 774:	e8 94       	clt
 776:	09 c0       	rjmp	.+18     	; 0x78a <__floatsisf+0x12>

00000778 <__floatsisf>:
 778:	97 fb       	bst	r25, 7
 77a:	3e f4       	brtc	.+14     	; 0x78a <__floatsisf+0x12>
 77c:	90 95       	com	r25
 77e:	80 95       	com	r24
 780:	70 95       	com	r23
 782:	61 95       	neg	r22
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	99 23       	and	r25, r25
 78c:	a9 f0       	breq	.+42     	; 0x7b8 <__floatsisf+0x40>
 78e:	f9 2f       	mov	r31, r25
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	bb 27       	eor	r27, r27
 794:	93 95       	inc	r25
 796:	f6 95       	lsr	r31
 798:	87 95       	ror	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f1 11       	cpse	r31, r1
 7a2:	f8 cf       	rjmp	.-16     	; 0x794 <__floatsisf+0x1c>
 7a4:	fa f4       	brpl	.+62     	; 0x7e4 <__floatsisf+0x6c>
 7a6:	bb 0f       	add	r27, r27
 7a8:	11 f4       	brne	.+4      	; 0x7ae <__floatsisf+0x36>
 7aa:	60 ff       	sbrs	r22, 0
 7ac:	1b c0       	rjmp	.+54     	; 0x7e4 <__floatsisf+0x6c>
 7ae:	6f 5f       	subi	r22, 0xFF	; 255
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <__floatsisf+0x6c>
 7b8:	88 23       	and	r24, r24
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <__floatsisf+0x48>
 7bc:	96 e9       	ldi	r25, 0x96	; 150
 7be:	11 c0       	rjmp	.+34     	; 0x7e2 <__floatsisf+0x6a>
 7c0:	77 23       	and	r23, r23
 7c2:	21 f0       	breq	.+8      	; 0x7cc <__floatsisf+0x54>
 7c4:	9e e8       	ldi	r25, 0x8E	; 142
 7c6:	87 2f       	mov	r24, r23
 7c8:	76 2f       	mov	r23, r22
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <__floatsisf+0x5e>
 7cc:	66 23       	and	r22, r22
 7ce:	71 f0       	breq	.+28     	; 0x7ec <__floatsisf+0x74>
 7d0:	96 e8       	ldi	r25, 0x86	; 134
 7d2:	86 2f       	mov	r24, r22
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	2a f0       	brmi	.+10     	; 0x7e4 <__floatsisf+0x6c>
 7da:	9a 95       	dec	r25
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	da f7       	brpl	.-10     	; 0x7da <__floatsisf+0x62>
 7e4:	88 0f       	add	r24, r24
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <__fp_inf>:
 7ee:	97 f9       	bld	r25, 7
 7f0:	9f 67       	ori	r25, 0x7F	; 127
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	08 95       	ret

000007fa <__fp_nan>:
 7fa:	9f ef       	ldi	r25, 0xFF	; 255
 7fc:	80 ec       	ldi	r24, 0xC0	; 192
 7fe:	08 95       	ret

00000800 <__fp_pscA>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	16 16       	cp	r1, r22
 806:	17 06       	cpc	r1, r23
 808:	18 06       	cpc	r1, r24
 80a:	09 06       	cpc	r0, r25
 80c:	08 95       	ret

0000080e <__fp_pscB>:
 80e:	00 24       	eor	r0, r0
 810:	0a 94       	dec	r0
 812:	12 16       	cp	r1, r18
 814:	13 06       	cpc	r1, r19
 816:	14 06       	cpc	r1, r20
 818:	05 06       	cpc	r0, r21
 81a:	08 95       	ret

0000081c <__fp_round>:
 81c:	09 2e       	mov	r0, r25
 81e:	03 94       	inc	r0
 820:	00 0c       	add	r0, r0
 822:	11 f4       	brne	.+4      	; 0x828 <__fp_round+0xc>
 824:	88 23       	and	r24, r24
 826:	52 f0       	brmi	.+20     	; 0x83c <__fp_round+0x20>
 828:	bb 0f       	add	r27, r27
 82a:	40 f4       	brcc	.+16     	; 0x83c <__fp_round+0x20>
 82c:	bf 2b       	or	r27, r31
 82e:	11 f4       	brne	.+4      	; 0x834 <__fp_round+0x18>
 830:	60 ff       	sbrs	r22, 0
 832:	04 c0       	rjmp	.+8      	; 0x83c <__fp_round+0x20>
 834:	6f 5f       	subi	r22, 0xFF	; 255
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__fp_split3>:
 83e:	57 fd       	sbrc	r21, 7
 840:	90 58       	subi	r25, 0x80	; 128
 842:	44 0f       	add	r20, r20
 844:	55 1f       	adc	r21, r21
 846:	59 f0       	breq	.+22     	; 0x85e <__fp_splitA+0x10>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	71 f0       	breq	.+28     	; 0x868 <__fp_splitA+0x1a>
 84c:	47 95       	ror	r20

0000084e <__fp_splitA>:
 84e:	88 0f       	add	r24, r24
 850:	97 fb       	bst	r25, 7
 852:	99 1f       	adc	r25, r25
 854:	61 f0       	breq	.+24     	; 0x86e <__fp_splitA+0x20>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	79 f0       	breq	.+30     	; 0x878 <__fp_splitA+0x2a>
 85a:	87 95       	ror	r24
 85c:	08 95       	ret
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	55 1f       	adc	r21, r21
 866:	f2 cf       	rjmp	.-28     	; 0x84c <__fp_split3+0xe>
 868:	46 95       	lsr	r20
 86a:	f1 df       	rcall	.-30     	; 0x84e <__fp_splitA>
 86c:	08 c0       	rjmp	.+16     	; 0x87e <__fp_splitA+0x30>
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	99 1f       	adc	r25, r25
 876:	f1 cf       	rjmp	.-30     	; 0x85a <__fp_splitA+0xc>
 878:	86 95       	lsr	r24
 87a:	71 05       	cpc	r23, r1
 87c:	61 05       	cpc	r22, r1
 87e:	08 94       	sec
 880:	08 95       	ret

00000882 <__fp_zero>:
 882:	e8 94       	clt

00000884 <__fp_szero>:
 884:	bb 27       	eor	r27, r27
 886:	66 27       	eor	r22, r22
 888:	77 27       	eor	r23, r23
 88a:	cb 01       	movw	r24, r22
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__mulsf3>:
 890:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__mulsf3x>
 894:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_round>
 898:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscA>
 89c:	38 f0       	brcs	.+14     	; 0x8ac <__mulsf3+0x1c>
 89e:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_pscB>
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__mulsf3+0x1c>
 8a4:	95 23       	and	r25, r21
 8a6:	11 f0       	breq	.+4      	; 0x8ac <__mulsf3+0x1c>
 8a8:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 8ac:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_nan>
 8b0:	11 24       	eor	r1, r1
 8b2:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>

000008b6 <__mulsf3x>:
 8b6:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_split3>
 8ba:	70 f3       	brcs	.-36     	; 0x898 <__mulsf3+0x8>

000008bc <__mulsf3_pse>:
 8bc:	95 9f       	mul	r25, r21
 8be:	c1 f3       	breq	.-16     	; 0x8b0 <__mulsf3+0x20>
 8c0:	95 0f       	add	r25, r21
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	55 1f       	adc	r21, r21
 8c6:	62 9f       	mul	r22, r18
 8c8:	f0 01       	movw	r30, r0
 8ca:	72 9f       	mul	r23, r18
 8cc:	bb 27       	eor	r27, r27
 8ce:	f0 0d       	add	r31, r0
 8d0:	b1 1d       	adc	r27, r1
 8d2:	63 9f       	mul	r22, r19
 8d4:	aa 27       	eor	r26, r26
 8d6:	f0 0d       	add	r31, r0
 8d8:	b1 1d       	adc	r27, r1
 8da:	aa 1f       	adc	r26, r26
 8dc:	64 9f       	mul	r22, r20
 8de:	66 27       	eor	r22, r22
 8e0:	b0 0d       	add	r27, r0
 8e2:	a1 1d       	adc	r26, r1
 8e4:	66 1f       	adc	r22, r22
 8e6:	82 9f       	mul	r24, r18
 8e8:	22 27       	eor	r18, r18
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	62 1f       	adc	r22, r18
 8f0:	73 9f       	mul	r23, r19
 8f2:	b0 0d       	add	r27, r0
 8f4:	a1 1d       	adc	r26, r1
 8f6:	62 1f       	adc	r22, r18
 8f8:	83 9f       	mul	r24, r19
 8fa:	a0 0d       	add	r26, r0
 8fc:	61 1d       	adc	r22, r1
 8fe:	22 1f       	adc	r18, r18
 900:	74 9f       	mul	r23, r20
 902:	33 27       	eor	r19, r19
 904:	a0 0d       	add	r26, r0
 906:	61 1d       	adc	r22, r1
 908:	23 1f       	adc	r18, r19
 90a:	84 9f       	mul	r24, r20
 90c:	60 0d       	add	r22, r0
 90e:	21 1d       	adc	r18, r1
 910:	82 2f       	mov	r24, r18
 912:	76 2f       	mov	r23, r22
 914:	6a 2f       	mov	r22, r26
 916:	11 24       	eor	r1, r1
 918:	9f 57       	subi	r25, 0x7F	; 127
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	9a f0       	brmi	.+38     	; 0x944 <__stack+0x45>
 91e:	f1 f0       	breq	.+60     	; 0x95c <__stack+0x5d>
 920:	88 23       	and	r24, r24
 922:	4a f0       	brmi	.+18     	; 0x936 <__stack+0x37>
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	bb 1f       	adc	r27, r27
 92a:	66 1f       	adc	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	91 50       	subi	r25, 0x01	; 1
 932:	50 40       	sbci	r21, 0x00	; 0
 934:	a9 f7       	brne	.-22     	; 0x920 <__stack+0x21>
 936:	9e 3f       	cpi	r25, 0xFE	; 254
 938:	51 05       	cpc	r21, r1
 93a:	80 f0       	brcs	.+32     	; 0x95c <__stack+0x5d>
 93c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 940:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	e4 f3       	brlt	.-8      	; 0x940 <__stack+0x41>
 948:	98 3e       	cpi	r25, 0xE8	; 232
 94a:	d4 f3       	brlt	.-12     	; 0x940 <__stack+0x41>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f7 95       	ror	r31
 956:	e7 95       	ror	r30
 958:	9f 5f       	subi	r25, 0xFF	; 255
 95a:	c1 f7       	brne	.-16     	; 0x94c <__stack+0x4d>
 95c:	fe 2b       	or	r31, r30
 95e:	88 0f       	add	r24, r24
 960:	91 1d       	adc	r25, r1
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret

0000096a <_exit>:
 96a:	f8 94       	cli

0000096c <__stop_program>:
 96c:	ff cf       	rjmp	.-2      	; 0x96c <__stop_program>
