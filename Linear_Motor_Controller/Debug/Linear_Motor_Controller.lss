
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000db4  00000e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000061b  00800148  00800148  00000e90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002697  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  00003697  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3b  00000000  00000000  000041f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00004f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000790  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001653  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000070ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_7>
  20:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_8>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_11>
  30:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 36       	cpi	r26, 0x63	; 99
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 34 03 	call	0x668	; 0x668 <main>
  9e:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_initiate>:

#include "includes.h"

void adc_initiate(){
	//Set ADC prescalar
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
	
	//Select AVcc reference
	//ADMUX |= (1 << REFS0);

	//Enable ADC
	ADCSRA |= (1 << ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//ADMUX |= (1 << ADLAR);
	
	//Enable ADC interrupt
	ADCSRA |= (1 << ADIE);
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	//Enable ADC auto trigger
	ADCSRA |= (1 << ADATE);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	
	//Set auto trigger source to timer 0
	ADCSRB |= (1 << ADTS1) | (1 << ADTS0);
  c2:	ab e7       	ldi	r26, 0x7B	; 123
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	8c 91       	ld	r24, X
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	8c 93       	st	X, r24

	//Set timer 0 prescalar to 64
	TCCR0B |= (1 << CS00) | (1 << CS01);
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	85 bd       	out	0x25, r24	; 37

	//Enable conversion

	ADMUX |= (1 << MUX0);
  d2:	ac e7       	ldi	r26, 0x7C	; 124
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	8c 91       	ld	r24, X
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8c 93       	st	X, r24

	ADCSRA |= (1 << ADSC);
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <adc_start>:
}

void adc_start(float* operating_frequency){
	
	 	OCR0A = (uint8_t) 5;//(F_CPU/(64.0 * (float)SAMPLING_SIZE * (*operating_frequency)));
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	87 bd       	out	0x27, r24	; 39
	 	TIMSK0 |= (1 << OCIE0A);
  e8:	ee e6       	ldi	r30, 0x6E	; 110
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
	 	TCNT0 = 0;
  f2:	16 bc       	out	0x26, r1	; 38
	compA_count = 0;
  f4:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <compA_count>
  f8:	08 95       	ret

000000fa <__vector_14>:
}

 ISR(TIMER0_COMPA_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
	//ADCSRA |= (1 << ADSC);
	compA_count++;
 106:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <compA_count>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <compA_count>
	TCNT0 = 0;
 110:	16 bc       	out	0x26, r1	; 38
 }
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_21>:

ISR(ADC_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
// 	if(!testvalue){
// 		testadcvalue = ADC;
// 		testvalue = true;
// 	}
		if (beginCalculation==0){
 134:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <beginCalculation>
 138:	81 11       	cpse	r24, r1
 13a:	8a c0       	rjmp	.+276    	; 0x250 <__vector_21+0x132>
	 		//ADCSRA &= ~(1<<ADATE);
	 		if ((i%10) == 0){
 13c:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <i>
 140:	8d ec       	ldi	r24, 0xCD	; 205
 142:	28 9f       	mul	r18, r24
 144:	81 2d       	mov	r24, r1
 146:	11 24       	eor	r1, r1
 148:	86 95       	lsr	r24
 14a:	86 95       	lsr	r24
 14c:	86 95       	lsr	r24
 14e:	88 0f       	add	r24, r24
 150:	98 2f       	mov	r25, r24
 152:	99 0f       	add	r25, r25
 154:	99 0f       	add	r25, r25
 156:	89 0f       	add	r24, r25
 158:	28 13       	cpse	r18, r24
 15a:	30 c0       	rjmp	.+96     	; 0x1bc <__vector_21+0x9e>
				 j=i/10;
 15c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i>
 160:	9d ec       	ldi	r25, 0xCD	; 205
 162:	89 9f       	mul	r24, r25
 164:	81 2d       	mov	r24, r1
 166:	11 24       	eor	r1, r1
 168:	86 95       	lsr	r24
 16a:	86 95       	lsr	r24
 16c:	86 95       	lsr	r24
 16e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <j>
	 			voltage[j] = ADC;
 172:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <j>
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 17c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ec 5a       	subi	r30, 0xAC	; 172
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	91 83       	std	Z+1, r25	; 0x01
 18a:	80 83       	st	Z, r24
// 				 array[3] = ones;
// 				 array[4] = '\0';
// 				 uart_transmit(array);
// 				 uart_transmit("\n\r");
				 
	 			voltageTime[j] = TCNT0 + compA_count*OCR0A;
 18c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <j>
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	86 b5       	in	r24, 0x26	; 38
 194:	30 91 2a 05 	lds	r19, 0x052A	; 0x80052a <compA_count>
 198:	27 b5       	in	r18, 0x27	; 39
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	32 9f       	mul	r19, r18
 19e:	80 0d       	add	r24, r0
 1a0:	91 1d       	adc	r25, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ea 52       	subi	r30, 0x2A	; 42
 1aa:	fc 4f       	sbci	r31, 0xFC	; 252
 1ac:	91 83       	std	Z+1, r25	; 0x01
 1ae:	80 83       	st	Z, r24
	 			ADMUX &= ~(1<<MUX0);
 1b0:	ec e7       	ldi	r30, 0x7C	; 124
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	80 83       	st	Z, r24
 1ba:	35 c0       	rjmp	.+106    	; 0x226 <__vector_21+0x108>
	 		} else {
	 			current[i] = ADC;
 1bc:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <i>
 1c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ea 50       	subi	r30, 0x0A	; 10
 1d0:	fc 4f       	sbci	r31, 0xFC	; 252
 1d2:	91 83       	std	Z+1, r25	; 0x01
 1d4:	80 83       	st	Z, r24
				currentTime[i]= TCNT0 + compA_count*OCR0A;
 1d6:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <i>
 1da:	86 b5       	in	r24, 0x26	; 38
 1dc:	30 91 2a 05 	lds	r19, 0x052A	; 0x80052a <compA_count>
 1e0:	27 b5       	in	r18, 0x27	; 39
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	ee 5c       	subi	r30, 0xCE	; 206
 1ea:	fa 4f       	sbci	r31, 0xFA	; 250
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	32 9f       	mul	r19, r18
 1f0:	80 0d       	add	r24, r0
 1f2:	91 1d       	adc	r25, r1
 1f4:	11 24       	eor	r1, r1
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
// 				array[4] = '\0';
// 				uart_transmit(array);
// 				uart_transmit("\n\r");

				
	 			if (i%10 == 9){
 1fa:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i>
 1fe:	8d ec       	ldi	r24, 0xCD	; 205
 200:	98 9f       	mul	r25, r24
 202:	81 2d       	mov	r24, r1
 204:	11 24       	eor	r1, r1
 206:	86 95       	lsr	r24
 208:	86 95       	lsr	r24
 20a:	86 95       	lsr	r24
 20c:	88 0f       	add	r24, r24
 20e:	28 2f       	mov	r18, r24
 210:	22 0f       	add	r18, r18
 212:	22 0f       	add	r18, r18
 214:	82 0f       	add	r24, r18
 216:	98 1b       	sub	r25, r24
 218:	99 30       	cpi	r25, 0x09	; 9
 21a:	29 f4       	brne	.+10     	; 0x226 <__vector_21+0x108>
	 				ADMUX |= (1<<MUX0);
 21c:	ec e7       	ldi	r30, 0x7C	; 124
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	81 60       	ori	r24, 0x01	; 1
 224:	80 83       	st	Z, r24
	 			}
	 		}
	 		i++;
 226:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i>
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <i>
	 		if (i == (SAMPLING_SIZE-1)){
 230:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i>
 234:	85 39       	cpi	r24, 0x95	; 149
 236:	61 f4       	brne	.+24     	; 0x250 <__vector_21+0x132>
	 			TIMSK0 &= ~(1<<OCIE0A); //disables further adc reading by disabling compare interrupt
 238:	ee e6       	ldi	r30, 0x6E	; 110
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	80 83       	st	Z, r24
	 			beginCalculation = 1; //stops adc sampling and saves values to perform calculations
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <beginCalculation>
	 			i=0;
 248:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <i>
	 			compA_count = 0;
 24c:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <compA_count>
// 			else {
// 	 			ADCSRA |= (1<<ADATE);
// 	 		}

	}
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <driver_timer_initiate>:
#define SET_SW4 PORTD |= (1 << PD6)
#define CLR_SW4 PORTD &= ~(1 << PD6)

void driver_timer_initiate(void){
	//Timer 1 8bit (no prescalar)
	TCCR2B |= (1 << CS20);
 266:	e1 eb       	ldi	r30, 0xB1	; 177
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24
	OCR2A = HIGH_OFF_TIME_COUNT_VALUE;
 270:	80 e4       	ldi	r24, 0x40	; 64
 272:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = LOW_OFF_TIME_COUNT_VALUE;
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	//Timer 2 16bit (8 prescalar)
	TCCR1B |= (1 << CS11);
 27c:	e1 e8       	ldi	r30, 0x81	; 129
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24

	//Set pins to output
	DDRB |= (1 << DDB0);
 286:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
 288:	8a b1       	in	r24, 0x0a	; 10
 28a:	80 6e       	ori	r24, 0xE0	; 224
 28c:	8a b9       	out	0x0a, r24	; 10

	//Set initial switches
	SET_SW1;
 28e:	28 9a       	sbi	0x05, 0	; 5
	SET_SW4;
 290:	5e 9a       	sbi	0x0b, 6	; 11
	CLR_SW2;
 292:	5d 98       	cbi	0x0b, 5	; 11
	CLR_SW3;
 294:	5f 98       	cbi	0x0b, 7	; 11

	change_duty = false;
 296:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <change_duty>
	first_cycle = true;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <first_cycle>
 2a0:	08 95       	ret

000002a2 <set_parameters>:
}

void set_parameters(float frequency, uint8_t mfc){
 2a2:	4f 92       	push	r4
 2a4:	5f 92       	push	r5
 2a6:	6f 92       	push	r6
 2a8:	7f 92       	push	r7
 2aa:	8f 92       	push	r8
 2ac:	9f 92       	push	r9
 2ae:	af 92       	push	r10
 2b0:	bf 92       	push	r11
 2b2:	cf 92       	push	r12
 2b4:	df 92       	push	r13
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	6b 01       	movw	r12, r22
 2bc:	7c 01       	movw	r14, r24
	mfr = (int)mfc;
 2be:	84 2f       	mov	r24, r20
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <mfr+0x1>
 2c6:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <mfr>
	float duty_cycle = (float)mfc/255;
 2ca:	64 2f       	mov	r22, r20
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__floatunsisf>
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	4f e7       	ldi	r20, 0x7F	; 127
 2dc:	53 e4       	ldi	r21, 0x43	; 67
 2de:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divsf3>
 2e2:	2b 01       	movw	r4, r22
 2e4:	3c 01       	movw	r6, r24
	float off_time = ((1000/(2*(frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(1-duty_cycle);
 2e6:	a7 01       	movw	r20, r14
 2e8:	96 01       	movw	r18, r12
 2ea:	c7 01       	movw	r24, r14
 2ec:	b6 01       	movw	r22, r12
 2ee:	0e 94 c1 04 	call	0x982	; 0x982 <__addsf3>
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	8a e7       	ldi	r24, 0x7A	; 122
 2fc:	94 e4       	ldi	r25, 0x44	; 68
 2fe:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divsf3>
 302:	4b 01       	movw	r8, r22
 304:	5c 01       	movw	r10, r24
	float on_time = ((1000/(2*(frequency)))-(LOW_OFF_TIME+HIGH_OFF_TIME)/1000)*(duty_cycle);
 306:	9b 01       	movw	r18, r22
 308:	ac 01       	movw	r20, r24
 30a:	c3 01       	movw	r24, r6
 30c:	b2 01       	movw	r22, r4
 30e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulsf3>
 312:	6b 01       	movw	r12, r22
 314:	7c 01       	movw	r14, r24

	//Set T1 Compare
	t1_compare_a = (uint16_t)((on_time+off_time+HIGH_OFF_TIME/1000)*1000);
 316:	a3 01       	movw	r20, r6
 318:	92 01       	movw	r18, r4
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	9f e3       	ldi	r25, 0x3F	; 63
 322:	0e 94 c0 04 	call	0x980	; 0x980 <__subsf3>
 326:	a5 01       	movw	r20, r10
 328:	94 01       	movw	r18, r8
 32a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulsf3>
 32e:	a7 01       	movw	r20, r14
 330:	96 01       	movw	r18, r12
 332:	0e 94 c1 04 	call	0x982	; 0x982 <__addsf3>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	a9 01       	movw	r20, r18
 33c:	0e 94 c1 04 	call	0x982	; 0x982 <__addsf3>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	4a e7       	ldi	r20, 0x7A	; 122
 346:	54 e4       	ldi	r21, 0x44	; 68
 348:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulsf3>
 34c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 350:	70 93 2c 05 	sts	0x052C, r23	; 0x80052c <t1_compare_a+0x1>
 354:	60 93 2b 05 	sts	0x052B, r22	; 0x80052b <t1_compare_a>
	t1_compare_b = (uint16_t)(on_time*1000);
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	4a e7       	ldi	r20, 0x7A	; 122
 35e:	54 e4       	ldi	r21, 0x44	; 68
 360:	c7 01       	movw	r24, r14
 362:	b6 01       	movw	r22, r12
 364:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulsf3>
 368:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 36c:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <t1_compare_b+0x1>
 370:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <t1_compare_b>

	isNegative = false;
 374:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <isNegative>
	change_duty = true;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <change_duty>

	if(first_cycle){
 37e:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <first_cycle>
 382:	88 23       	and	r24, r24
 384:	91 f0       	breq	.+36     	; 0x3aa <set_parameters+0x108>
		OCR1A = (uint16_t)t1_compare_a;
 386:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <t1_compare_a>
 38a:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <t1_compare_a+0x1>
 38e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 392:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = (uint16_t)t1_compare_b;
 396:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <t1_compare_b>
 39a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <t1_compare_b+0x1>
 39e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 3a2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		first_cycle = false;
 3a6:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <first_cycle>
	OCR1A = (uint16_t)t1_compare_a;
	OCR1B = (uint16_t)t1_compare_b;
	#endif

	//Initialise timer interrupt
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
 3aa:	ef e6       	ldi	r30, 0x6F	; 111
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	86 60       	ori	r24, 0x06	; 6
 3b2:	80 83       	st	Z, r24
	TCNT1 = 0;
 3b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
 3c8:	9f 90       	pop	r9
 3ca:	8f 90       	pop	r8
 3cc:	7f 90       	pop	r7
 3ce:	6f 90       	pop	r6
 3d0:	5f 90       	pop	r5
 3d2:	4f 90       	pop	r4
 3d4:	08 95       	ret

000003d6 <soft_start>:

void soft_start(float req_freq, int req_mfc){
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
	unsigned int i = 0;
	while(i != req_mfc){
 3e6:	41 15       	cp	r20, r1
 3e8:	51 05       	cpc	r21, r1
 3ea:	71 f0       	breq	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	8a 01       	movw	r16, r20
 3ee:	6b 01       	movw	r12, r22
 3f0:	7c 01       	movw	r14, r24
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
		set_parameters(req_freq, i);
 3f6:	4c 2f       	mov	r20, r28
 3f8:	c7 01       	movw	r24, r14
 3fa:	b6 01       	movw	r22, r12
 3fc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <set_parameters>
		i++;
 400:	21 96       	adiw	r28, 0x01	; 1
	TCNT1 = 0;
}

void soft_start(float req_freq, int req_mfc){
	unsigned int i = 0;
	while(i != req_mfc){
 402:	c0 17       	cp	r28, r16
 404:	d1 07       	cpc	r29, r17
 406:	b9 f7       	brne	.-18     	; 0x3f6 <soft_start+0x20>
		set_parameters(req_freq, i);
		i++;
	}
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	08 95       	ret

0000041a <__vector_7>:

ISR(TIMER2_COMPA_vect){
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2A);
 42a:	e0 e7       	ldi	r30, 0x70	; 112
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	8d 7f       	andi	r24, 0xFD	; 253
 432:	80 83       	st	Z, r24
	if(isNegative == false){
 434:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 438:	81 11       	cpse	r24, r1
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__vector_7+0x26>
		SET_SW3;
 43c:	5f 9a       	sbi	0x0b, 7	; 11
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__vector_7+0x28>
	}
	else{
		SET_SW4;
 440:	5e 9a       	sbi	0x0b, 6	; 11
	}
}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	8f 91       	pop	r24
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	8f 93       	push	r24
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
	if(isNegative == false){
 462:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 466:	81 11       	cpse	r24, r1
 468:	02 c0       	rjmp	.+4      	; 0x46e <__vector_11+0x1c>
		CLR_SW4;
 46a:	5e 98       	cbi	0x0b, 6	; 11
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 46e:	5f 98       	cbi	0x0b, 7	; 11
	}
	TIMSK1 &= ~(1 << OCIE1A);
 470:	ef e6       	ldi	r30, 0x6F	; 111
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	8d 7f       	andi	r24, 0xFD	; 253
 478:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1B);
 47a:	80 81       	ld	r24, Z
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2B);
 480:	e0 e7       	ldi	r30, 0x70	; 112
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	84 60       	ori	r24, 0x04	; 4
 488:	80 83       	st	Z, r24
	TCNT2 = 0;
 48a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	8f 91       	pop	r24
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <__vector_8>:

ISR(TIMER2_COMPB_vect){
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2B);
 4b0:	e0 e7       	ldi	r30, 0x70	; 112
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	8b 7f       	andi	r24, 0xFB	; 251
 4b8:	80 83       	st	Z, r24
	if(mfr == 0){
 4ba:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <mfr>
 4be:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <mfr+0x1>
 4c2:	89 2b       	or	r24, r25
 4c4:	c1 f4       	brne	.+48     	; 0x4f6 <__vector_8+0x58>
		TIMSK2 &= ~(1 << OCIE2A);
 4c6:	80 81       	ld	r24, Z
 4c8:	8d 7f       	andi	r24, 0xFD	; 253
 4ca:	80 83       	st	Z, r24
		TIMSK2 &= ~(1 << OCIE2B);
 4cc:	80 81       	ld	r24, Z
 4ce:	8b 7f       	andi	r24, 0xFB	; 251
 4d0:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);
 4d2:	ef e6       	ldi	r30, 0x6F	; 111
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	8d 7f       	andi	r24, 0xFD	; 253
 4da:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1B);
 4dc:	80 81       	ld	r24, Z
 4de:	8b 7f       	andi	r24, 0xFB	; 251
 4e0:	80 83       	st	Z, r24
		CLR_SW3;
 4e2:	5f 98       	cbi	0x0b, 7	; 11
		CLR_SW4;
 4e4:	5e 98       	cbi	0x0b, 6	; 11
		CLR_SW1;
 4e6:	28 98       	cbi	0x05, 0	; 5
		CLR_SW2;
 4e8:	5d 98       	cbi	0x0b, 5	; 11
		SET_SW3;
 4ea:	5f 9a       	sbi	0x0b, 7	; 11
		SET_SW4;
 4ec:	5e 9a       	sbi	0x0b, 6	; 11
		first_cycle = true;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <first_cycle>
 4f4:	2e c0       	rjmp	.+92     	; 0x552 <__vector_8+0xb4>
		
	}
	else{
		if(isNegative == false){
 4f6:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 4fa:	81 11       	cpse	r24, r1
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <__vector_8+0x6a>
			SET_SW2;
 4fe:	5d 9a       	sbi	0x0b, 5	; 11
			isNegative = true;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <isNegative>
 506:	03 c0       	rjmp	.+6      	; 0x50e <__vector_8+0x70>
		}
		else{
			SET_SW1;
 508:	28 9a       	sbi	0x05, 0	; 5
			isNegative = false;
 50a:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <isNegative>
		}

		if(change_duty == true){
 50e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <change_duty>
 512:	88 23       	and	r24, r24
 514:	91 f0       	breq	.+36     	; 0x53a <__vector_8+0x9c>
			OCR1A = t1_compare_a;
 516:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <t1_compare_a>
 51a:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <t1_compare_a+0x1>
 51e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 522:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B = t1_compare_b;
 526:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <t1_compare_b>
 52a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <t1_compare_b+0x1>
 52e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 532:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			change_duty = false;
 536:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <change_duty>
		}
		
		TIMSK1 |= (1 << OCIE1B);
 53a:	ef e6       	ldi	r30, 0x6F	; 111
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	84 60       	ori	r24, 0x04	; 4
 542:	80 83       	st	Z, r24
		TIMSK1 |= (1 << OCIE1A);
 544:	80 81       	ld	r24, Z
 546:	82 60       	ori	r24, 0x02	; 2
 548:	80 83       	st	Z, r24
		TCNT1 = 0;
 54a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 54e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	}

	
}
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	8f 93       	push	r24
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31
	TIMSK1 &= ~(1 << OCIE1B);
 574:	ef e6       	ldi	r30, 0x6F	; 111
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	8b 7f       	andi	r24, 0xFB	; 251
 57c:	80 83       	st	Z, r24
	if(isNegative == false){
 57e:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <isNegative>
 582:	81 11       	cpse	r24, r1
 584:	02 c0       	rjmp	.+4      	; 0x58a <__vector_12+0x26>
		CLR_SW1;
 586:	28 98       	cbi	0x05, 0	; 5
 588:	01 c0       	rjmp	.+2      	; 0x58c <__vector_12+0x28>
	}
	else{
		CLR_SW2;
 58a:	5d 98       	cbi	0x0b, 5	; 11
	}
	TIMSK2 |= (1 << OCIE2A);
 58c:	e0 e7       	ldi	r30, 0x70	; 112
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	82 60       	ori	r24, 0x02	; 2
 594:	80 83       	st	Z, r24
	TCNT2 = 0;
 596:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	8f 91       	pop	r24
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
	char tmp = UDR0;
 5bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
 5c0:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <message_complete>
 5c4:	91 11       	cpse	r25, r1
 5c6:	47 c0       	rjmp	.+142    	; 0x656 <__vector_18+0xac>
		if(tmp == '{'){
 5c8:	8b 37       	cpi	r24, 0x7B	; 123
 5ca:	49 f4       	brne	.+18     	; 0x5de <__vector_18+0x34>
			net_brackets++;
 5cc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 5d0:	9f 5f       	subi	r25, 0xFF	; 255
 5d2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			message_start = true;
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__data_end>
 5dc:	12 c0       	rjmp	.+36     	; 0x602 <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
 5de:	8d 37       	cpi	r24, 0x7D	; 125
 5e0:	81 f4       	brne	.+32     	; 0x602 <__vector_18+0x58>
 5e2:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 5e6:	91 30       	cpi	r25, 0x01	; 1
 5e8:	61 f4       	brne	.+24     	; 0x602 <__vector_18+0x58>
		net_brackets--;
 5ea:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 5ee:	91 50       	subi	r25, 0x01	; 1
 5f0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
		if(net_brackets == 0){
 5f4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 5f8:	91 11       	cpse	r25, r1
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <__vector_18+0x58>
			message_complete = true;
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <message_complete>
		}
	}

	if(message_start == true){
 602:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 606:	91 30       	cpi	r25, 0x01	; 1
 608:	a9 f4       	brne	.+42     	; 0x634 <__vector_18+0x8a>
		received_message[message_index] = tmp;
 60a:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ec 59       	subi	r30, 0x9C	; 156
 612:	f9 4f       	sbci	r31, 0xF9	; 249
 614:	80 83       	st	Z, r24
		message_index++;
 616:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <message_index>
		if(message_complete == true){
 620:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	31 f4       	brne	.+12     	; 0x634 <__vector_18+0x8a>
			received_message[message_index] = '\0';
 628:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	ec 59       	subi	r30, 0x9C	; 156
 630:	f9 4f       	sbci	r31, 0xF9	; 249
 632:	10 82       	st	Z, r1
		}
	}

	if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 634:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 638:	8e 3f       	cpi	r24, 0xFE	; 254
 63a:	21 f0       	breq	.+8      	; 0x644 <__vector_18+0x9a>
 63c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <net_brackets>
 640:	84 30       	cpi	r24, 0x04	; 4
 642:	48 f0       	brcs	.+18     	; 0x656 <__vector_18+0xac>
		receive_error = true;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <receive_error>
		message_start = false;
 64a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
		message_complete = false;
 64e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
		message_index = 0;
 652:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
	}
}
}
 656:	ff 91       	pop	r31
 658:	ef 91       	pop	r30
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <main>:

int main(void)
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	00 d0       	rcall	.+0      	; 0x66e <main+0x6>
 66e:	00 d0       	rcall	.+0      	; 0x670 <main+0x8>
 670:	1f 92       	push	r1
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
	//UART functionalities
	uart_initiate(UBRR_VALUE);
 676:	83 e3       	ldi	r24, 0x33	; 51
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_initiate>

	//Enable Global interrupts
	sei();
 67e:	78 94       	sei

	*frequency = 12.5;
 680:	e0 91 62 06 	lds	r30, 0x0662	; 0x800662 <frequency>
 684:	f0 91 63 06 	lds	r31, 0x0663	; 0x800663 <frequency+0x1>
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	a8 e4       	ldi	r26, 0x48	; 72
 68e:	b1 e4       	ldi	r27, 0x41	; 65
 690:	80 83       	st	Z, r24
 692:	91 83       	std	Z+1, r25	; 0x01
 694:	a2 83       	std	Z+2, r26	; 0x02
 696:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 80;
 698:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <mfc>
 69c:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <mfc+0x1>
 6a0:	80 e5       	ldi	r24, 0x50	; 80
 6a2:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 6a4:	0e 94 33 01 	call	0x266	; 0x266 <driver_timer_initiate>
	//set_parameters(*frequency, *mfc);
	soft_start(*frequency, *mfc);
 6a8:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <mfc>
 6ac:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <mfc+0x1>
 6b0:	40 81       	ld	r20, Z
 6b2:	e0 91 62 06 	lds	r30, 0x0662	; 0x800662 <frequency>
 6b6:	f0 91 63 06 	lds	r31, 0x0663	; 0x800663 <frequency+0x1>
 6ba:	60 81       	ld	r22, Z
 6bc:	71 81       	ldd	r23, Z+1	; 0x01
 6be:	82 81       	ldd	r24, Z+2	; 0x02
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <soft_start>

	adc_initiate();
 6c8:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_initiate>
	adc_start((float*)frequency);
 6cc:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <frequency>
 6d0:	90 91 63 06 	lds	r25, 0x0663	; 0x800663 <frequency+0x1>
 6d4:	0e 94 72 00 	call	0xe4	; 0xe4 <adc_start>
	
	beginCalculation=0;
 6d8:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <beginCalculation>
	i=0;
 6dc:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <i>
		// 		uart_transmit(array);
		// 		uart_transmit("\n\r");
		//		_delay_ms(500);
							if (beginCalculation==1){
								for (uint8_t i = 0; i<SAMPLING_SIZE ;i++){
									if ((i%10) != 0){
 6e0:	0d ec       	ldi	r16, 0xCD	; 205
										uint16_t tmp = current[i];
										uint8_t thousands = (uint8_t) ((tmp/1000) + 48);
										uint8_t hundreds = (uint8_t) (((tmp%1000)/100) + 48);
 6e2:	0f 2e       	mov	r0, r31
 6e4:	f8 ee       	ldi	r31, 0xE8	; 232
 6e6:	af 2e       	mov	r10, r31
 6e8:	f3 e0       	ldi	r31, 0x03	; 3
 6ea:	bf 2e       	mov	r11, r31
 6ec:	f0 2d       	mov	r31, r0
										uint8_t tens = (uint8_t) ((((tmp%1000)%100)/10) + 48);
 6ee:	0f 2e       	mov	r0, r31
 6f0:	f4 e6       	ldi	r31, 0x64	; 100
 6f2:	7f 2e       	mov	r7, r31
 6f4:	f0 2d       	mov	r31, r0
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 6f6:	0f 2e       	mov	r0, r31
 6f8:	f1 ec       	ldi	r31, 0xC1	; 193
 6fa:	4f 2e       	mov	r4, r31
 6fc:	51 2c       	mov	r5, r1
 6fe:	f0 2d       	mov	r31, r0
		// 		array[2] = ones;
		// 		array[3] = '\0';
		// 		uart_transmit(array);
		// 		uart_transmit("\n\r");
		//		_delay_ms(500);
							if (beginCalculation==1){
 700:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <beginCalculation>
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	09 f0       	breq	.+2      	; 0x70a <main+0xa2>
 708:	8e c0       	rjmp	.+284    	; 0x826 <main+0x1be>
 70a:	0f 2e       	mov	r0, r31
 70c:	f8 ef       	ldi	r31, 0xF8	; 248
 70e:	ef 2e       	mov	r14, r31
 710:	f3 e0       	ldi	r31, 0x03	; 3
 712:	ff 2e       	mov	r15, r31
 714:	f0 2d       	mov	r31, r0
 716:	10 e0       	ldi	r17, 0x00	; 0
 718:	82 c0       	rjmp	.+260    	; 0x81e <main+0x1b6>
								for (uint8_t i = 0; i<SAMPLING_SIZE ;i++){
									if ((i%10) != 0){
 71a:	10 9f       	mul	r17, r16
 71c:	81 2d       	mov	r24, r1
 71e:	11 24       	eor	r1, r1
 720:	86 95       	lsr	r24
 722:	86 95       	lsr	r24
 724:	86 95       	lsr	r24
 726:	88 0f       	add	r24, r24
 728:	98 2f       	mov	r25, r24
 72a:	99 0f       	add	r25, r25
 72c:	99 0f       	add	r25, r25
 72e:	89 0f       	add	r24, r25
 730:	18 17       	cp	r17, r24
 732:	09 f4       	brne	.+2      	; 0x736 <main+0xce>
 734:	71 c0       	rjmp	.+226    	; 0x818 <main+0x1b0>
										uint16_t tmp = current[i];
 736:	f7 01       	movw	r30, r14
 738:	40 81       	ld	r20, Z
 73a:	51 81       	ldd	r21, Z+1	; 0x01
										uint8_t thousands = (uint8_t) ((tmp/1000) + 48);
										uint8_t hundreds = (uint8_t) (((tmp%1000)/100) + 48);
 73c:	4a 01       	movw	r8, r20
 73e:	96 94       	lsr	r9
 740:	87 94       	ror	r8
 742:	96 94       	lsr	r9
 744:	87 94       	ror	r8
 746:	96 94       	lsr	r9
 748:	87 94       	ror	r8
 74a:	94 01       	movw	r18, r8
 74c:	a5 ec       	ldi	r26, 0xC5	; 197
 74e:	b0 e2       	ldi	r27, 0x20	; 32
 750:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 754:	fc 01       	movw	r30, r24
 756:	f2 95       	swap	r31
 758:	e2 95       	swap	r30
 75a:	ef 70       	andi	r30, 0x0F	; 15
 75c:	ef 27       	eor	r30, r31
 75e:	ff 70       	andi	r31, 0x0F	; 15
 760:	ef 27       	eor	r30, r31
 762:	ea 9d       	mul	r30, r10
 764:	c0 01       	movw	r24, r0
 766:	eb 9d       	mul	r30, r11
 768:	90 0d       	add	r25, r0
 76a:	fa 9d       	mul	r31, r10
 76c:	90 0d       	add	r25, r0
 76e:	11 24       	eor	r1, r1
 770:	fa 01       	movw	r30, r20
 772:	e8 1b       	sub	r30, r24
 774:	f9 0b       	sbc	r31, r25
										uint8_t tens = (uint8_t) ((((tmp%1000)%100)/10) + 48);
 776:	6f 01       	movw	r12, r30
 778:	d6 94       	lsr	r13
 77a:	c7 94       	ror	r12
 77c:	d6 94       	lsr	r13
 77e:	c7 94       	ror	r12
 780:	96 01       	movw	r18, r12
 782:	ab e7       	ldi	r26, 0x7B	; 123
 784:	b4 e1       	ldi	r27, 0x14	; 20
 786:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 78a:	ac 01       	movw	r20, r24
 78c:	56 95       	lsr	r21
 78e:	47 95       	ror	r20
 790:	74 9e       	mul	r7, r20
 792:	c0 01       	movw	r24, r0
 794:	75 9e       	mul	r7, r21
 796:	90 0d       	add	r25, r0
 798:	11 24       	eor	r1, r1
 79a:	af 01       	movw	r20, r30
 79c:	48 1b       	sub	r20, r24
 79e:	59 0b       	sbc	r21, r25
										uint8_t ones = (uint8_t) (((((tmp%1000)%100)%10)) + 48);
										char array[5];
										array[0] = thousands;
 7a0:	94 01       	movw	r18, r8
 7a2:	a5 ec       	ldi	r26, 0xC5	; 197
 7a4:	b0 e2       	ldi	r27, 0x20	; 32
 7a6:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 7aa:	92 95       	swap	r25
 7ac:	82 95       	swap	r24
 7ae:	8f 70       	andi	r24, 0x0F	; 15
 7b0:	89 27       	eor	r24, r25
 7b2:	9f 70       	andi	r25, 0x0F	; 15
 7b4:	89 27       	eor	r24, r25
 7b6:	80 5d       	subi	r24, 0xD0	; 208
 7b8:	89 83       	std	Y+1, r24	; 0x01
										array[1] = hundreds;
 7ba:	96 01       	movw	r18, r12
 7bc:	ab e7       	ldi	r26, 0x7B	; 123
 7be:	b4 e1       	ldi	r27, 0x14	; 20
 7c0:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	80 5d       	subi	r24, 0xD0	; 208
 7ca:	8a 83       	std	Y+2, r24	; 0x02
										array[2] = tens;
 7cc:	9a 01       	movw	r18, r20
 7ce:	ad ec       	ldi	r26, 0xCD	; 205
 7d0:	bc ec       	ldi	r27, 0xCC	; 204
 7d2:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
 7d6:	96 95       	lsr	r25
 7d8:	87 95       	ror	r24
 7da:	96 95       	lsr	r25
 7dc:	87 95       	ror	r24
 7de:	96 95       	lsr	r25
 7e0:	87 95       	ror	r24
 7e2:	20 e3       	ldi	r18, 0x30	; 48
 7e4:	28 0f       	add	r18, r24
 7e6:	2b 83       	std	Y+3, r18	; 0x03
										array[3] = ones;
 7e8:	9c 01       	movw	r18, r24
 7ea:	22 0f       	add	r18, r18
 7ec:	33 1f       	adc	r19, r19
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	82 0f       	add	r24, r18
 7fc:	93 1f       	adc	r25, r19
 7fe:	48 1b       	sub	r20, r24
 800:	59 0b       	sbc	r21, r25
 802:	40 5d       	subi	r20, 0xD0	; 208
 804:	4c 83       	std	Y+4, r20	; 0x04
										array[4] = '\0';
 806:	1d 82       	std	Y+5, r1	; 0x05
										uart_transmit(array);
 808:	ce 01       	movw	r24, r28
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
										uart_transmit("\n\r");
 810:	84 e4       	ldi	r24, 0x44	; 68
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
 818:	f2 e0       	ldi	r31, 0x02	; 2
 81a:	ef 0e       	add	r14, r31
 81c:	f1 1c       	adc	r15, r1
		// 		array[3] = '\0';
		// 		uart_transmit(array);
		// 		uart_transmit("\n\r");
		//		_delay_ms(500);
							if (beginCalculation==1){
								for (uint8_t i = 0; i<SAMPLING_SIZE ;i++){
 81e:	1f 5f       	subi	r17, 0xFF	; 255
 820:	16 39       	cpi	r17, 0x96	; 150
 822:	09 f0       	breq	.+2      	; 0x826 <main+0x1be>
 824:	7a cf       	rjmp	.-268    	; 0x71a <main+0xb2>

		#ifdef SITH
		project_skywalker();
		#endif
		
		if(message_complete == true){
 826:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	91 f5       	brne	.+100    	; 0x892 <main+0x22a>
			UCSR0B &= ~(1 << RXEN0);
 82e:	f2 01       	movw	r30, r4
 830:	80 81       	ld	r24, Z
 832:	8f 7e       	andi	r24, 0xEF	; 239
 834:	80 83       	st	Z, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
			uart_transmit((char*)received_message);
 83e:	84 e6       	ldi	r24, 0x64	; 100
 840:	96 e0       	ldi	r25, 0x06	; 6
 842:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 846:	60 91 60 06 	lds	r22, 0x0660	; 0x800660 <mfc>
 84a:	70 91 61 06 	lds	r23, 0x0661	; 0x800661 <mfc+0x1>
 84e:	84 e6       	ldi	r24, 0x64	; 100
 850:	96 e0       	ldi	r25, 0x06	; 6
 852:	0e 94 90 04 	call	0x920	; 0x920 <process_message>
			set_parameters(*frequency, *mfc);
 856:	e0 91 60 06 	lds	r30, 0x0660	; 0x800660 <mfc>
 85a:	f0 91 61 06 	lds	r31, 0x0661	; 0x800661 <mfc+0x1>
 85e:	40 81       	ld	r20, Z
 860:	e0 91 62 06 	lds	r30, 0x0662	; 0x800662 <frequency>
 864:	f0 91 63 06 	lds	r31, 0x0663	; 0x800663 <frequency+0x1>
 868:	60 81       	ld	r22, Z
 86a:	71 81       	ldd	r23, Z+1	; 0x01
 86c:	82 81       	ldd	r24, Z+2	; 0x02
 86e:	93 81       	ldd	r25, Z+3	; 0x03
 870:	0e 94 51 01 	call	0x2a2	; 0x2a2 <set_parameters>
			uart_transmit("\n\r");
 874:	84 e4       	ldi	r24, 0x44	; 68
 876:	91 e0       	ldi	r25, 0x01	; 1
 878:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
			message_complete = false;
 87c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_start = false;
 880:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_index = 0;
 884:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
			UCSR0B |= (1 << RXEN0);
 888:	f2 01       	movw	r30, r4
 88a:	80 81       	ld	r24, Z
 88c:	80 61       	ori	r24, 0x10	; 16
 88e:	80 83       	st	Z, r24
 890:	37 cf       	rjmp	.-402    	; 0x700 <main+0x98>
		}
		else if(receive_error == true){
 892:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receive_error>
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	09 f0       	breq	.+2      	; 0x89c <main+0x234>
 89a:	32 cf       	rjmp	.-412    	; 0x700 <main+0x98>
			UCSR0B &= ~(1 << RXEN0);
 89c:	f2 01       	movw	r30, r4
 89e:	80 81       	ld	r24, Z
 8a0:	8f 7e       	andi	r24, 0xEF	; 239
 8a2:	80 83       	st	Z, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 8ac:	89 e1       	ldi	r24, 0x19	; 25
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
			receive_error = false;
 8b4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <receive_error>
			message_start = false;
 8b8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			net_brackets = 0;
 8bc:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <net_brackets>
			UCSR0B |= (1 << RXEN0);
 8c0:	f2 01       	movw	r30, r4
 8c2:	80 81       	ld	r24, Z
 8c4:	80 61       	ori	r24, 0x10	; 16
 8c6:	80 83       	st	Z, r24
 8c8:	1b cf       	rjmp	.-458    	; 0x700 <main+0x98>

000008ca <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}";

//This function initializes UART receive and transmit
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 8ca:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 8ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 8d2:	e1 ec       	ldi	r30, 0xC1	; 193
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	88 60       	ori	r24, 0x08	; 8
 8da:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 8dc:	80 81       	ld	r24, Z
 8de:	80 61       	ori	r24, 0x10	; 16
 8e0:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 8e2:	80 81       	ld	r24, Z
 8e4:	80 68       	ori	r24, 0x80	; 128
 8e6:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 8e8:	e2 ec       	ldi	r30, 0xC2	; 194
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	86 60       	ori	r24, 0x06	; 6
 8f0:	80 83       	st	Z, r24
 8f2:	08 95       	ret

000008f4 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 8f8:	fc 01       	movw	r30, r24
 8fa:	20 81       	ld	r18, Z
 8fc:	22 23       	and	r18, r18
 8fe:	69 f0       	breq	.+26     	; 0x91a <__stack+0x1b>
 900:	dc 01       	movw	r26, r24
 902:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 904:	e0 ec       	ldi	r30, 0xC0	; 192
 906:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 908:	c6 ec       	ldi	r28, 0xC6	; 198
 90a:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 90c:	90 81       	ld	r25, Z
 90e:	95 ff       	sbrs	r25, 5
 910:	fd cf       	rjmp	.-6      	; 0x90c <__stack+0xd>
		UDR0 = message[i];
 912:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 914:	2d 91       	ld	r18, X+
 916:	21 11       	cpse	r18, r1
 918:	f9 cf       	rjmp	.-14     	; 0x90c <__stack+0xd>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	08 95       	ret

00000920 <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	8b 01       	movw	r16, r22
 92a:	fc 01       	movw	r30, r24
 92c:	31 96       	adiw	r30, 0x01	; 1
 92e:	ac 01       	movw	r20, r24
 930:	4c 5f       	subi	r20, 0xFC	; 252
 932:	5f 4f       	sbci	r21, 0xFF	; 255
	int value = 0;
 934:	c0 e0       	ldi	r28, 0x00	; 0
 936:	d0 e0       	ldi	r29, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 938:	9e 01       	movw	r18, r28
 93a:	22 0f       	add	r18, r18
 93c:	33 1f       	adc	r19, r19
 93e:	cc 0f       	add	r28, r28
 940:	dd 1f       	adc	r29, r29
 942:	cc 0f       	add	r28, r28
 944:	dd 1f       	adc	r29, r29
 946:	cc 0f       	add	r28, r28
 948:	dd 1f       	adc	r29, r29
 94a:	c2 0f       	add	r28, r18
 94c:	d3 1f       	adc	r29, r19
 94e:	21 91       	ld	r18, Z+
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	20 53       	subi	r18, 0x30	; 48
 954:	31 09       	sbc	r19, r1
 956:	c2 0f       	add	r28, r18
 958:	d3 1f       	adc	r29, r19

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 95a:	e4 17       	cp	r30, r20
 95c:	f5 07       	cpc	r31, r21
 95e:	61 f7       	brne	.-40     	; 0x938 <process_message+0x18>

	// 	for(unsigned int i = 0; i < 3; i++){
	// 		value = value*10 + (tmp[i] - 48);
	// 	}

	if(message[1] == 'p'){
 960:	fc 01       	movw	r30, r24
 962:	81 81       	ldd	r24, Z+1	; 0x01
 964:	80 37       	cpi	r24, 0x70	; 112
 966:	21 f4       	brne	.+8      	; 0x970 <process_message+0x50>
		uart_transmit("\n\rits here!\n\r");
 968:	89 e3       	ldi	r24, 0x39	; 57
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <uart_transmit>
	}
	*mfc = value;
 970:	f8 01       	movw	r30, r16
 972:	d1 83       	std	Z+1, r29	; 0x01
 974:	c0 83       	st	Z, r28
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

00000980 <__subsf3>:
 980:	50 58       	subi	r21, 0x80	; 128

00000982 <__addsf3>:
 982:	bb 27       	eor	r27, r27
 984:	aa 27       	eor	r26, r26
 986:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__addsf3x>
 98a:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_round>
 98e:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscA>
 992:	38 f0       	brcs	.+14     	; 0x9a2 <__addsf3+0x20>
 994:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscB>
 998:	20 f0       	brcs	.+8      	; 0x9a2 <__addsf3+0x20>
 99a:	39 f4       	brne	.+14     	; 0x9aa <__addsf3+0x28>
 99c:	9f 3f       	cpi	r25, 0xFF	; 255
 99e:	19 f4       	brne	.+6      	; 0x9a6 <__addsf3+0x24>
 9a0:	26 f4       	brtc	.+8      	; 0x9aa <__addsf3+0x28>
 9a2:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_nan>
 9a6:	0e f4       	brtc	.+2      	; 0x9aa <__addsf3+0x28>
 9a8:	e0 95       	com	r30
 9aa:	e7 fb       	bst	r30, 7
 9ac:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_inf>

000009b0 <__addsf3x>:
 9b0:	e9 2f       	mov	r30, r25
 9b2:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_split3>
 9b6:	58 f3       	brcs	.-42     	; 0x98e <__addsf3+0xc>
 9b8:	ba 17       	cp	r27, r26
 9ba:	62 07       	cpc	r22, r18
 9bc:	73 07       	cpc	r23, r19
 9be:	84 07       	cpc	r24, r20
 9c0:	95 07       	cpc	r25, r21
 9c2:	20 f0       	brcs	.+8      	; 0x9cc <__addsf3x+0x1c>
 9c4:	79 f4       	brne	.+30     	; 0x9e4 <__addsf3x+0x34>
 9c6:	a6 f5       	brtc	.+104    	; 0xa30 <__addsf3x+0x80>
 9c8:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_zero>
 9cc:	0e f4       	brtc	.+2      	; 0x9d0 <__addsf3x+0x20>
 9ce:	e0 95       	com	r30
 9d0:	0b 2e       	mov	r0, r27
 9d2:	ba 2f       	mov	r27, r26
 9d4:	a0 2d       	mov	r26, r0
 9d6:	0b 01       	movw	r0, r22
 9d8:	b9 01       	movw	r22, r18
 9da:	90 01       	movw	r18, r0
 9dc:	0c 01       	movw	r0, r24
 9de:	ca 01       	movw	r24, r20
 9e0:	a0 01       	movw	r20, r0
 9e2:	11 24       	eor	r1, r1
 9e4:	ff 27       	eor	r31, r31
 9e6:	59 1b       	sub	r21, r25
 9e8:	99 f0       	breq	.+38     	; 0xa10 <__addsf3x+0x60>
 9ea:	59 3f       	cpi	r21, 0xF9	; 249
 9ec:	50 f4       	brcc	.+20     	; 0xa02 <__addsf3x+0x52>
 9ee:	50 3e       	cpi	r21, 0xE0	; 224
 9f0:	68 f1       	brcs	.+90     	; 0xa4c <__addsf3x+0x9c>
 9f2:	1a 16       	cp	r1, r26
 9f4:	f0 40       	sbci	r31, 0x00	; 0
 9f6:	a2 2f       	mov	r26, r18
 9f8:	23 2f       	mov	r18, r19
 9fa:	34 2f       	mov	r19, r20
 9fc:	44 27       	eor	r20, r20
 9fe:	58 5f       	subi	r21, 0xF8	; 248
 a00:	f3 cf       	rjmp	.-26     	; 0x9e8 <__addsf3x+0x38>
 a02:	46 95       	lsr	r20
 a04:	37 95       	ror	r19
 a06:	27 95       	ror	r18
 a08:	a7 95       	ror	r26
 a0a:	f0 40       	sbci	r31, 0x00	; 0
 a0c:	53 95       	inc	r21
 a0e:	c9 f7       	brne	.-14     	; 0xa02 <__addsf3x+0x52>
 a10:	7e f4       	brtc	.+30     	; 0xa30 <__addsf3x+0x80>
 a12:	1f 16       	cp	r1, r31
 a14:	ba 0b       	sbc	r27, r26
 a16:	62 0b       	sbc	r22, r18
 a18:	73 0b       	sbc	r23, r19
 a1a:	84 0b       	sbc	r24, r20
 a1c:	ba f0       	brmi	.+46     	; 0xa4c <__addsf3x+0x9c>
 a1e:	91 50       	subi	r25, 0x01	; 1
 a20:	a1 f0       	breq	.+40     	; 0xa4a <__addsf3x+0x9a>
 a22:	ff 0f       	add	r31, r31
 a24:	bb 1f       	adc	r27, r27
 a26:	66 1f       	adc	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	c2 f7       	brpl	.-16     	; 0xa1e <__addsf3x+0x6e>
 a2e:	0e c0       	rjmp	.+28     	; 0xa4c <__addsf3x+0x9c>
 a30:	ba 0f       	add	r27, r26
 a32:	62 1f       	adc	r22, r18
 a34:	73 1f       	adc	r23, r19
 a36:	84 1f       	adc	r24, r20
 a38:	48 f4       	brcc	.+18     	; 0xa4c <__addsf3x+0x9c>
 a3a:	87 95       	ror	r24
 a3c:	77 95       	ror	r23
 a3e:	67 95       	ror	r22
 a40:	b7 95       	ror	r27
 a42:	f7 95       	ror	r31
 a44:	9e 3f       	cpi	r25, 0xFE	; 254
 a46:	08 f0       	brcs	.+2      	; 0xa4a <__addsf3x+0x9a>
 a48:	b0 cf       	rjmp	.-160    	; 0x9aa <__addsf3+0x28>
 a4a:	93 95       	inc	r25
 a4c:	88 0f       	add	r24, r24
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <__addsf3x+0xa2>
 a50:	99 27       	eor	r25, r25
 a52:	ee 0f       	add	r30, r30
 a54:	97 95       	ror	r25
 a56:	87 95       	ror	r24
 a58:	08 95       	ret

00000a5a <__divsf3>:
 a5a:	0e 94 41 05 	call	0xa82	; 0xa82 <__divsf3x>
 a5e:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_round>
 a62:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscB>
 a66:	58 f0       	brcs	.+22     	; 0xa7e <__divsf3+0x24>
 a68:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscA>
 a6c:	40 f0       	brcs	.+16     	; 0xa7e <__divsf3+0x24>
 a6e:	29 f4       	brne	.+10     	; 0xa7a <__divsf3+0x20>
 a70:	5f 3f       	cpi	r21, 0xFF	; 255
 a72:	29 f0       	breq	.+10     	; 0xa7e <__divsf3+0x24>
 a74:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_inf>
 a78:	51 11       	cpse	r21, r1
 a7a:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_szero>
 a7e:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_nan>

00000a82 <__divsf3x>:
 a82:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_split3>
 a86:	68 f3       	brcs	.-38     	; 0xa62 <__divsf3+0x8>

00000a88 <__divsf3_pse>:
 a88:	99 23       	and	r25, r25
 a8a:	b1 f3       	breq	.-20     	; 0xa78 <__divsf3+0x1e>
 a8c:	55 23       	and	r21, r21
 a8e:	91 f3       	breq	.-28     	; 0xa74 <__divsf3+0x1a>
 a90:	95 1b       	sub	r25, r21
 a92:	55 0b       	sbc	r21, r21
 a94:	bb 27       	eor	r27, r27
 a96:	aa 27       	eor	r26, r26
 a98:	62 17       	cp	r22, r18
 a9a:	73 07       	cpc	r23, r19
 a9c:	84 07       	cpc	r24, r20
 a9e:	38 f0       	brcs	.+14     	; 0xaae <__divsf3_pse+0x26>
 aa0:	9f 5f       	subi	r25, 0xFF	; 255
 aa2:	5f 4f       	sbci	r21, 0xFF	; 255
 aa4:	22 0f       	add	r18, r18
 aa6:	33 1f       	adc	r19, r19
 aa8:	44 1f       	adc	r20, r20
 aaa:	aa 1f       	adc	r26, r26
 aac:	a9 f3       	breq	.-22     	; 0xa98 <__divsf3_pse+0x10>
 aae:	35 d0       	rcall	.+106    	; 0xb1a <__divsf3_pse+0x92>
 ab0:	0e 2e       	mov	r0, r30
 ab2:	3a f0       	brmi	.+14     	; 0xac2 <__divsf3_pse+0x3a>
 ab4:	e0 e8       	ldi	r30, 0x80	; 128
 ab6:	32 d0       	rcall	.+100    	; 0xb1c <__divsf3_pse+0x94>
 ab8:	91 50       	subi	r25, 0x01	; 1
 aba:	50 40       	sbci	r21, 0x00	; 0
 abc:	e6 95       	lsr	r30
 abe:	00 1c       	adc	r0, r0
 ac0:	ca f7       	brpl	.-14     	; 0xab4 <__divsf3_pse+0x2c>
 ac2:	2b d0       	rcall	.+86     	; 0xb1a <__divsf3_pse+0x92>
 ac4:	fe 2f       	mov	r31, r30
 ac6:	29 d0       	rcall	.+82     	; 0xb1a <__divsf3_pse+0x92>
 ac8:	66 0f       	add	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	bb 1f       	adc	r27, r27
 ad0:	26 17       	cp	r18, r22
 ad2:	37 07       	cpc	r19, r23
 ad4:	48 07       	cpc	r20, r24
 ad6:	ab 07       	cpc	r26, r27
 ad8:	b0 e8       	ldi	r27, 0x80	; 128
 ada:	09 f0       	breq	.+2      	; 0xade <__divsf3_pse+0x56>
 adc:	bb 0b       	sbc	r27, r27
 ade:	80 2d       	mov	r24, r0
 ae0:	bf 01       	movw	r22, r30
 ae2:	ff 27       	eor	r31, r31
 ae4:	93 58       	subi	r25, 0x83	; 131
 ae6:	5f 4f       	sbci	r21, 0xFF	; 255
 ae8:	3a f0       	brmi	.+14     	; 0xaf8 <__divsf3_pse+0x70>
 aea:	9e 3f       	cpi	r25, 0xFE	; 254
 aec:	51 05       	cpc	r21, r1
 aee:	78 f0       	brcs	.+30     	; 0xb0e <__divsf3_pse+0x86>
 af0:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_inf>
 af4:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_szero>
 af8:	5f 3f       	cpi	r21, 0xFF	; 255
 afa:	e4 f3       	brlt	.-8      	; 0xaf4 <__divsf3_pse+0x6c>
 afc:	98 3e       	cpi	r25, 0xE8	; 232
 afe:	d4 f3       	brlt	.-12     	; 0xaf4 <__divsf3_pse+0x6c>
 b00:	86 95       	lsr	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	b7 95       	ror	r27
 b08:	f7 95       	ror	r31
 b0a:	9f 5f       	subi	r25, 0xFF	; 255
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__divsf3_pse+0x78>
 b0e:	88 0f       	add	r24, r24
 b10:	91 1d       	adc	r25, r1
 b12:	96 95       	lsr	r25
 b14:	87 95       	ror	r24
 b16:	97 f9       	bld	r25, 7
 b18:	08 95       	ret
 b1a:	e1 e0       	ldi	r30, 0x01	; 1
 b1c:	66 0f       	add	r22, r22
 b1e:	77 1f       	adc	r23, r23
 b20:	88 1f       	adc	r24, r24
 b22:	bb 1f       	adc	r27, r27
 b24:	62 17       	cp	r22, r18
 b26:	73 07       	cpc	r23, r19
 b28:	84 07       	cpc	r24, r20
 b2a:	ba 07       	cpc	r27, r26
 b2c:	20 f0       	brcs	.+8      	; 0xb36 <__divsf3_pse+0xae>
 b2e:	62 1b       	sub	r22, r18
 b30:	73 0b       	sbc	r23, r19
 b32:	84 0b       	sbc	r24, r20
 b34:	ba 0b       	sbc	r27, r26
 b36:	ee 1f       	adc	r30, r30
 b38:	88 f7       	brcc	.-30     	; 0xb1c <__divsf3_pse+0x94>
 b3a:	e0 95       	com	r30
 b3c:	08 95       	ret

00000b3e <__fixunssfsi>:
 b3e:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_splitA>
 b42:	88 f0       	brcs	.+34     	; 0xb66 <__fixunssfsi+0x28>
 b44:	9f 57       	subi	r25, 0x7F	; 127
 b46:	98 f0       	brcs	.+38     	; 0xb6e <__fixunssfsi+0x30>
 b48:	b9 2f       	mov	r27, r25
 b4a:	99 27       	eor	r25, r25
 b4c:	b7 51       	subi	r27, 0x17	; 23
 b4e:	b0 f0       	brcs	.+44     	; 0xb7c <__fixunssfsi+0x3e>
 b50:	e1 f0       	breq	.+56     	; 0xb8a <__fixunssfsi+0x4c>
 b52:	66 0f       	add	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	1a f0       	brmi	.+6      	; 0xb62 <__fixunssfsi+0x24>
 b5c:	ba 95       	dec	r27
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__fixunssfsi+0x14>
 b60:	14 c0       	rjmp	.+40     	; 0xb8a <__fixunssfsi+0x4c>
 b62:	b1 30       	cpi	r27, 0x01	; 1
 b64:	91 f0       	breq	.+36     	; 0xb8a <__fixunssfsi+0x4c>
 b66:	0e 94 55 06 	call	0xcaa	; 0xcaa <__fp_zero>
 b6a:	b1 e0       	ldi	r27, 0x01	; 1
 b6c:	08 95       	ret
 b6e:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_zero>
 b72:	67 2f       	mov	r22, r23
 b74:	78 2f       	mov	r23, r24
 b76:	88 27       	eor	r24, r24
 b78:	b8 5f       	subi	r27, 0xF8	; 248
 b7a:	39 f0       	breq	.+14     	; 0xb8a <__fixunssfsi+0x4c>
 b7c:	b9 3f       	cpi	r27, 0xF9	; 249
 b7e:	cc f3       	brlt	.-14     	; 0xb72 <__fixunssfsi+0x34>
 b80:	86 95       	lsr	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b3 95       	inc	r27
 b88:	d9 f7       	brne	.-10     	; 0xb80 <__fixunssfsi+0x42>
 b8a:	3e f4       	brtc	.+14     	; 0xb9a <__fixunssfsi+0x5c>
 b8c:	90 95       	com	r25
 b8e:	80 95       	com	r24
 b90:	70 95       	com	r23
 b92:	61 95       	neg	r22
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	08 95       	ret

00000b9c <__floatunsisf>:
 b9c:	e8 94       	clt
 b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <__floatsisf+0x12>

00000ba0 <__floatsisf>:
 ba0:	97 fb       	bst	r25, 7
 ba2:	3e f4       	brtc	.+14     	; 0xbb2 <__floatsisf+0x12>
 ba4:	90 95       	com	r25
 ba6:	80 95       	com	r24
 ba8:	70 95       	com	r23
 baa:	61 95       	neg	r22
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	8f 4f       	sbci	r24, 0xFF	; 255
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	99 23       	and	r25, r25
 bb4:	a9 f0       	breq	.+42     	; 0xbe0 <__floatsisf+0x40>
 bb6:	f9 2f       	mov	r31, r25
 bb8:	96 e9       	ldi	r25, 0x96	; 150
 bba:	bb 27       	eor	r27, r27
 bbc:	93 95       	inc	r25
 bbe:	f6 95       	lsr	r31
 bc0:	87 95       	ror	r24
 bc2:	77 95       	ror	r23
 bc4:	67 95       	ror	r22
 bc6:	b7 95       	ror	r27
 bc8:	f1 11       	cpse	r31, r1
 bca:	f8 cf       	rjmp	.-16     	; 0xbbc <__floatsisf+0x1c>
 bcc:	fa f4       	brpl	.+62     	; 0xc0c <__floatsisf+0x6c>
 bce:	bb 0f       	add	r27, r27
 bd0:	11 f4       	brne	.+4      	; 0xbd6 <__floatsisf+0x36>
 bd2:	60 ff       	sbrs	r22, 0
 bd4:	1b c0       	rjmp	.+54     	; 0xc0c <__floatsisf+0x6c>
 bd6:	6f 5f       	subi	r22, 0xFF	; 255
 bd8:	7f 4f       	sbci	r23, 0xFF	; 255
 bda:	8f 4f       	sbci	r24, 0xFF	; 255
 bdc:	9f 4f       	sbci	r25, 0xFF	; 255
 bde:	16 c0       	rjmp	.+44     	; 0xc0c <__floatsisf+0x6c>
 be0:	88 23       	and	r24, r24
 be2:	11 f0       	breq	.+4      	; 0xbe8 <__floatsisf+0x48>
 be4:	96 e9       	ldi	r25, 0x96	; 150
 be6:	11 c0       	rjmp	.+34     	; 0xc0a <__floatsisf+0x6a>
 be8:	77 23       	and	r23, r23
 bea:	21 f0       	breq	.+8      	; 0xbf4 <__floatsisf+0x54>
 bec:	9e e8       	ldi	r25, 0x8E	; 142
 bee:	87 2f       	mov	r24, r23
 bf0:	76 2f       	mov	r23, r22
 bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__floatsisf+0x5e>
 bf4:	66 23       	and	r22, r22
 bf6:	71 f0       	breq	.+28     	; 0xc14 <__floatsisf+0x74>
 bf8:	96 e8       	ldi	r25, 0x86	; 134
 bfa:	86 2f       	mov	r24, r22
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	60 e0       	ldi	r22, 0x00	; 0
 c00:	2a f0       	brmi	.+10     	; 0xc0c <__floatsisf+0x6c>
 c02:	9a 95       	dec	r25
 c04:	66 0f       	add	r22, r22
 c06:	77 1f       	adc	r23, r23
 c08:	88 1f       	adc	r24, r24
 c0a:	da f7       	brpl	.-10     	; 0xc02 <__floatsisf+0x62>
 c0c:	88 0f       	add	r24, r24
 c0e:	96 95       	lsr	r25
 c10:	87 95       	ror	r24
 c12:	97 f9       	bld	r25, 7
 c14:	08 95       	ret

00000c16 <__fp_inf>:
 c16:	97 f9       	bld	r25, 7
 c18:	9f 67       	ori	r25, 0x7F	; 127
 c1a:	80 e8       	ldi	r24, 0x80	; 128
 c1c:	70 e0       	ldi	r23, 0x00	; 0
 c1e:	60 e0       	ldi	r22, 0x00	; 0
 c20:	08 95       	ret

00000c22 <__fp_nan>:
 c22:	9f ef       	ldi	r25, 0xFF	; 255
 c24:	80 ec       	ldi	r24, 0xC0	; 192
 c26:	08 95       	ret

00000c28 <__fp_pscA>:
 c28:	00 24       	eor	r0, r0
 c2a:	0a 94       	dec	r0
 c2c:	16 16       	cp	r1, r22
 c2e:	17 06       	cpc	r1, r23
 c30:	18 06       	cpc	r1, r24
 c32:	09 06       	cpc	r0, r25
 c34:	08 95       	ret

00000c36 <__fp_pscB>:
 c36:	00 24       	eor	r0, r0
 c38:	0a 94       	dec	r0
 c3a:	12 16       	cp	r1, r18
 c3c:	13 06       	cpc	r1, r19
 c3e:	14 06       	cpc	r1, r20
 c40:	05 06       	cpc	r0, r21
 c42:	08 95       	ret

00000c44 <__fp_round>:
 c44:	09 2e       	mov	r0, r25
 c46:	03 94       	inc	r0
 c48:	00 0c       	add	r0, r0
 c4a:	11 f4       	brne	.+4      	; 0xc50 <__fp_round+0xc>
 c4c:	88 23       	and	r24, r24
 c4e:	52 f0       	brmi	.+20     	; 0xc64 <__fp_round+0x20>
 c50:	bb 0f       	add	r27, r27
 c52:	40 f4       	brcc	.+16     	; 0xc64 <__fp_round+0x20>
 c54:	bf 2b       	or	r27, r31
 c56:	11 f4       	brne	.+4      	; 0xc5c <__fp_round+0x18>
 c58:	60 ff       	sbrs	r22, 0
 c5a:	04 c0       	rjmp	.+8      	; 0xc64 <__fp_round+0x20>
 c5c:	6f 5f       	subi	r22, 0xFF	; 255
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	08 95       	ret

00000c66 <__fp_split3>:
 c66:	57 fd       	sbrc	r21, 7
 c68:	90 58       	subi	r25, 0x80	; 128
 c6a:	44 0f       	add	r20, r20
 c6c:	55 1f       	adc	r21, r21
 c6e:	59 f0       	breq	.+22     	; 0xc86 <__fp_splitA+0x10>
 c70:	5f 3f       	cpi	r21, 0xFF	; 255
 c72:	71 f0       	breq	.+28     	; 0xc90 <__fp_splitA+0x1a>
 c74:	47 95       	ror	r20

00000c76 <__fp_splitA>:
 c76:	88 0f       	add	r24, r24
 c78:	97 fb       	bst	r25, 7
 c7a:	99 1f       	adc	r25, r25
 c7c:	61 f0       	breq	.+24     	; 0xc96 <__fp_splitA+0x20>
 c7e:	9f 3f       	cpi	r25, 0xFF	; 255
 c80:	79 f0       	breq	.+30     	; 0xca0 <__fp_splitA+0x2a>
 c82:	87 95       	ror	r24
 c84:	08 95       	ret
 c86:	12 16       	cp	r1, r18
 c88:	13 06       	cpc	r1, r19
 c8a:	14 06       	cpc	r1, r20
 c8c:	55 1f       	adc	r21, r21
 c8e:	f2 cf       	rjmp	.-28     	; 0xc74 <__fp_split3+0xe>
 c90:	46 95       	lsr	r20
 c92:	f1 df       	rcall	.-30     	; 0xc76 <__fp_splitA>
 c94:	08 c0       	rjmp	.+16     	; 0xca6 <__fp_splitA+0x30>
 c96:	16 16       	cp	r1, r22
 c98:	17 06       	cpc	r1, r23
 c9a:	18 06       	cpc	r1, r24
 c9c:	99 1f       	adc	r25, r25
 c9e:	f1 cf       	rjmp	.-30     	; 0xc82 <__fp_splitA+0xc>
 ca0:	86 95       	lsr	r24
 ca2:	71 05       	cpc	r23, r1
 ca4:	61 05       	cpc	r22, r1
 ca6:	08 94       	sec
 ca8:	08 95       	ret

00000caa <__fp_zero>:
 caa:	e8 94       	clt

00000cac <__fp_szero>:
 cac:	bb 27       	eor	r27, r27
 cae:	66 27       	eor	r22, r22
 cb0:	77 27       	eor	r23, r23
 cb2:	cb 01       	movw	r24, r22
 cb4:	97 f9       	bld	r25, 7
 cb6:	08 95       	ret

00000cb8 <__mulsf3>:
 cb8:	0e 94 6f 06 	call	0xcde	; 0xcde <__mulsf3x>
 cbc:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_round>
 cc0:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscA>
 cc4:	38 f0       	brcs	.+14     	; 0xcd4 <__mulsf3+0x1c>
 cc6:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscB>
 cca:	20 f0       	brcs	.+8      	; 0xcd4 <__mulsf3+0x1c>
 ccc:	95 23       	and	r25, r21
 cce:	11 f0       	breq	.+4      	; 0xcd4 <__mulsf3+0x1c>
 cd0:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_inf>
 cd4:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_nan>
 cd8:	11 24       	eor	r1, r1
 cda:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_szero>

00000cde <__mulsf3x>:
 cde:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_split3>
 ce2:	70 f3       	brcs	.-36     	; 0xcc0 <__mulsf3+0x8>

00000ce4 <__mulsf3_pse>:
 ce4:	95 9f       	mul	r25, r21
 ce6:	c1 f3       	breq	.-16     	; 0xcd8 <__mulsf3+0x20>
 ce8:	95 0f       	add	r25, r21
 cea:	50 e0       	ldi	r21, 0x00	; 0
 cec:	55 1f       	adc	r21, r21
 cee:	62 9f       	mul	r22, r18
 cf0:	f0 01       	movw	r30, r0
 cf2:	72 9f       	mul	r23, r18
 cf4:	bb 27       	eor	r27, r27
 cf6:	f0 0d       	add	r31, r0
 cf8:	b1 1d       	adc	r27, r1
 cfa:	63 9f       	mul	r22, r19
 cfc:	aa 27       	eor	r26, r26
 cfe:	f0 0d       	add	r31, r0
 d00:	b1 1d       	adc	r27, r1
 d02:	aa 1f       	adc	r26, r26
 d04:	64 9f       	mul	r22, r20
 d06:	66 27       	eor	r22, r22
 d08:	b0 0d       	add	r27, r0
 d0a:	a1 1d       	adc	r26, r1
 d0c:	66 1f       	adc	r22, r22
 d0e:	82 9f       	mul	r24, r18
 d10:	22 27       	eor	r18, r18
 d12:	b0 0d       	add	r27, r0
 d14:	a1 1d       	adc	r26, r1
 d16:	62 1f       	adc	r22, r18
 d18:	73 9f       	mul	r23, r19
 d1a:	b0 0d       	add	r27, r0
 d1c:	a1 1d       	adc	r26, r1
 d1e:	62 1f       	adc	r22, r18
 d20:	83 9f       	mul	r24, r19
 d22:	a0 0d       	add	r26, r0
 d24:	61 1d       	adc	r22, r1
 d26:	22 1f       	adc	r18, r18
 d28:	74 9f       	mul	r23, r20
 d2a:	33 27       	eor	r19, r19
 d2c:	a0 0d       	add	r26, r0
 d2e:	61 1d       	adc	r22, r1
 d30:	23 1f       	adc	r18, r19
 d32:	84 9f       	mul	r24, r20
 d34:	60 0d       	add	r22, r0
 d36:	21 1d       	adc	r18, r1
 d38:	82 2f       	mov	r24, r18
 d3a:	76 2f       	mov	r23, r22
 d3c:	6a 2f       	mov	r22, r26
 d3e:	11 24       	eor	r1, r1
 d40:	9f 57       	subi	r25, 0x7F	; 127
 d42:	50 40       	sbci	r21, 0x00	; 0
 d44:	9a f0       	brmi	.+38     	; 0xd6c <__mulsf3_pse+0x88>
 d46:	f1 f0       	breq	.+60     	; 0xd84 <__mulsf3_pse+0xa0>
 d48:	88 23       	and	r24, r24
 d4a:	4a f0       	brmi	.+18     	; 0xd5e <__mulsf3_pse+0x7a>
 d4c:	ee 0f       	add	r30, r30
 d4e:	ff 1f       	adc	r31, r31
 d50:	bb 1f       	adc	r27, r27
 d52:	66 1f       	adc	r22, r22
 d54:	77 1f       	adc	r23, r23
 d56:	88 1f       	adc	r24, r24
 d58:	91 50       	subi	r25, 0x01	; 1
 d5a:	50 40       	sbci	r21, 0x00	; 0
 d5c:	a9 f7       	brne	.-22     	; 0xd48 <__mulsf3_pse+0x64>
 d5e:	9e 3f       	cpi	r25, 0xFE	; 254
 d60:	51 05       	cpc	r21, r1
 d62:	80 f0       	brcs	.+32     	; 0xd84 <__mulsf3_pse+0xa0>
 d64:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_inf>
 d68:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_szero>
 d6c:	5f 3f       	cpi	r21, 0xFF	; 255
 d6e:	e4 f3       	brlt	.-8      	; 0xd68 <__mulsf3_pse+0x84>
 d70:	98 3e       	cpi	r25, 0xE8	; 232
 d72:	d4 f3       	brlt	.-12     	; 0xd68 <__mulsf3_pse+0x84>
 d74:	86 95       	lsr	r24
 d76:	77 95       	ror	r23
 d78:	67 95       	ror	r22
 d7a:	b7 95       	ror	r27
 d7c:	f7 95       	ror	r31
 d7e:	e7 95       	ror	r30
 d80:	9f 5f       	subi	r25, 0xFF	; 255
 d82:	c1 f7       	brne	.-16     	; 0xd74 <__mulsf3_pse+0x90>
 d84:	fe 2b       	or	r31, r30
 d86:	88 0f       	add	r24, r24
 d88:	91 1d       	adc	r25, r1
 d8a:	96 95       	lsr	r25
 d8c:	87 95       	ror	r24
 d8e:	97 f9       	bld	r25, 7
 d90:	08 95       	ret

00000d92 <__umulhisi3>:
 d92:	a2 9f       	mul	r26, r18
 d94:	b0 01       	movw	r22, r0
 d96:	b3 9f       	mul	r27, r19
 d98:	c0 01       	movw	r24, r0
 d9a:	a3 9f       	mul	r26, r19
 d9c:	70 0d       	add	r23, r0
 d9e:	81 1d       	adc	r24, r1
 da0:	11 24       	eor	r1, r1
 da2:	91 1d       	adc	r25, r1
 da4:	b2 9f       	mul	r27, r18
 da6:	70 0d       	add	r23, r0
 da8:	81 1d       	adc	r24, r1
 daa:	11 24       	eor	r1, r1
 dac:	91 1d       	adc	r25, r1
 dae:	08 95       	ret

00000db0 <_exit>:
 db0:	f8 94       	cli

00000db2 <__stop_program>:
 db2:	ff cf       	rjmp	.-2      	; 0xdb2 <__stop_program>
