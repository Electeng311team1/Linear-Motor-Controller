
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000bfa  00000c8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ad  00800148  00800148  00000cd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020cb  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af1  00000000  00000000  00002efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf3  00000000  00000000  000039ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  000045e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000609  00000000  00000000  000048b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001363  00000000  00000000  00004ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00006224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_7>
  20:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_8>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_11>
  30:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3f       	cpi	r26, 0xF5	; 245
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  9e:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_initiate>:

 #include "includes.h"

 void adc_initiate(){
 	//Set ADC prescalar
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
 
	//Enable ADC
	ADCSRA |= (1 << ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//Enable ADC interrupt
	ADCSRA |= (1 << ADIE);
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	//Enable ADC auto trigger
	ADCSRA |= (1 << ADATE);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	//TCCR0B |= (1 << CS00) | (1 << CS01);

	//Enable conversion 
	//ADMUX |= (1 << MUX0);

	ADCSRA |= (1 << ADSC);
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <adc_start>:
 void adc_start(float* operating_frequency){
// 
// 	OCR0A = 200;//(uint8_t)(F_CPU/(64.0 * (float)SAMPLING_SIZE * (*operating_frequency)));
// 	TIMSK0 |= (1 << OCIE0A);
// 	TCNT0 = 0;
	compA_count = 0;
  ca:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <compA_count>
	current_index = 0;
  ce:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <current_index>
  d2:	08 95       	ret

000000d4 <__vector_21>:
// 	ADCSRA |= (1 << ADSC);
// 	compA_count++;
// 	TCNT0 = 0;
//  }

 ISR(ADC_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	25 97       	sbiw	r28, 0x05	; 5
 104:	de bf       	out	0x3e, r29	; 62
 106:	cd bf       	out	0x3d, r28	; 61
	current_values[0] = ADC;
 108:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 110:	e0 e5       	ldi	r30, 0x50	; 80
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	80 83       	st	Z, r24
	uint16_t tmp = current_values[0];
 116:	e0 81       	ld	r30, Z
	uint8_t thousands = (tmp/1000) + 48;
	uint8_t hundreds = ((tmp%1000)/100) + 48;
 118:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t tens = (((tmp%1000)%100)/10) + 48;
 11a:	8f 01       	movw	r16, r30
 11c:	16 95       	lsr	r17
 11e:	07 95       	ror	r16
 120:	16 95       	lsr	r17
 122:	07 95       	ror	r16
 124:	98 01       	movw	r18, r16
 126:	ab e7       	ldi	r26, 0x7B	; 123
 128:	b4 e1       	ldi	r27, 0x14	; 20
 12a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__umulhisi3>
 12e:	ac 01       	movw	r20, r24
 130:	56 95       	lsr	r21
 132:	47 95       	ror	r20
 134:	24 e6       	ldi	r18, 0x64	; 100
 136:	24 9f       	mul	r18, r20
 138:	c0 01       	movw	r24, r0
 13a:	25 9f       	mul	r18, r21
 13c:	90 0d       	add	r25, r0
 13e:	11 24       	eor	r1, r1
 140:	af 01       	movw	r20, r30
 142:	48 1b       	sub	r20, r24
 144:	59 0b       	sbc	r21, r25
	uint8_t ones = ((((tmp%1000)%100)%10)) + 48;
	char array[5];
	array[0] = thousands;
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	89 83       	std	Y+1, r24	; 0x01
	array[1] = hundreds;
 14a:	98 01       	movw	r18, r16
 14c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__umulhisi3>
 150:	96 95       	lsr	r25
 152:	87 95       	ror	r24
 154:	80 5d       	subi	r24, 0xD0	; 208
 156:	8a 83       	std	Y+2, r24	; 0x02
	array[2] = tens;
 158:	9a 01       	movw	r18, r20
 15a:	ad ec       	ldi	r26, 0xCD	; 205
 15c:	bc ec       	ldi	r27, 0xCC	; 204
 15e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__umulhisi3>
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	20 e3       	ldi	r18, 0x30	; 48
 170:	28 0f       	add	r18, r24
 172:	2b 83       	std	Y+3, r18	; 0x03
	array[3] = ones;
 174:	9c 01       	movw	r18, r24
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
 18a:	48 1b       	sub	r20, r24
 18c:	59 0b       	sbc	r21, r25
 18e:	40 5d       	subi	r20, 0xD0	; 208
 190:	4c 83       	std	Y+4, r20	; 0x04
	array[4] = '\0';
 192:	1d 82       	std	Y+5, r1	; 0x05
	uart_transmit(array);
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
	uart_transmit("\n\r");
 19c:	84 e4       	ldi	r24, 0x44	; 68
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
// 			compA_count = 0;
// 		} else {
// 			ADCSRA |= (1<<ADATE);
// 		}

}
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	char tmp = UDR0; 
 1ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
 1ee:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <message_complete>
 1f2:	91 11       	cpse	r25, r1
 1f4:	47 c0       	rjmp	.+142    	; 0x284 <__vector_18+0xac>
		if(tmp == '{'){
 1f6:	8b 37       	cpi	r24, 0x7B	; 123
 1f8:	49 f4       	brne	.+18     	; 0x20c <__vector_18+0x34>
			net_brackets++;
 1fa:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 1fe:	9f 5f       	subi	r25, 0xFF	; 255
 200:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			message_start = true;
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__data_end>
 20a:	12 c0       	rjmp	.+36     	; 0x230 <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
 20c:	8d 37       	cpi	r24, 0x7D	; 125
 20e:	81 f4       	brne	.+32     	; 0x230 <__vector_18+0x58>
 210:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 214:	91 30       	cpi	r25, 0x01	; 1
 216:	61 f4       	brne	.+24     	; 0x230 <__vector_18+0x58>
			net_brackets--;
 218:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 21c:	91 50       	subi	r25, 0x01	; 1
 21e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <net_brackets>
			if(net_brackets == 0){
 222:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <net_brackets>
 226:	91 11       	cpse	r25, r1
 228:	03 c0       	rjmp	.+6      	; 0x230 <__vector_18+0x58>
				message_complete = true;
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <message_complete>
			}
		}

		if(message_start == true){
 230:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__data_end>
 234:	91 30       	cpi	r25, 0x01	; 1
 236:	a9 f4       	brne	.+42     	; 0x262 <__vector_18+0x8a>
			received_message[message_index] = tmp;
 238:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	ec 50       	subi	r30, 0x0C	; 12
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	80 83       	st	Z, r24
			message_index++;
 244:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <message_index>
			if(message_complete == true){
 24e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	31 f4       	brne	.+12     	; 0x262 <__vector_18+0x8a>
				received_message[message_index] = '\0';
 256:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <message_index>
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 50       	subi	r30, 0x0C	; 12
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 262:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <message_index>
 266:	8e 3f       	cpi	r24, 0xFE	; 254
 268:	21 f0       	breq	.+8      	; 0x272 <__vector_18+0x9a>
 26a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <net_brackets>
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	48 f0       	brcs	.+18     	; 0x284 <__vector_18+0xac>
			receive_error = true;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <receive_error>
			message_start = false;
 278:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_complete = false;
 27c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_index = 0;
 280:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
		}
	}
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 296:	83 e3       	ldi	r24, 0x33	; 51
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 88 03 	call	0x710	; 0x710 <uart_initiate>

	//Enable Global interrupts
	sei();
 29e:	78 94       	sei

	*frequency = 12.5;
 2a0:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <frequency>
 2a4:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <frequency+0x1>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	a8 e4       	ldi	r26, 0x48	; 72
 2ae:	b1 e4       	ldi	r27, 0x41	; 65
 2b0:	80 83       	st	Z, r24
 2b2:	91 83       	std	Z+1, r25	; 0x01
 2b4:	a2 83       	std	Z+2, r26	; 0x02
 2b6:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 000;
 2b8:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mfc>
 2bc:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mfc+0x1>
 2c0:	10 82       	st	Z, r1

	//enable timers
	driver_timer_initiate();
 2c2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <driver_timer_initiate>
	if(*mfc == 0){
 2c6:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mfc>
 2ca:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mfc+0x1>
 2ce:	80 81       	ld	r24, Z
 2d0:	81 11       	cpse	r24, r1
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <main+0x44>
		stop_motor();
 2d4:	0e 94 99 02 	call	0x532	; 0x532 <stop_motor>
 2d8:	0b c0       	rjmp	.+22     	; 0x2f0 <main+0x5a>
	}
	else{
		set_parameters(*frequency, *mfc);
 2da:	40 81       	ld	r20, Z
 2dc:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <frequency>
 2e0:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <frequency+0x1>
 2e4:	60 81       	ld	r22, Z
 2e6:	71 81       	ldd	r23, Z+1	; 0x01
 2e8:	82 81       	ldd	r24, Z+2	; 0x02
 2ea:	93 81       	ldd	r25, Z+3	; 0x03
 2ec:	0e 94 ff 01 	call	0x3fe	; 0x3fe <set_parameters>
		//soft_start(*frequency, *mfc);
	}

	adc_initiate();
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_initiate>
	adc_start((float*)frequency);
 2f4:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <frequency>
 2f8:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <frequency+0x1>
 2fc:	0e 94 65 00 	call	0xca	; 0xca <adc_start>

	a = true;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <a>
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 306:	c1 ec       	ldi	r28, 0xC1	; 193
 308:	d0 e0       	ldi	r29, 0x00	; 0
	adc_start((float*)frequency);

	a = true;

    while (1){
		if(print && a){
 30a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <print>
 30e:	88 23       	and	r24, r24
 310:	51 f0       	breq	.+20     	; 0x326 <main+0x90>
 312:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <a>
 316:	88 23       	and	r24, r24
 318:	31 f0       	breq	.+12     	; 0x326 <main+0x90>
 31a:	86 e9       	ldi	r24, 0x96	; 150
 31c:	90 e0       	ldi	r25, 0x00	; 0
// 				array[3] = ones;
// 				array[4] = '\0';
// 				uart_transmit(array);
// 				uart_transmit("\n\r");
				//print = false;
				a = false;
 31e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <a>
 322:	01 97       	sbiw	r24, 0x01	; 1

	a = true;

    while (1){
		if(print && a){
			for(unsigned int i = 0; i < SAMPLING_SIZE; i++){
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x88>

		#ifdef SITH
			project_skywalker();
		#endif
		
		if(message_complete == true){
 326:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <message_complete>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	81 f5       	brne	.+96     	; 0x38e <main+0xf8>
			UCSR0B &= ~(1 << RXEN0);
 32e:	88 81       	ld	r24, Y
 330:	8f 7e       	andi	r24, 0xEF	; 239
 332:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
			uart_transmit((char*)received_message);
 33c:	84 ef       	ldi	r24, 0xF4	; 244
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 344:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <mfc>
 348:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <mfc+0x1>
 34c:	84 ef       	ldi	r24, 0xF4	; 244
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 b3 03 	call	0x766	; 0x766 <process_message>
			set_parameters(*frequency, *mfc);
 354:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mfc>
 358:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mfc+0x1>
 35c:	40 81       	ld	r20, Z
 35e:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <frequency>
 362:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <frequency+0x1>
 366:	60 81       	ld	r22, Z
 368:	71 81       	ldd	r23, Z+1	; 0x01
 36a:	82 81       	ldd	r24, Z+2	; 0x02
 36c:	93 81       	ldd	r25, Z+3	; 0x03
 36e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <set_parameters>
			uart_transmit("\n\r");
 372:	84 e4       	ldi	r24, 0x44	; 68
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
			message_complete = false;
 37a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <message_complete>
			message_start = false;
 37e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			message_index = 0;
 382:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <message_index>
			UCSR0B |= (1 << RXEN0);
 386:	88 81       	ld	r24, Y
 388:	80 61       	ori	r24, 0x10	; 16
 38a:	88 83       	st	Y, r24
 38c:	be cf       	rjmp	.-132    	; 0x30a <main+0x74>
		}
		else if(receive_error == true){
 38e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receive_error>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	09 f0       	breq	.+2      	; 0x398 <main+0x102>
 396:	b9 cf       	rjmp	.-142    	; 0x30a <main+0x74>
			UCSR0B &= ~(1 << RXEN0);
 398:	88 81       	ld	r24, Y
 39a:	8f 7e       	andi	r24, 0xEF	; 239
 39c:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 3a6:	89 e1       	ldi	r24, 0x19	; 25
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
			receive_error = false;
 3ae:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <receive_error>
			message_start = false;
 3b2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			net_brackets = 0;
 3b6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <net_brackets>
			UCSR0B |= (1 << RXEN0);
 3ba:	88 81       	ld	r24, Y
 3bc:	80 61       	ori	r24, 0x10	; 16
 3be:	88 83       	st	Y, r24
 3c0:	a4 cf       	rjmp	.-184    	; 0x30a <main+0x74>

000003c2 <driver_timer_initiate>:
	unsigned int i = 0;
	while(i != req_mfc){
		set_parameters(req_freq, i);
		i++;
	}
}
 3c2:	e1 eb       	ldi	r30, 0xB1	; 177
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	80 83       	st	Z, r24
 3cc:	80 e4       	ldi	r24, 0x40	; 64
 3ce:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 3d2:	80 e1       	ldi	r24, 0x10	; 16
 3d4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 3d8:	e1 e8       	ldi	r30, 0x81	; 129
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
 3e2:	20 9a       	sbi	0x04, 0	; 4
 3e4:	8a b1       	in	r24, 0x0a	; 10
 3e6:	80 6e       	ori	r24, 0xE0	; 224
 3e8:	8a b9       	out	0x0a, r24	; 10
 3ea:	28 9a       	sbi	0x05, 0	; 5
 3ec:	5e 9a       	sbi	0x0b, 6	; 11
 3ee:	5d 98       	cbi	0x0b, 5	; 11
 3f0:	5f 98       	cbi	0x0b, 7	; 11
 3f2:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <change_duty>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <first_cycle>
 3fc:	08 95       	ret

000003fe <set_parameters>:
 3fe:	4f 92       	push	r4
 400:	5f 92       	push	r5
 402:	6f 92       	push	r6
 404:	7f 92       	push	r7
 406:	8f 92       	push	r8
 408:	9f 92       	push	r9
 40a:	af 92       	push	r10
 40c:	bf 92       	push	r11
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	6b 01       	movw	r12, r22
 418:	7c 01       	movw	r14, r24
 41a:	84 2f       	mov	r24, r20
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <mfr+0x1>
 422:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <mfr>
 426:	64 2f       	mov	r22, r20
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__floatunsisf>
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	4f e7       	ldi	r20, 0x7F	; 127
 438:	53 e4       	ldi	r21, 0x43	; 67
 43a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divsf3>
 43e:	2b 01       	movw	r4, r22
 440:	3c 01       	movw	r6, r24
 442:	a7 01       	movw	r20, r14
 444:	96 01       	movw	r18, r12
 446:	c7 01       	movw	r24, r14
 448:	b6 01       	movw	r22, r12
 44a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__addsf3>
 44e:	9b 01       	movw	r18, r22
 450:	ac 01       	movw	r20, r24
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	8a e7       	ldi	r24, 0x7A	; 122
 458:	94 e4       	ldi	r25, 0x44	; 68
 45a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divsf3>
 45e:	4b 01       	movw	r8, r22
 460:	5c 01       	movw	r10, r24
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	c3 01       	movw	r24, r6
 468:	b2 01       	movw	r22, r4
 46a:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3>
 46e:	6b 01       	movw	r12, r22
 470:	7c 01       	movw	r14, r24
 472:	a3 01       	movw	r20, r6
 474:	92 01       	movw	r18, r4
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	80 e8       	ldi	r24, 0x80	; 128
 47c:	9f e3       	ldi	r25, 0x3F	; 63
 47e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__subsf3>
 482:	a5 01       	movw	r20, r10
 484:	94 01       	movw	r18, r8
 486:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3>
 48a:	a7 01       	movw	r20, r14
 48c:	96 01       	movw	r18, r12
 48e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__addsf3>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	a9 01       	movw	r20, r18
 498:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__addsf3>
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	4a e7       	ldi	r20, 0x7A	; 122
 4a2:	54 e4       	ldi	r21, 0x44	; 68
 4a4:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3>
 4a8:	0e 94 c2 04 	call	0x984	; 0x984 <__fixunssfsi>
 4ac:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <t1_compare_a+0x1>
 4b0:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <t1_compare_a>
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	4a e7       	ldi	r20, 0x7A	; 122
 4ba:	54 e4       	ldi	r21, 0x44	; 68
 4bc:	c7 01       	movw	r24, r14
 4be:	b6 01       	movw	r22, r12
 4c0:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3>
 4c4:	0e 94 c2 04 	call	0x984	; 0x984 <__fixunssfsi>
 4c8:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <t1_compare_b+0x1>
 4cc:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <t1_compare_b>
 4d0:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <isNegative>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <change_duty>
 4da:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <first_cycle>
 4de:	88 23       	and	r24, r24
 4e0:	91 f0       	breq	.+36     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4e2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <t1_compare_a>
 4e6:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <t1_compare_a+0x1>
 4ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4f2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <t1_compare_b>
 4f6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <t1_compare_b+0x1>
 4fa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4fe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 502:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <first_cycle>
 506:	ef e6       	ldi	r30, 0x6F	; 111
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	86 60       	ori	r24, 0x06	; 6
 50e:	80 83       	st	Z, r24
 510:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 514:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	cf 90       	pop	r12
 520:	bf 90       	pop	r11
 522:	af 90       	pop	r10
 524:	9f 90       	pop	r9
 526:	8f 90       	pop	r8
 528:	7f 90       	pop	r7
 52a:	6f 90       	pop	r6
 52c:	5f 90       	pop	r5
 52e:	4f 90       	pop	r4
 530:	08 95       	ret

00000532 <stop_motor>:

void stop_motor(){
	CLR_SW1;
 532:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 534:	8f e1       	ldi	r24, 0x1F	; 31
 536:	9e e4       	ldi	r25, 0x4E	; 78
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <stop_motor+0x6>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <stop_motor+0xc>
 53e:	00 00       	nop
	_delay_ms(10);
	CLR_SW2;
 540:	5d 98       	cbi	0x0b, 5	; 11
 542:	8f e1       	ldi	r24, 0x1F	; 31
 544:	9e e4       	ldi	r25, 0x4E	; 78
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <stop_motor+0x14>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <stop_motor+0x1a>
 54c:	00 00       	nop
	_delay_ms(10);
	SET_SW3;
 54e:	5f 9a       	sbi	0x0b, 7	; 11
 550:	8f e1       	ldi	r24, 0x1F	; 31
 552:	9e e4       	ldi	r25, 0x4E	; 78
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <stop_motor+0x22>
 558:	00 c0       	rjmp	.+0      	; 0x55a <stop_motor+0x28>
 55a:	00 00       	nop
	_delay_ms(10);
	SET_SW4;
 55c:	5e 9a       	sbi	0x0b, 6	; 11
	TIMSK1 &= ~(1 << OCIE1B);
 55e:	ef e6       	ldi	r30, 0x6F	; 111
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	8b 7f       	andi	r24, 0xFB	; 251
 566:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1A);
 568:	80 81       	ld	r24, Z
 56a:	8d 7f       	andi	r24, 0xFD	; 253
 56c:	80 83       	st	Z, r24
	TIMSK2 &= ~(1 << OCIE2A);
 56e:	e0 e7       	ldi	r30, 0x70	; 112
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	8d 7f       	andi	r24, 0xFD	; 253
 576:	80 83       	st	Z, r24
	TIMSK2 &= ~(1 << OCIE2B);
 578:	80 81       	ld	r24, Z
 57a:	8b 7f       	andi	r24, 0xFB	; 251
 57c:	80 83       	st	Z, r24
 57e:	08 95       	ret

00000580 <__vector_7>:
}

ISR(TIMER2_COMPA_vect){	
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	8f 93       	push	r24
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2A);
 590:	e0 e7       	ldi	r30, 0x70	; 112
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	8d 7f       	andi	r24, 0xFD	; 253
 598:	80 83       	st	Z, r24
	if(isNegative == false){
 59a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <isNegative>
 59e:	81 11       	cpse	r24, r1
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__vector_7+0x26>
		SET_SW3;
 5a2:	5f 9a       	sbi	0x0b, 7	; 11
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <__vector_7+0x28>
	}
	else{
		SET_SW4;
 5a6:	5e 9a       	sbi	0x0b, 6	; 11
	}
}
 5a8:	ff 91       	pop	r31
 5aa:	ef 91       	pop	r30
 5ac:	8f 91       	pop	r24
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	8f 93       	push	r24
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
	if(isNegative == false){
 5c8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <isNegative>
 5cc:	81 11       	cpse	r24, r1
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <__vector_11+0x1c>
		CLR_SW4;
 5d0:	5e 98       	cbi	0x0b, 6	; 11
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 5d4:	5f 98       	cbi	0x0b, 7	; 11
	}
	TIMSK1 &= ~(1 << OCIE1A);
 5d6:	ef e6       	ldi	r30, 0x6F	; 111
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	8d 7f       	andi	r24, 0xFD	; 253
 5de:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1B);
 5e0:	80 81       	ld	r24, Z
 5e2:	8b 7f       	andi	r24, 0xFB	; 251
 5e4:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2B);
 5e6:	e0 e7       	ldi	r30, 0x70	; 112
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	84 60       	ori	r24, 0x04	; 4
 5ee:	80 83       	st	Z, r24
	TCNT2 = 0;
 5f0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	8f 91       	pop	r24
 5fa:	0f 90       	pop	r0
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	0f 90       	pop	r0
 600:	1f 90       	pop	r1
 602:	18 95       	reti

00000604 <__vector_8>:

ISR(TIMER2_COMPB_vect){
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
	TIMSK2 &= ~(1 << OCIE2B);
 616:	e0 e7       	ldi	r30, 0x70	; 112
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	8b 7f       	andi	r24, 0xFB	; 251
 61e:	80 83       	st	Z, r24
	if(mfr == 0){
 620:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <mfr>
 624:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <mfr+0x1>
 628:	89 2b       	or	r24, r25
 62a:	c1 f4       	brne	.+48     	; 0x65c <__vector_8+0x58>
		TIMSK2 &= ~(1 << OCIE2A);
 62c:	80 81       	ld	r24, Z
 62e:	8d 7f       	andi	r24, 0xFD	; 253
 630:	80 83       	st	Z, r24
		TIMSK2 &= ~(1 << OCIE2B);
 632:	80 81       	ld	r24, Z
 634:	8b 7f       	andi	r24, 0xFB	; 251
 636:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1A);
 638:	ef e6       	ldi	r30, 0x6F	; 111
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	8d 7f       	andi	r24, 0xFD	; 253
 640:	80 83       	st	Z, r24
		TIMSK1 &= ~(1 << OCIE1B);
 642:	80 81       	ld	r24, Z
 644:	8b 7f       	andi	r24, 0xFB	; 251
 646:	80 83       	st	Z, r24
		CLR_SW3;
 648:	5f 98       	cbi	0x0b, 7	; 11
		CLR_SW4;
 64a:	5e 98       	cbi	0x0b, 6	; 11
		CLR_SW1;
 64c:	28 98       	cbi	0x05, 0	; 5
		CLR_SW2;
 64e:	5d 98       	cbi	0x0b, 5	; 11
		SET_SW3;
 650:	5f 9a       	sbi	0x0b, 7	; 11
		SET_SW4;
 652:	5e 9a       	sbi	0x0b, 6	; 11
		first_cycle = true;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <first_cycle>
 65a:	2e c0       	rjmp	.+92     	; 0x6b8 <__vector_8+0xb4>
		
	}
	else{
		if(isNegative == false){
 65c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <isNegative>
 660:	81 11       	cpse	r24, r1
 662:	05 c0       	rjmp	.+10     	; 0x66e <__vector_8+0x6a>
			SET_SW2;
 664:	5d 9a       	sbi	0x0b, 5	; 11
			isNegative = true;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <isNegative>
 66c:	03 c0       	rjmp	.+6      	; 0x674 <__vector_8+0x70>
		}
		else{
			SET_SW1;
 66e:	28 9a       	sbi	0x05, 0	; 5
			isNegative = false;
 670:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <isNegative>
		}

		if(change_duty == true){
 674:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <change_duty>
 678:	88 23       	and	r24, r24
 67a:	91 f0       	breq	.+36     	; 0x6a0 <__vector_8+0x9c>
			OCR1A = t1_compare_a;
 67c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <t1_compare_a>
 680:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <t1_compare_a+0x1>
 684:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 688:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B = t1_compare_b;
 68c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <t1_compare_b>
 690:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <t1_compare_b+0x1>
 694:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 698:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			change_duty = false;
 69c:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <change_duty>
			}		
	
		TIMSK1 |= (1 << OCIE1B);
 6a0:	ef e6       	ldi	r30, 0x6F	; 111
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	84 60       	ori	r24, 0x04	; 4
 6a8:	80 83       	st	Z, r24
		TIMSK1 |= (1 << OCIE1A);
 6aa:	80 81       	ld	r24, Z
 6ac:	82 60       	ori	r24, 0x02	; 2
 6ae:	80 83       	st	Z, r24
		TCNT1 = 0;
 6b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 6b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	}
		
}
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <__vector_12>:

ISR(TIMER1_COMPB_vect){
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	8f 93       	push	r24
 6d6:	ef 93       	push	r30
 6d8:	ff 93       	push	r31
	TIMSK1 &= ~(1 << OCIE1B);
 6da:	ef e6       	ldi	r30, 0x6F	; 111
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	8b 7f       	andi	r24, 0xFB	; 251
 6e2:	80 83       	st	Z, r24
	if(isNegative == false){
 6e4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <isNegative>
 6e8:	81 11       	cpse	r24, r1
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__vector_12+0x26>
		CLR_SW1;
 6ec:	28 98       	cbi	0x05, 0	; 5
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <__vector_12+0x28>
	}
	else{
		CLR_SW2;
 6f0:	5d 98       	cbi	0x0b, 5	; 11
	}
	TIMSK2 |= (1 << OCIE2A);
 6f2:	e0 e7       	ldi	r30, 0x70	; 112
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	82 60       	ori	r24, 0x02	; 2
 6fa:	80 83       	st	Z, r24
	TCNT2 = 0;
 6fc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
}
 700:	ff 91       	pop	r31
 702:	ef 91       	pop	r30
 704:	8f 91       	pop	r24
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 710:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 714:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 718:	e1 ec       	ldi	r30, 0xC1	; 193
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	88 60       	ori	r24, 0x08	; 8
 720:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 722:	80 81       	ld	r24, Z
 724:	80 61       	ori	r24, 0x10	; 16
 726:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 728:	80 81       	ld	r24, Z
 72a:	80 68       	ori	r24, 0x80	; 128
 72c:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 72e:	e2 ec       	ldi	r30, 0xC2	; 194
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	86 60       	ori	r24, 0x06	; 6
 736:	80 83       	st	Z, r24
 738:	08 95       	ret

0000073a <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 73e:	fc 01       	movw	r30, r24
 740:	20 81       	ld	r18, Z
 742:	22 23       	and	r18, r18
 744:	69 f0       	breq	.+26     	; 0x760 <uart_transmit+0x26>
 746:	dc 01       	movw	r26, r24
 748:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 74a:	e0 ec       	ldi	r30, 0xC0	; 192
 74c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 74e:	c6 ec       	ldi	r28, 0xC6	; 198
 750:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 752:	90 81       	ld	r25, Z
 754:	95 ff       	sbrs	r25, 5
 756:	fd cf       	rjmp	.-6      	; 0x752 <uart_transmit+0x18>
		UDR0 = message[i];
 758:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 75a:	2d 91       	ld	r18, X+
 75c:	21 11       	cpse	r18, r1
 75e:	f9 cf       	rjmp	.-14     	; 0x752 <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	08 95       	ret

00000766 <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	8b 01       	movw	r16, r22
 770:	fc 01       	movw	r30, r24
 772:	31 96       	adiw	r30, 0x01	; 1
 774:	ac 01       	movw	r20, r24
 776:	4c 5f       	subi	r20, 0xFC	; 252
 778:	5f 4f       	sbci	r21, 0xFF	; 255
	int value = 0;
 77a:	c0 e0       	ldi	r28, 0x00	; 0
 77c:	d0 e0       	ldi	r29, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 77e:	9e 01       	movw	r18, r28
 780:	22 0f       	add	r18, r18
 782:	33 1f       	adc	r19, r19
 784:	cc 0f       	add	r28, r28
 786:	dd 1f       	adc	r29, r29
 788:	cc 0f       	add	r28, r28
 78a:	dd 1f       	adc	r29, r29
 78c:	cc 0f       	add	r28, r28
 78e:	dd 1f       	adc	r29, r29
 790:	c2 0f       	add	r28, r18
 792:	d3 1f       	adc	r29, r19
 794:	21 91       	ld	r18, Z+
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	20 53       	subi	r18, 0x30	; 48
 79a:	31 09       	sbc	r19, r1
 79c:	c2 0f       	add	r28, r18
 79e:	d3 1f       	adc	r29, r19

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 7a0:	e4 17       	cp	r30, r20
 7a2:	f5 07       	cpc	r31, r21
 7a4:	61 f7       	brne	.-40     	; 0x77e <process_message+0x18>

// 	for(unsigned int i = 0; i < 3; i++){
// 		value = value*10 + (tmp[i] - 48);
// 	}

	if(message[1] == 'p'){
 7a6:	fc 01       	movw	r30, r24
 7a8:	81 81       	ldd	r24, Z+1	; 0x01
 7aa:	80 37       	cpi	r24, 0x70	; 112
 7ac:	21 f4       	brne	.+8      	; 0x7b6 <process_message+0x50>
		uart_transmit("\n\rits here!\n\r");
 7ae:	89 e3       	ldi	r24, 0x39	; 57
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_transmit>
	}
	*mfc = value;
 7b6:	f8 01       	movw	r30, r16
 7b8:	d1 83       	std	Z+1, r29	; 0x01
 7ba:	c0 83       	st	Z, r28
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	08 95       	ret

000007c6 <__subsf3>:
 7c6:	50 58       	subi	r21, 0x80	; 128

000007c8 <__addsf3>:
 7c8:	bb 27       	eor	r27, r27
 7ca:	aa 27       	eor	r26, r26
 7cc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__addsf3x>
 7d0:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_round>
 7d4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_pscA>
 7d8:	38 f0       	brcs	.+14     	; 0x7e8 <__addsf3+0x20>
 7da:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscB>
 7de:	20 f0       	brcs	.+8      	; 0x7e8 <__addsf3+0x20>
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <__addsf3+0x28>
 7e2:	9f 3f       	cpi	r25, 0xFF	; 255
 7e4:	19 f4       	brne	.+6      	; 0x7ec <__addsf3+0x24>
 7e6:	26 f4       	brtc	.+8      	; 0x7f0 <__addsf3+0x28>
 7e8:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_nan>
 7ec:	0e f4       	brtc	.+2      	; 0x7f0 <__addsf3+0x28>
 7ee:	e0 95       	com	r30
 7f0:	e7 fb       	bst	r30, 7
 7f2:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_inf>

000007f6 <__addsf3x>:
 7f6:	e9 2f       	mov	r30, r25
 7f8:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_split3>
 7fc:	58 f3       	brcs	.-42     	; 0x7d4 <__addsf3+0xc>
 7fe:	ba 17       	cp	r27, r26
 800:	62 07       	cpc	r22, r18
 802:	73 07       	cpc	r23, r19
 804:	84 07       	cpc	r24, r20
 806:	95 07       	cpc	r25, r21
 808:	20 f0       	brcs	.+8      	; 0x812 <__addsf3x+0x1c>
 80a:	79 f4       	brne	.+30     	; 0x82a <__addsf3x+0x34>
 80c:	a6 f5       	brtc	.+104    	; 0x876 <__addsf3x+0x80>
 80e:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__fp_zero>
 812:	0e f4       	brtc	.+2      	; 0x816 <__addsf3x+0x20>
 814:	e0 95       	com	r30
 816:	0b 2e       	mov	r0, r27
 818:	ba 2f       	mov	r27, r26
 81a:	a0 2d       	mov	r26, r0
 81c:	0b 01       	movw	r0, r22
 81e:	b9 01       	movw	r22, r18
 820:	90 01       	movw	r18, r0
 822:	0c 01       	movw	r0, r24
 824:	ca 01       	movw	r24, r20
 826:	a0 01       	movw	r20, r0
 828:	11 24       	eor	r1, r1
 82a:	ff 27       	eor	r31, r31
 82c:	59 1b       	sub	r21, r25
 82e:	99 f0       	breq	.+38     	; 0x856 <__addsf3x+0x60>
 830:	59 3f       	cpi	r21, 0xF9	; 249
 832:	50 f4       	brcc	.+20     	; 0x848 <__addsf3x+0x52>
 834:	50 3e       	cpi	r21, 0xE0	; 224
 836:	68 f1       	brcs	.+90     	; 0x892 <__addsf3x+0x9c>
 838:	1a 16       	cp	r1, r26
 83a:	f0 40       	sbci	r31, 0x00	; 0
 83c:	a2 2f       	mov	r26, r18
 83e:	23 2f       	mov	r18, r19
 840:	34 2f       	mov	r19, r20
 842:	44 27       	eor	r20, r20
 844:	58 5f       	subi	r21, 0xF8	; 248
 846:	f3 cf       	rjmp	.-26     	; 0x82e <__addsf3x+0x38>
 848:	46 95       	lsr	r20
 84a:	37 95       	ror	r19
 84c:	27 95       	ror	r18
 84e:	a7 95       	ror	r26
 850:	f0 40       	sbci	r31, 0x00	; 0
 852:	53 95       	inc	r21
 854:	c9 f7       	brne	.-14     	; 0x848 <__addsf3x+0x52>
 856:	7e f4       	brtc	.+30     	; 0x876 <__addsf3x+0x80>
 858:	1f 16       	cp	r1, r31
 85a:	ba 0b       	sbc	r27, r26
 85c:	62 0b       	sbc	r22, r18
 85e:	73 0b       	sbc	r23, r19
 860:	84 0b       	sbc	r24, r20
 862:	ba f0       	brmi	.+46     	; 0x892 <__addsf3x+0x9c>
 864:	91 50       	subi	r25, 0x01	; 1
 866:	a1 f0       	breq	.+40     	; 0x890 <__addsf3x+0x9a>
 868:	ff 0f       	add	r31, r31
 86a:	bb 1f       	adc	r27, r27
 86c:	66 1f       	adc	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	c2 f7       	brpl	.-16     	; 0x864 <__addsf3x+0x6e>
 874:	0e c0       	rjmp	.+28     	; 0x892 <__addsf3x+0x9c>
 876:	ba 0f       	add	r27, r26
 878:	62 1f       	adc	r22, r18
 87a:	73 1f       	adc	r23, r19
 87c:	84 1f       	adc	r24, r20
 87e:	48 f4       	brcc	.+18     	; 0x892 <__addsf3x+0x9c>
 880:	87 95       	ror	r24
 882:	77 95       	ror	r23
 884:	67 95       	ror	r22
 886:	b7 95       	ror	r27
 888:	f7 95       	ror	r31
 88a:	9e 3f       	cpi	r25, 0xFE	; 254
 88c:	08 f0       	brcs	.+2      	; 0x890 <__addsf3x+0x9a>
 88e:	b0 cf       	rjmp	.-160    	; 0x7f0 <__addsf3+0x28>
 890:	93 95       	inc	r25
 892:	88 0f       	add	r24, r24
 894:	08 f0       	brcs	.+2      	; 0x898 <__addsf3x+0xa2>
 896:	99 27       	eor	r25, r25
 898:	ee 0f       	add	r30, r30
 89a:	97 95       	ror	r25
 89c:	87 95       	ror	r24
 89e:	08 95       	ret

000008a0 <__divsf3>:
 8a0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__divsf3x>
 8a4:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_round>
 8a8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscB>
 8ac:	58 f0       	brcs	.+22     	; 0x8c4 <__divsf3+0x24>
 8ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_pscA>
 8b2:	40 f0       	brcs	.+16     	; 0x8c4 <__divsf3+0x24>
 8b4:	29 f4       	brne	.+10     	; 0x8c0 <__divsf3+0x20>
 8b6:	5f 3f       	cpi	r21, 0xFF	; 255
 8b8:	29 f0       	breq	.+10     	; 0x8c4 <__divsf3+0x24>
 8ba:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_inf>
 8be:	51 11       	cpse	r21, r1
 8c0:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_szero>
 8c4:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_nan>

000008c8 <__divsf3x>:
 8c8:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_split3>
 8cc:	68 f3       	brcs	.-38     	; 0x8a8 <__divsf3+0x8>

000008ce <__divsf3_pse>:
 8ce:	99 23       	and	r25, r25
 8d0:	b1 f3       	breq	.-20     	; 0x8be <__divsf3+0x1e>
 8d2:	55 23       	and	r21, r21
 8d4:	91 f3       	breq	.-28     	; 0x8ba <__divsf3+0x1a>
 8d6:	95 1b       	sub	r25, r21
 8d8:	55 0b       	sbc	r21, r21
 8da:	bb 27       	eor	r27, r27
 8dc:	aa 27       	eor	r26, r26
 8de:	62 17       	cp	r22, r18
 8e0:	73 07       	cpc	r23, r19
 8e2:	84 07       	cpc	r24, r20
 8e4:	38 f0       	brcs	.+14     	; 0x8f4 <__divsf3_pse+0x26>
 8e6:	9f 5f       	subi	r25, 0xFF	; 255
 8e8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ea:	22 0f       	add	r18, r18
 8ec:	33 1f       	adc	r19, r19
 8ee:	44 1f       	adc	r20, r20
 8f0:	aa 1f       	adc	r26, r26
 8f2:	a9 f3       	breq	.-22     	; 0x8de <__divsf3_pse+0x10>
 8f4:	35 d0       	rcall	.+106    	; 0x960 <__stack+0x61>
 8f6:	0e 2e       	mov	r0, r30
 8f8:	3a f0       	brmi	.+14     	; 0x908 <__stack+0x9>
 8fa:	e0 e8       	ldi	r30, 0x80	; 128
 8fc:	32 d0       	rcall	.+100    	; 0x962 <__stack+0x63>
 8fe:	91 50       	subi	r25, 0x01	; 1
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	e6 95       	lsr	r30
 904:	00 1c       	adc	r0, r0
 906:	ca f7       	brpl	.-14     	; 0x8fa <__divsf3_pse+0x2c>
 908:	2b d0       	rcall	.+86     	; 0x960 <__stack+0x61>
 90a:	fe 2f       	mov	r31, r30
 90c:	29 d0       	rcall	.+82     	; 0x960 <__stack+0x61>
 90e:	66 0f       	add	r22, r22
 910:	77 1f       	adc	r23, r23
 912:	88 1f       	adc	r24, r24
 914:	bb 1f       	adc	r27, r27
 916:	26 17       	cp	r18, r22
 918:	37 07       	cpc	r19, r23
 91a:	48 07       	cpc	r20, r24
 91c:	ab 07       	cpc	r26, r27
 91e:	b0 e8       	ldi	r27, 0x80	; 128
 920:	09 f0       	breq	.+2      	; 0x924 <__stack+0x25>
 922:	bb 0b       	sbc	r27, r27
 924:	80 2d       	mov	r24, r0
 926:	bf 01       	movw	r22, r30
 928:	ff 27       	eor	r31, r31
 92a:	93 58       	subi	r25, 0x83	; 131
 92c:	5f 4f       	sbci	r21, 0xFF	; 255
 92e:	3a f0       	brmi	.+14     	; 0x93e <__stack+0x3f>
 930:	9e 3f       	cpi	r25, 0xFE	; 254
 932:	51 05       	cpc	r21, r1
 934:	78 f0       	brcs	.+30     	; 0x954 <__stack+0x55>
 936:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_inf>
 93a:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_szero>
 93e:	5f 3f       	cpi	r21, 0xFF	; 255
 940:	e4 f3       	brlt	.-8      	; 0x93a <__stack+0x3b>
 942:	98 3e       	cpi	r25, 0xE8	; 232
 944:	d4 f3       	brlt	.-12     	; 0x93a <__stack+0x3b>
 946:	86 95       	lsr	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	b7 95       	ror	r27
 94e:	f7 95       	ror	r31
 950:	9f 5f       	subi	r25, 0xFF	; 255
 952:	c9 f7       	brne	.-14     	; 0x946 <__stack+0x47>
 954:	88 0f       	add	r24, r24
 956:	91 1d       	adc	r25, r1
 958:	96 95       	lsr	r25
 95a:	87 95       	ror	r24
 95c:	97 f9       	bld	r25, 7
 95e:	08 95       	ret
 960:	e1 e0       	ldi	r30, 0x01	; 1
 962:	66 0f       	add	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	bb 1f       	adc	r27, r27
 96a:	62 17       	cp	r22, r18
 96c:	73 07       	cpc	r23, r19
 96e:	84 07       	cpc	r24, r20
 970:	ba 07       	cpc	r27, r26
 972:	20 f0       	brcs	.+8      	; 0x97c <__stack+0x7d>
 974:	62 1b       	sub	r22, r18
 976:	73 0b       	sbc	r23, r19
 978:	84 0b       	sbc	r24, r20
 97a:	ba 0b       	sbc	r27, r26
 97c:	ee 1f       	adc	r30, r30
 97e:	88 f7       	brcc	.-30     	; 0x962 <__stack+0x63>
 980:	e0 95       	com	r30
 982:	08 95       	ret

00000984 <__fixunssfsi>:
 984:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_splitA>
 988:	88 f0       	brcs	.+34     	; 0x9ac <__fixunssfsi+0x28>
 98a:	9f 57       	subi	r25, 0x7F	; 127
 98c:	98 f0       	brcs	.+38     	; 0x9b4 <__fixunssfsi+0x30>
 98e:	b9 2f       	mov	r27, r25
 990:	99 27       	eor	r25, r25
 992:	b7 51       	subi	r27, 0x17	; 23
 994:	b0 f0       	brcs	.+44     	; 0x9c2 <__fixunssfsi+0x3e>
 996:	e1 f0       	breq	.+56     	; 0x9d0 <__fixunssfsi+0x4c>
 998:	66 0f       	add	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	1a f0       	brmi	.+6      	; 0x9a8 <__fixunssfsi+0x24>
 9a2:	ba 95       	dec	r27
 9a4:	c9 f7       	brne	.-14     	; 0x998 <__fixunssfsi+0x14>
 9a6:	14 c0       	rjmp	.+40     	; 0x9d0 <__fixunssfsi+0x4c>
 9a8:	b1 30       	cpi	r27, 0x01	; 1
 9aa:	91 f0       	breq	.+36     	; 0x9d0 <__fixunssfsi+0x4c>
 9ac:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_zero>
 9b0:	b1 e0       	ldi	r27, 0x01	; 1
 9b2:	08 95       	ret
 9b4:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__fp_zero>
 9b8:	67 2f       	mov	r22, r23
 9ba:	78 2f       	mov	r23, r24
 9bc:	88 27       	eor	r24, r24
 9be:	b8 5f       	subi	r27, 0xF8	; 248
 9c0:	39 f0       	breq	.+14     	; 0x9d0 <__fixunssfsi+0x4c>
 9c2:	b9 3f       	cpi	r27, 0xF9	; 249
 9c4:	cc f3       	brlt	.-14     	; 0x9b8 <__fixunssfsi+0x34>
 9c6:	86 95       	lsr	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	b3 95       	inc	r27
 9ce:	d9 f7       	brne	.-10     	; 0x9c6 <__fixunssfsi+0x42>
 9d0:	3e f4       	brtc	.+14     	; 0x9e0 <__fixunssfsi+0x5c>
 9d2:	90 95       	com	r25
 9d4:	80 95       	com	r24
 9d6:	70 95       	com	r23
 9d8:	61 95       	neg	r22
 9da:	7f 4f       	sbci	r23, 0xFF	; 255
 9dc:	8f 4f       	sbci	r24, 0xFF	; 255
 9de:	9f 4f       	sbci	r25, 0xFF	; 255
 9e0:	08 95       	ret

000009e2 <__floatunsisf>:
 9e2:	e8 94       	clt
 9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <__floatsisf+0x12>

000009e6 <__floatsisf>:
 9e6:	97 fb       	bst	r25, 7
 9e8:	3e f4       	brtc	.+14     	; 0x9f8 <__floatsisf+0x12>
 9ea:	90 95       	com	r25
 9ec:	80 95       	com	r24
 9ee:	70 95       	com	r23
 9f0:	61 95       	neg	r22
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	99 23       	and	r25, r25
 9fa:	a9 f0       	breq	.+42     	; 0xa26 <__floatsisf+0x40>
 9fc:	f9 2f       	mov	r31, r25
 9fe:	96 e9       	ldi	r25, 0x96	; 150
 a00:	bb 27       	eor	r27, r27
 a02:	93 95       	inc	r25
 a04:	f6 95       	lsr	r31
 a06:	87 95       	ror	r24
 a08:	77 95       	ror	r23
 a0a:	67 95       	ror	r22
 a0c:	b7 95       	ror	r27
 a0e:	f1 11       	cpse	r31, r1
 a10:	f8 cf       	rjmp	.-16     	; 0xa02 <__floatsisf+0x1c>
 a12:	fa f4       	brpl	.+62     	; 0xa52 <__floatsisf+0x6c>
 a14:	bb 0f       	add	r27, r27
 a16:	11 f4       	brne	.+4      	; 0xa1c <__floatsisf+0x36>
 a18:	60 ff       	sbrs	r22, 0
 a1a:	1b c0       	rjmp	.+54     	; 0xa52 <__floatsisf+0x6c>
 a1c:	6f 5f       	subi	r22, 0xFF	; 255
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255
 a20:	8f 4f       	sbci	r24, 0xFF	; 255
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	16 c0       	rjmp	.+44     	; 0xa52 <__floatsisf+0x6c>
 a26:	88 23       	and	r24, r24
 a28:	11 f0       	breq	.+4      	; 0xa2e <__floatsisf+0x48>
 a2a:	96 e9       	ldi	r25, 0x96	; 150
 a2c:	11 c0       	rjmp	.+34     	; 0xa50 <__floatsisf+0x6a>
 a2e:	77 23       	and	r23, r23
 a30:	21 f0       	breq	.+8      	; 0xa3a <__floatsisf+0x54>
 a32:	9e e8       	ldi	r25, 0x8E	; 142
 a34:	87 2f       	mov	r24, r23
 a36:	76 2f       	mov	r23, r22
 a38:	05 c0       	rjmp	.+10     	; 0xa44 <__floatsisf+0x5e>
 a3a:	66 23       	and	r22, r22
 a3c:	71 f0       	breq	.+28     	; 0xa5a <__floatsisf+0x74>
 a3e:	96 e8       	ldi	r25, 0x86	; 134
 a40:	86 2f       	mov	r24, r22
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	2a f0       	brmi	.+10     	; 0xa52 <__floatsisf+0x6c>
 a48:	9a 95       	dec	r25
 a4a:	66 0f       	add	r22, r22
 a4c:	77 1f       	adc	r23, r23
 a4e:	88 1f       	adc	r24, r24
 a50:	da f7       	brpl	.-10     	; 0xa48 <__floatsisf+0x62>
 a52:	88 0f       	add	r24, r24
 a54:	96 95       	lsr	r25
 a56:	87 95       	ror	r24
 a58:	97 f9       	bld	r25, 7
 a5a:	08 95       	ret

00000a5c <__fp_inf>:
 a5c:	97 f9       	bld	r25, 7
 a5e:	9f 67       	ori	r25, 0x7F	; 127
 a60:	80 e8       	ldi	r24, 0x80	; 128
 a62:	70 e0       	ldi	r23, 0x00	; 0
 a64:	60 e0       	ldi	r22, 0x00	; 0
 a66:	08 95       	ret

00000a68 <__fp_nan>:
 a68:	9f ef       	ldi	r25, 0xFF	; 255
 a6a:	80 ec       	ldi	r24, 0xC0	; 192
 a6c:	08 95       	ret

00000a6e <__fp_pscA>:
 a6e:	00 24       	eor	r0, r0
 a70:	0a 94       	dec	r0
 a72:	16 16       	cp	r1, r22
 a74:	17 06       	cpc	r1, r23
 a76:	18 06       	cpc	r1, r24
 a78:	09 06       	cpc	r0, r25
 a7a:	08 95       	ret

00000a7c <__fp_pscB>:
 a7c:	00 24       	eor	r0, r0
 a7e:	0a 94       	dec	r0
 a80:	12 16       	cp	r1, r18
 a82:	13 06       	cpc	r1, r19
 a84:	14 06       	cpc	r1, r20
 a86:	05 06       	cpc	r0, r21
 a88:	08 95       	ret

00000a8a <__fp_round>:
 a8a:	09 2e       	mov	r0, r25
 a8c:	03 94       	inc	r0
 a8e:	00 0c       	add	r0, r0
 a90:	11 f4       	brne	.+4      	; 0xa96 <__fp_round+0xc>
 a92:	88 23       	and	r24, r24
 a94:	52 f0       	brmi	.+20     	; 0xaaa <__fp_round+0x20>
 a96:	bb 0f       	add	r27, r27
 a98:	40 f4       	brcc	.+16     	; 0xaaa <__fp_round+0x20>
 a9a:	bf 2b       	or	r27, r31
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__fp_round+0x18>
 a9e:	60 ff       	sbrs	r22, 0
 aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__fp_round+0x20>
 aa2:	6f 5f       	subi	r22, 0xFF	; 255
 aa4:	7f 4f       	sbci	r23, 0xFF	; 255
 aa6:	8f 4f       	sbci	r24, 0xFF	; 255
 aa8:	9f 4f       	sbci	r25, 0xFF	; 255
 aaa:	08 95       	ret

00000aac <__fp_split3>:
 aac:	57 fd       	sbrc	r21, 7
 aae:	90 58       	subi	r25, 0x80	; 128
 ab0:	44 0f       	add	r20, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	59 f0       	breq	.+22     	; 0xacc <__fp_splitA+0x10>
 ab6:	5f 3f       	cpi	r21, 0xFF	; 255
 ab8:	71 f0       	breq	.+28     	; 0xad6 <__fp_splitA+0x1a>
 aba:	47 95       	ror	r20

00000abc <__fp_splitA>:
 abc:	88 0f       	add	r24, r24
 abe:	97 fb       	bst	r25, 7
 ac0:	99 1f       	adc	r25, r25
 ac2:	61 f0       	breq	.+24     	; 0xadc <__fp_splitA+0x20>
 ac4:	9f 3f       	cpi	r25, 0xFF	; 255
 ac6:	79 f0       	breq	.+30     	; 0xae6 <__fp_splitA+0x2a>
 ac8:	87 95       	ror	r24
 aca:	08 95       	ret
 acc:	12 16       	cp	r1, r18
 ace:	13 06       	cpc	r1, r19
 ad0:	14 06       	cpc	r1, r20
 ad2:	55 1f       	adc	r21, r21
 ad4:	f2 cf       	rjmp	.-28     	; 0xaba <__fp_split3+0xe>
 ad6:	46 95       	lsr	r20
 ad8:	f1 df       	rcall	.-30     	; 0xabc <__fp_splitA>
 ada:	08 c0       	rjmp	.+16     	; 0xaec <__fp_splitA+0x30>
 adc:	16 16       	cp	r1, r22
 ade:	17 06       	cpc	r1, r23
 ae0:	18 06       	cpc	r1, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	f1 cf       	rjmp	.-30     	; 0xac8 <__fp_splitA+0xc>
 ae6:	86 95       	lsr	r24
 ae8:	71 05       	cpc	r23, r1
 aea:	61 05       	cpc	r22, r1
 aec:	08 94       	sec
 aee:	08 95       	ret

00000af0 <__fp_zero>:
 af0:	e8 94       	clt

00000af2 <__fp_szero>:
 af2:	bb 27       	eor	r27, r27
 af4:	66 27       	eor	r22, r22
 af6:	77 27       	eor	r23, r23
 af8:	cb 01       	movw	r24, r22
 afa:	97 f9       	bld	r25, 7
 afc:	08 95       	ret

00000afe <__mulsf3>:
 afe:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3x>
 b02:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_round>
 b06:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_pscA>
 b0a:	38 f0       	brcs	.+14     	; 0xb1a <__mulsf3+0x1c>
 b0c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscB>
 b10:	20 f0       	brcs	.+8      	; 0xb1a <__mulsf3+0x1c>
 b12:	95 23       	and	r25, r21
 b14:	11 f0       	breq	.+4      	; 0xb1a <__mulsf3+0x1c>
 b16:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_inf>
 b1a:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_nan>
 b1e:	11 24       	eor	r1, r1
 b20:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_szero>

00000b24 <__mulsf3x>:
 b24:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_split3>
 b28:	70 f3       	brcs	.-36     	; 0xb06 <__mulsf3+0x8>

00000b2a <__mulsf3_pse>:
 b2a:	95 9f       	mul	r25, r21
 b2c:	c1 f3       	breq	.-16     	; 0xb1e <__mulsf3+0x20>
 b2e:	95 0f       	add	r25, r21
 b30:	50 e0       	ldi	r21, 0x00	; 0
 b32:	55 1f       	adc	r21, r21
 b34:	62 9f       	mul	r22, r18
 b36:	f0 01       	movw	r30, r0
 b38:	72 9f       	mul	r23, r18
 b3a:	bb 27       	eor	r27, r27
 b3c:	f0 0d       	add	r31, r0
 b3e:	b1 1d       	adc	r27, r1
 b40:	63 9f       	mul	r22, r19
 b42:	aa 27       	eor	r26, r26
 b44:	f0 0d       	add	r31, r0
 b46:	b1 1d       	adc	r27, r1
 b48:	aa 1f       	adc	r26, r26
 b4a:	64 9f       	mul	r22, r20
 b4c:	66 27       	eor	r22, r22
 b4e:	b0 0d       	add	r27, r0
 b50:	a1 1d       	adc	r26, r1
 b52:	66 1f       	adc	r22, r22
 b54:	82 9f       	mul	r24, r18
 b56:	22 27       	eor	r18, r18
 b58:	b0 0d       	add	r27, r0
 b5a:	a1 1d       	adc	r26, r1
 b5c:	62 1f       	adc	r22, r18
 b5e:	73 9f       	mul	r23, r19
 b60:	b0 0d       	add	r27, r0
 b62:	a1 1d       	adc	r26, r1
 b64:	62 1f       	adc	r22, r18
 b66:	83 9f       	mul	r24, r19
 b68:	a0 0d       	add	r26, r0
 b6a:	61 1d       	adc	r22, r1
 b6c:	22 1f       	adc	r18, r18
 b6e:	74 9f       	mul	r23, r20
 b70:	33 27       	eor	r19, r19
 b72:	a0 0d       	add	r26, r0
 b74:	61 1d       	adc	r22, r1
 b76:	23 1f       	adc	r18, r19
 b78:	84 9f       	mul	r24, r20
 b7a:	60 0d       	add	r22, r0
 b7c:	21 1d       	adc	r18, r1
 b7e:	82 2f       	mov	r24, r18
 b80:	76 2f       	mov	r23, r22
 b82:	6a 2f       	mov	r22, r26
 b84:	11 24       	eor	r1, r1
 b86:	9f 57       	subi	r25, 0x7F	; 127
 b88:	50 40       	sbci	r21, 0x00	; 0
 b8a:	9a f0       	brmi	.+38     	; 0xbb2 <__mulsf3_pse+0x88>
 b8c:	f1 f0       	breq	.+60     	; 0xbca <__mulsf3_pse+0xa0>
 b8e:	88 23       	and	r24, r24
 b90:	4a f0       	brmi	.+18     	; 0xba4 <__mulsf3_pse+0x7a>
 b92:	ee 0f       	add	r30, r30
 b94:	ff 1f       	adc	r31, r31
 b96:	bb 1f       	adc	r27, r27
 b98:	66 1f       	adc	r22, r22
 b9a:	77 1f       	adc	r23, r23
 b9c:	88 1f       	adc	r24, r24
 b9e:	91 50       	subi	r25, 0x01	; 1
 ba0:	50 40       	sbci	r21, 0x00	; 0
 ba2:	a9 f7       	brne	.-22     	; 0xb8e <__mulsf3_pse+0x64>
 ba4:	9e 3f       	cpi	r25, 0xFE	; 254
 ba6:	51 05       	cpc	r21, r1
 ba8:	80 f0       	brcs	.+32     	; 0xbca <__mulsf3_pse+0xa0>
 baa:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_inf>
 bae:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_szero>
 bb2:	5f 3f       	cpi	r21, 0xFF	; 255
 bb4:	e4 f3       	brlt	.-8      	; 0xbae <__mulsf3_pse+0x84>
 bb6:	98 3e       	cpi	r25, 0xE8	; 232
 bb8:	d4 f3       	brlt	.-12     	; 0xbae <__mulsf3_pse+0x84>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b7 95       	ror	r27
 bc2:	f7 95       	ror	r31
 bc4:	e7 95       	ror	r30
 bc6:	9f 5f       	subi	r25, 0xFF	; 255
 bc8:	c1 f7       	brne	.-16     	; 0xbba <__mulsf3_pse+0x90>
 bca:	fe 2b       	or	r31, r30
 bcc:	88 0f       	add	r24, r24
 bce:	91 1d       	adc	r25, r1
 bd0:	96 95       	lsr	r25
 bd2:	87 95       	ror	r24
 bd4:	97 f9       	bld	r25, 7
 bd6:	08 95       	ret

00000bd8 <__umulhisi3>:
 bd8:	a2 9f       	mul	r26, r18
 bda:	b0 01       	movw	r22, r0
 bdc:	b3 9f       	mul	r27, r19
 bde:	c0 01       	movw	r24, r0
 be0:	a3 9f       	mul	r26, r19
 be2:	70 0d       	add	r23, r0
 be4:	81 1d       	adc	r24, r1
 be6:	11 24       	eor	r1, r1
 be8:	91 1d       	adc	r25, r1
 bea:	b2 9f       	mul	r27, r18
 bec:	70 0d       	add	r23, r0
 bee:	81 1d       	adc	r24, r1
 bf0:	11 24       	eor	r1, r1
 bf2:	91 1d       	adc	r25, r1
 bf4:	08 95       	ret

00000bf6 <_exit>:
 bf6:	f8 94       	cli

00000bf8 <__stop_program>:
 bf8:	ff cf       	rjmp	.-2      	; 0xbf8 <__stop_program>
