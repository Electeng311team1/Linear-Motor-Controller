
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000834  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000008a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095b  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000423  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000353  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_11>
  30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_14>
  3c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  88:	0c 94 18 04 	jmp	0x830	; 0x830 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <driverTimers_Init>:
#define TOGGLE_SW4 PORTD ^= (1<<PD6)



void driverTimers_Init(){
 	TCCR0B |= (1<<CS00); //Set up 8bit timer to use 8MHZ clock
  90:	85 b5       	in	r24, 0x25	; 37
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bd       	out	0x25, r24	; 37
 	OCR0A = DEAD_TIME_COUNT_HIGH; //DEAD_TIME_COUNT_HIGH;	
  96:	80 ed       	ldi	r24, 0xD0	; 208
  98:	87 bd       	out	0x27, r24	; 39
 	OCR0B = DEAD_TIME_COUNT_LOW; //DEAD_TIME_COUNT_LOW;			//Initializing dead times which remain constant		
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	88 bd       	out	0x28, r24	; 40

	TCCR1B |= (1<<CS11);//Set up 16 bit timer with pre-scaler 8
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	DDRB = (1 << DDB0); //Configuring driver pins to output
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
  ac:	80 ee       	ldi	r24, 0xE0	; 224
  ae:	8a b9       	out	0x0a, r24	; 10
	
	//SET PINS AND VARIABLES TO START STATE to start with positive cycle 
	PORTB |= (1<<PB0);
  b0:	28 9a       	sbi	0x05, 0	; 5
	PORTD &= ~(1<<PD5);
  b2:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<PD7);
  b4:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= (1<<PD6);
  b6:	5e 9a       	sbi	0x0b, 6	; 11
	
	isNegativeCycle = false; 
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  bc:	08 95       	ret

000000be <setFrequency>:
	
}

void setFrequency(float frequency, float dutyCycle){
  be:	4f 92       	push	r4
  c0:	5f 92       	push	r5
  c2:	6f 92       	push	r6
  c4:	7f 92       	push	r7
  c6:	8f 92       	push	r8
  c8:	9f 92       	push	r9
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	2b 01       	movw	r4, r22
  d8:	3c 01       	movw	r6, r24
  da:	69 01       	movw	r12, r18
  dc:	7a 01       	movw	r14, r20
	float OFFTime = 1000.0/ (frequency*(2+ MAGNITUDE_DELAY + (2*dutyCycle)/(1-dutyCycle))); //Find T_ON, T_OFF1, T_OFF2 from given frequency
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	9f e3       	ldi	r25, 0x3F	; 63
  e6:	0e 94 c2 01 	call	0x384	; 0x384 <__subsf3>
  ea:	4b 01       	movw	r8, r22
  ec:	5c 01       	movw	r10, r24
 	T_OFF1 = (uint16_t) (round(1000*OFFTime) + ((DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8)); 
  ee:	a7 01       	movw	r20, r14
  f0:	96 01       	movw	r18, r12
  f2:	c7 01       	movw	r24, r14
  f4:	b6 01       	movw	r22, r12
  f6:	0e 94 c3 01 	call	0x386	; 0x386 <__addsf3>
  fa:	a5 01       	movw	r20, r10
  fc:	94 01       	movw	r18, r8
  fe:	0e 94 2f 02 	call	0x45e	; 0x45e <__divsf3>
 102:	2a e9       	ldi	r18, 0x9A	; 154
 104:	39 e9       	ldi	r19, 0x99	; 153
 106:	49 e1       	ldi	r20, 0x19	; 25
 108:	50 e4       	ldi	r21, 0x40	; 64
 10a:	0e 94 c3 01 	call	0x386	; 0x386 <__addsf3>
 10e:	a3 01       	movw	r20, r6
 110:	92 01       	movw	r18, r4
 112:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__mulsf3>
 116:	9b 01       	movw	r18, r22
 118:	ac 01       	movw	r20, r24
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	8a e7       	ldi	r24, 0x7A	; 122
 120:	94 e4       	ldi	r25, 0x44	; 68
 122:	0e 94 2f 02 	call	0x45e	; 0x45e <__divsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	4a e7       	ldi	r20, 0x7A	; 122
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__mulsf3>
 132:	2b 01       	movw	r4, r22
 134:	3c 01       	movw	r6, r24
 136:	0e 94 cb 03 	call	0x796	; 0x796 <round>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	48 ee       	ldi	r20, 0xE8	; 232
 140:	54 e4       	ldi	r21, 0x44	; 68
 142:	0e 94 c3 01 	call	0x386	; 0x386 <__addsf3>
 146:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
 14a:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <T_OFF1+0x1>
 14e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <T_OFF1>
 	T_OFF2 = (uint16_t) (round(OFFTime*1000.0 * (1.0+MAGNITUDE_DELAY)) + ((DEAD_TIME_COUNT_HIGH + DEAD_TIME_COUNT_LOW) *8));
 152:	23 e3       	ldi	r18, 0x33	; 51
 154:	33 e3       	ldi	r19, 0x33	; 51
 156:	43 eb       	ldi	r20, 0xB3	; 179
 158:	5f e3       	ldi	r21, 0x3F	; 63
 15a:	c3 01       	movw	r24, r6
 15c:	b2 01       	movw	r22, r4
 15e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__mulsf3>
 162:	0e 94 cb 03 	call	0x796	; 0x796 <round>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	48 ee       	ldi	r20, 0xE8	; 232
 16c:	54 e4       	ldi	r21, 0x44	; 68
 16e:	0e 94 c3 01 	call	0x386	; 0x386 <__addsf3>
 172:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
 176:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <T_OFF2+0x1>
 17a:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <T_OFF2>
	
	T_ON = dutyCycle * T_OFF1/ (1-dutyCycle); //calculating on time from calculated off time
 17e:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <T_OFF1>
 182:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <T_OFF1+0x1>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__floatunsisf>
 18e:	a7 01       	movw	r20, r14
 190:	96 01       	movw	r18, r12
 192:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__mulsf3>
 196:	a5 01       	movw	r20, r10
 198:	94 01       	movw	r18, r8
 19a:	0e 94 2f 02 	call	0x45e	; 0x45e <__divsf3>
 19e:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
 1a2:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <T_ON+0x1>
 1a6:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <T_ON>
	
	OCR1B = T_ON; //on time constant until setFrequency called
 1aa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <T_ON>
 1ae:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <T_ON+0x1>
 1b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR1A = T_ON + T_OFF1;
 1ba:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <T_ON>
 1be:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <T_ON+0x1>
 1c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <T_OFF1>
 1c6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <T_OFF1+0x1>
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	bf 90       	pop	r11
 1e0:	af 90       	pop	r10
 1e2:	9f 90       	pop	r9
 1e4:	8f 90       	pop	r8
 1e6:	7f 90       	pop	r7
 1e8:	6f 90       	pop	r6
 1ea:	5f 90       	pop	r5
 1ec:	4f 90       	pop	r4
 1ee:	08 95       	ret

000001f0 <driverTimersInterrupts_Init>:

void driverTimersInterrupts_Init(){
	sei();									//Enable global interrupts	
 1f0:	78 94       	sei
	TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);	// Enable on/off time timer compare match interrupts
 1f2:	ef e6       	ldi	r30, 0x6F	; 111
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	86 60       	ori	r24, 0x06	; 6
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <__vector_15>:

}

  ISR(TIMER0_COMPB_vect){
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	TIMSK0 &= ~(1<<OCIE0B);
 210:	ee e6       	ldi	r30, 0x6E	; 110
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	80 83       	st	Z, r24
	TCNT1 = 0; //clear timer 1 count  to start next half cycle
 21a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 21e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 		
		if (isNegativeCycle){		//Set pins for next half cycle
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 226:	88 23       	and	r24, r24
 228:	29 f0       	breq	.+10     	; 0x234 <__vector_15+0x36>
			TOGGLE_SW1; //sets pins for positive cycle
 22a:	95 b1       	in	r25, 0x05	; 5
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	89 27       	eor	r24, r25
 230:	85 b9       	out	0x05, r24	; 5
 232:	04 c0       	rjmp	.+8      	; 0x23c <__vector_15+0x3e>
			} else {
			TOGGLE_SW2;//set pins on for positive cycle
 234:	9b b1       	in	r25, 0x0b	; 11
 236:	80 e2       	ldi	r24, 0x20	; 32
 238:	89 27       	eor	r24, r25
 23a:	8b b9       	out	0x0b, r24	; 11
		}
		isNegativeCycle = !isNegativeCycle; //set flag to indicate next half cycle
 23c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	89 27       	eor	r24, r25
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  }
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_14>:

 																		
ISR(TIMER0_COMPA_vect){
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	TIMSK0 &= ~(1<<OCIE0A);	// Disable high dead time timer interrupts
 26c:	ee e6       	ldi	r30, 0x6E	; 110
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	80 83       	st	Z, r24
	if (isNegativeCycle){
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27a:	88 23       	and	r24, r24
 27c:	29 f0       	breq	.+10     	; 0x288 <__vector_14+0x2e>
		TOGGLE_SW4; //turn on SW4
 27e:	9b b1       	in	r25, 0x0b	; 11
 280:	80 e4       	ldi	r24, 0x40	; 64
 282:	89 27       	eor	r24, r25
 284:	8b b9       	out	0x0b, r24	; 11
 286:	03 c0       	rjmp	.+6      	; 0x28e <__vector_14+0x34>
	} else {
		TOGGLE_SW3; //turn on SW3
 288:	8b b1       	in	r24, 0x0b	; 11
 28a:	80 58       	subi	r24, 0x80	; 128
 28c:	8b b9       	out	0x0b, r24	; 11
	}									

}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
 	if (isNegativeCycle){		//set to correct timer upper value for each half cycle
 2b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ba:	88 23       	and	r24, r24
 2bc:	99 f0       	breq	.+38     	; 0x2e4 <__vector_12+0x44>
 		TOGGLE_SW2; //turn off SW2
 2be:	9b b1       	in	r25, 0x0b	; 11
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	89 27       	eor	r24, r25
 2c4:	8b b9       	out	0x0b, r24	; 11
		 OCR1A = T_ON + T_OFF2; 
 2c6:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <T_ON>
 2ca:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <T_ON+0x1>
 2ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <T_OFF2>
 2d2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <T_OFF2+0x1>
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
 2da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2e2:	12 c0       	rjmp	.+36     	; 0x308 <__vector_12+0x68>
 	} else {
 		TOGGLE_SW1; //TURN OFF SW1
 2e4:	95 b1       	in	r25, 0x05	; 5
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	89 27       	eor	r24, r25
 2ea:	85 b9       	out	0x05, r24	; 5
		 OCR1A = T_ON + T_OFF1;
 2ec:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <T_ON>
 2f0:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <T_ON+0x1>
 2f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <T_OFF1>
 2f8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <T_OFF1+0x1>
 2fc:	82 0f       	add	r24, r18
 2fe:	93 1f       	adc	r25, r19
 300:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 304:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 	}

	TCNT0=0; 													//clear counter to start dead time timer
 308:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A);										// Enable dead time timer compare match A interrupts
 30a:	ee e6       	ldi	r30, 0x6E	; 110
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	82 60       	ori	r24, 0x02	; 2
 312:	80 83       	st	Z, r24
}	
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_11>:

	
ISR(TIMER1_COMPA_vect){
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
	
		if (isNegativeCycle){
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 33c:	88 23       	and	r24, r24
 33e:	21 f0       	breq	.+8      	; 0x348 <__vector_11+0x1e>
 			TOGGLE_SW3; //turns off SW3
 340:	8b b1       	in	r24, 0x0b	; 11
 342:	80 58       	subi	r24, 0x80	; 128
 344:	8b b9       	out	0x0b, r24	; 11
 346:	04 c0       	rjmp	.+8      	; 0x350 <__vector_11+0x26>
 		} else {
 			TOGGLE_SW4; //turns off SW4
 348:	9b b1       	in	r25, 0x0b	; 11
 34a:	80 e4       	ldi	r24, 0x40	; 64
 34c:	89 27       	eor	r24, r25
 34e:	8b b9       	out	0x0b, r24	; 11
 		}
 			TCNT0 = 0 ; //reset timer 0
 350:	16 bc       	out	0x26, r1	; 38
 			TIMSK0 = (1<<OCIE0B); //enable low deadtime timer interrupts		
 352:	84 e0       	ldi	r24, 0x04	; 4
 354:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <main>:
	*/
	
	float frequency = 9;
	float dutyCycle= 0.3; //must be greater than 0, less that 1
	
	setFrequency(frequency, dutyCycle);//acquire on/off times or alternatively could manually set on and off times
 366:	2a e9       	ldi	r18, 0x9A	; 154
 368:	39 e9       	ldi	r19, 0x99	; 153
 36a:	49 e9       	ldi	r20, 0x99	; 153
 36c:	5e e3       	ldi	r21, 0x3E	; 62
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	80 e1       	ldi	r24, 0x10	; 16
 374:	91 e4       	ldi	r25, 0x41	; 65
 376:	0e 94 5f 00 	call	0xbe	; 0xbe <setFrequency>
	driverTimers_Init();
 37a:	0e 94 48 00 	call	0x90	; 0x90 <driverTimers_Init>
	driverTimersInterrupts_Init();
 37e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <driverTimersInterrupts_Init>
 382:	ff cf       	rjmp	.-2      	; 0x382 <main+0x1c>

00000384 <__subsf3>:
 384:	50 58       	subi	r21, 0x80	; 128

00000386 <__addsf3>:
 386:	bb 27       	eor	r27, r27
 388:	aa 27       	eor	r26, r26
 38a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__addsf3x>
 38e:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_round>
 392:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_pscA>
 396:	38 f0       	brcs	.+14     	; 0x3a6 <__addsf3+0x20>
 398:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_pscB>
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__addsf3+0x20>
 39e:	39 f4       	brne	.+14     	; 0x3ae <__addsf3+0x28>
 3a0:	9f 3f       	cpi	r25, 0xFF	; 255
 3a2:	19 f4       	brne	.+6      	; 0x3aa <__addsf3+0x24>
 3a4:	26 f4       	brtc	.+8      	; 0x3ae <__addsf3+0x28>
 3a6:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_nan>
 3aa:	0e f4       	brtc	.+2      	; 0x3ae <__addsf3+0x28>
 3ac:	e0 95       	com	r30
 3ae:	e7 fb       	bst	r30, 7
 3b0:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>

000003b4 <__addsf3x>:
 3b4:	e9 2f       	mov	r30, r25
 3b6:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_split3>
 3ba:	58 f3       	brcs	.-42     	; 0x392 <__addsf3+0xc>
 3bc:	ba 17       	cp	r27, r26
 3be:	62 07       	cpc	r22, r18
 3c0:	73 07       	cpc	r23, r19
 3c2:	84 07       	cpc	r24, r20
 3c4:	95 07       	cpc	r25, r21
 3c6:	20 f0       	brcs	.+8      	; 0x3d0 <__addsf3x+0x1c>
 3c8:	79 f4       	brne	.+30     	; 0x3e8 <__addsf3x+0x34>
 3ca:	a6 f5       	brtc	.+104    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3cc:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_zero>
 3d0:	0e f4       	brtc	.+2      	; 0x3d4 <__addsf3x+0x20>
 3d2:	e0 95       	com	r30
 3d4:	0b 2e       	mov	r0, r27
 3d6:	ba 2f       	mov	r27, r26
 3d8:	a0 2d       	mov	r26, r0
 3da:	0b 01       	movw	r0, r22
 3dc:	b9 01       	movw	r22, r18
 3de:	90 01       	movw	r18, r0
 3e0:	0c 01       	movw	r0, r24
 3e2:	ca 01       	movw	r24, r20
 3e4:	a0 01       	movw	r20, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	ff 27       	eor	r31, r31
 3ea:	59 1b       	sub	r21, r25
 3ec:	99 f0       	breq	.+38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ee:	59 3f       	cpi	r21, 0xF9	; 249
 3f0:	50 f4       	brcc	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f2:	50 3e       	cpi	r21, 0xE0	; 224
 3f4:	68 f1       	brcs	.+90     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3f6:	1a 16       	cp	r1, r26
 3f8:	f0 40       	sbci	r31, 0x00	; 0
 3fa:	a2 2f       	mov	r26, r18
 3fc:	23 2f       	mov	r18, r19
 3fe:	34 2f       	mov	r19, r20
 400:	44 27       	eor	r20, r20
 402:	58 5f       	subi	r21, 0xF8	; 248
 404:	f3 cf       	rjmp	.-26     	; 0x3ec <__addsf3x+0x38>
 406:	46 95       	lsr	r20
 408:	37 95       	ror	r19
 40a:	27 95       	ror	r18
 40c:	a7 95       	ror	r26
 40e:	f0 40       	sbci	r31, 0x00	; 0
 410:	53 95       	inc	r21
 412:	c9 f7       	brne	.-14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 414:	7e f4       	brtc	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 416:	1f 16       	cp	r1, r31
 418:	ba 0b       	sbc	r27, r26
 41a:	62 0b       	sbc	r22, r18
 41c:	73 0b       	sbc	r23, r19
 41e:	84 0b       	sbc	r24, r20
 420:	ba f0       	brmi	.+46     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 422:	91 50       	subi	r25, 0x01	; 1
 424:	a1 f0       	breq	.+40     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 426:	ff 0f       	add	r31, r31
 428:	bb 1f       	adc	r27, r27
 42a:	66 1f       	adc	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	c2 f7       	brpl	.-16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 432:	0e c0       	rjmp	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 434:	ba 0f       	add	r27, r26
 436:	62 1f       	adc	r22, r18
 438:	73 1f       	adc	r23, r19
 43a:	84 1f       	adc	r24, r20
 43c:	48 f4       	brcc	.+18     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 43e:	87 95       	ror	r24
 440:	77 95       	ror	r23
 442:	67 95       	ror	r22
 444:	b7 95       	ror	r27
 446:	f7 95       	ror	r31
 448:	9e 3f       	cpi	r25, 0xFE	; 254
 44a:	08 f0       	brcs	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	b0 cf       	rjmp	.-160    	; 0x3ae <__addsf3+0x28>
 44e:	93 95       	inc	r25
 450:	88 0f       	add	r24, r24
 452:	08 f0       	brcs	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	99 27       	eor	r25, r25
 456:	ee 0f       	add	r30, r30
 458:	97 95       	ror	r25
 45a:	87 95       	ror	r24
 45c:	08 95       	ret

0000045e <__divsf3>:
 45e:	0e 94 43 02 	call	0x486	; 0x486 <__divsf3x>
 462:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_round>
 466:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_pscB>
 46a:	58 f0       	brcs	.+22     	; 0x482 <__divsf3+0x24>
 46c:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_pscA>
 470:	40 f0       	brcs	.+16     	; 0x482 <__divsf3+0x24>
 472:	29 f4       	brne	.+10     	; 0x47e <__divsf3+0x20>
 474:	5f 3f       	cpi	r21, 0xFF	; 255
 476:	29 f0       	breq	.+10     	; 0x482 <__divsf3+0x24>
 478:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
 47c:	51 11       	cpse	r21, r1
 47e:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>
 482:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_nan>

00000486 <__divsf3x>:
 486:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_split3>
 48a:	68 f3       	brcs	.-38     	; 0x466 <__divsf3+0x8>

0000048c <__divsf3_pse>:
 48c:	99 23       	and	r25, r25
 48e:	b1 f3       	breq	.-20     	; 0x47c <__divsf3+0x1e>
 490:	55 23       	and	r21, r21
 492:	91 f3       	breq	.-28     	; 0x478 <__divsf3+0x1a>
 494:	95 1b       	sub	r25, r21
 496:	55 0b       	sbc	r21, r21
 498:	bb 27       	eor	r27, r27
 49a:	aa 27       	eor	r26, r26
 49c:	62 17       	cp	r22, r18
 49e:	73 07       	cpc	r23, r19
 4a0:	84 07       	cpc	r24, r20
 4a2:	38 f0       	brcs	.+14     	; 0x4b2 <__divsf3_pse+0x26>
 4a4:	9f 5f       	subi	r25, 0xFF	; 255
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	44 1f       	adc	r20, r20
 4ae:	aa 1f       	adc	r26, r26
 4b0:	a9 f3       	breq	.-22     	; 0x49c <__divsf3_pse+0x10>
 4b2:	35 d0       	rcall	.+106    	; 0x51e <__divsf3_pse+0x92>
 4b4:	0e 2e       	mov	r0, r30
 4b6:	3a f0       	brmi	.+14     	; 0x4c6 <__divsf3_pse+0x3a>
 4b8:	e0 e8       	ldi	r30, 0x80	; 128
 4ba:	32 d0       	rcall	.+100    	; 0x520 <__divsf3_pse+0x94>
 4bc:	91 50       	subi	r25, 0x01	; 1
 4be:	50 40       	sbci	r21, 0x00	; 0
 4c0:	e6 95       	lsr	r30
 4c2:	00 1c       	adc	r0, r0
 4c4:	ca f7       	brpl	.-14     	; 0x4b8 <__divsf3_pse+0x2c>
 4c6:	2b d0       	rcall	.+86     	; 0x51e <__divsf3_pse+0x92>
 4c8:	fe 2f       	mov	r31, r30
 4ca:	29 d0       	rcall	.+82     	; 0x51e <__divsf3_pse+0x92>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	bb 1f       	adc	r27, r27
 4d4:	26 17       	cp	r18, r22
 4d6:	37 07       	cpc	r19, r23
 4d8:	48 07       	cpc	r20, r24
 4da:	ab 07       	cpc	r26, r27
 4dc:	b0 e8       	ldi	r27, 0x80	; 128
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__divsf3_pse+0x56>
 4e0:	bb 0b       	sbc	r27, r27
 4e2:	80 2d       	mov	r24, r0
 4e4:	bf 01       	movw	r22, r30
 4e6:	ff 27       	eor	r31, r31
 4e8:	93 58       	subi	r25, 0x83	; 131
 4ea:	5f 4f       	sbci	r21, 0xFF	; 255
 4ec:	3a f0       	brmi	.+14     	; 0x4fc <__divsf3_pse+0x70>
 4ee:	9e 3f       	cpi	r25, 0xFE	; 254
 4f0:	51 05       	cpc	r21, r1
 4f2:	78 f0       	brcs	.+30     	; 0x512 <__divsf3_pse+0x86>
 4f4:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
 4f8:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>
 4fc:	5f 3f       	cpi	r21, 0xFF	; 255
 4fe:	e4 f3       	brlt	.-8      	; 0x4f8 <__divsf3_pse+0x6c>
 500:	98 3e       	cpi	r25, 0xE8	; 232
 502:	d4 f3       	brlt	.-12     	; 0x4f8 <__divsf3_pse+0x6c>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f7 95       	ror	r31
 50e:	9f 5f       	subi	r25, 0xFF	; 255
 510:	c9 f7       	brne	.-14     	; 0x504 <__divsf3_pse+0x78>
 512:	88 0f       	add	r24, r24
 514:	91 1d       	adc	r25, r1
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret
 51e:	e1 e0       	ldi	r30, 0x01	; 1
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	bb 1f       	adc	r27, r27
 528:	62 17       	cp	r22, r18
 52a:	73 07       	cpc	r23, r19
 52c:	84 07       	cpc	r24, r20
 52e:	ba 07       	cpc	r27, r26
 530:	20 f0       	brcs	.+8      	; 0x53a <__divsf3_pse+0xae>
 532:	62 1b       	sub	r22, r18
 534:	73 0b       	sbc	r23, r19
 536:	84 0b       	sbc	r24, r20
 538:	ba 0b       	sbc	r27, r26
 53a:	ee 1f       	adc	r30, r30
 53c:	88 f7       	brcc	.-30     	; 0x520 <__divsf3_pse+0x94>
 53e:	e0 95       	com	r30
 540:	08 95       	ret

00000542 <__fixunssfsi>:
 542:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_splitA>
 546:	88 f0       	brcs	.+34     	; 0x56a <__fixunssfsi+0x28>
 548:	9f 57       	subi	r25, 0x7F	; 127
 54a:	98 f0       	brcs	.+38     	; 0x572 <__fixunssfsi+0x30>
 54c:	b9 2f       	mov	r27, r25
 54e:	99 27       	eor	r25, r25
 550:	b7 51       	subi	r27, 0x17	; 23
 552:	b0 f0       	brcs	.+44     	; 0x580 <__fixunssfsi+0x3e>
 554:	e1 f0       	breq	.+56     	; 0x58e <__fixunssfsi+0x4c>
 556:	66 0f       	add	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	88 1f       	adc	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	1a f0       	brmi	.+6      	; 0x566 <__fixunssfsi+0x24>
 560:	ba 95       	dec	r27
 562:	c9 f7       	brne	.-14     	; 0x556 <__fixunssfsi+0x14>
 564:	14 c0       	rjmp	.+40     	; 0x58e <__fixunssfsi+0x4c>
 566:	b1 30       	cpi	r27, 0x01	; 1
 568:	91 f0       	breq	.+36     	; 0x58e <__fixunssfsi+0x4c>
 56a:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fp_zero>
 56e:	b1 e0       	ldi	r27, 0x01	; 1
 570:	08 95       	ret
 572:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_zero>
 576:	67 2f       	mov	r22, r23
 578:	78 2f       	mov	r23, r24
 57a:	88 27       	eor	r24, r24
 57c:	b8 5f       	subi	r27, 0xF8	; 248
 57e:	39 f0       	breq	.+14     	; 0x58e <__fixunssfsi+0x4c>
 580:	b9 3f       	cpi	r27, 0xF9	; 249
 582:	cc f3       	brlt	.-14     	; 0x576 <__fixunssfsi+0x34>
 584:	86 95       	lsr	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b3 95       	inc	r27
 58c:	d9 f7       	brne	.-10     	; 0x584 <__fixunssfsi+0x42>
 58e:	3e f4       	brtc	.+14     	; 0x59e <__fixunssfsi+0x5c>
 590:	90 95       	com	r25
 592:	80 95       	com	r24
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	08 95       	ret

000005a0 <__floatunsisf>:
 5a0:	e8 94       	clt
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <__floatsisf+0x12>

000005a4 <__floatsisf>:
 5a4:	97 fb       	bst	r25, 7
 5a6:	3e f4       	brtc	.+14     	; 0x5b6 <__floatsisf+0x12>
 5a8:	90 95       	com	r25
 5aa:	80 95       	com	r24
 5ac:	70 95       	com	r23
 5ae:	61 95       	neg	r22
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	8f 4f       	sbci	r24, 0xFF	; 255
 5b4:	9f 4f       	sbci	r25, 0xFF	; 255
 5b6:	99 23       	and	r25, r25
 5b8:	a9 f0       	breq	.+42     	; 0x5e4 <__floatsisf+0x40>
 5ba:	f9 2f       	mov	r31, r25
 5bc:	96 e9       	ldi	r25, 0x96	; 150
 5be:	bb 27       	eor	r27, r27
 5c0:	93 95       	inc	r25
 5c2:	f6 95       	lsr	r31
 5c4:	87 95       	ror	r24
 5c6:	77 95       	ror	r23
 5c8:	67 95       	ror	r22
 5ca:	b7 95       	ror	r27
 5cc:	f1 11       	cpse	r31, r1
 5ce:	f8 cf       	rjmp	.-16     	; 0x5c0 <__floatsisf+0x1c>
 5d0:	fa f4       	brpl	.+62     	; 0x610 <__floatsisf+0x6c>
 5d2:	bb 0f       	add	r27, r27
 5d4:	11 f4       	brne	.+4      	; 0x5da <__floatsisf+0x36>
 5d6:	60 ff       	sbrs	r22, 0
 5d8:	1b c0       	rjmp	.+54     	; 0x610 <__floatsisf+0x6c>
 5da:	6f 5f       	subi	r22, 0xFF	; 255
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	16 c0       	rjmp	.+44     	; 0x610 <__floatsisf+0x6c>
 5e4:	88 23       	and	r24, r24
 5e6:	11 f0       	breq	.+4      	; 0x5ec <__floatsisf+0x48>
 5e8:	96 e9       	ldi	r25, 0x96	; 150
 5ea:	11 c0       	rjmp	.+34     	; 0x60e <__floatsisf+0x6a>
 5ec:	77 23       	and	r23, r23
 5ee:	21 f0       	breq	.+8      	; 0x5f8 <__floatsisf+0x54>
 5f0:	9e e8       	ldi	r25, 0x8E	; 142
 5f2:	87 2f       	mov	r24, r23
 5f4:	76 2f       	mov	r23, r22
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <__floatsisf+0x5e>
 5f8:	66 23       	and	r22, r22
 5fa:	71 f0       	breq	.+28     	; 0x618 <__floatsisf+0x74>
 5fc:	96 e8       	ldi	r25, 0x86	; 134
 5fe:	86 2f       	mov	r24, r22
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	2a f0       	brmi	.+10     	; 0x610 <__floatsisf+0x6c>
 606:	9a 95       	dec	r25
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	da f7       	brpl	.-10     	; 0x606 <__floatsisf+0x62>
 610:	88 0f       	add	r24, r24
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret

0000061a <__fp_inf>:
 61a:	97 f9       	bld	r25, 7
 61c:	9f 67       	ori	r25, 0x7F	; 127
 61e:	80 e8       	ldi	r24, 0x80	; 128
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	08 95       	ret

00000626 <__fp_nan>:
 626:	9f ef       	ldi	r25, 0xFF	; 255
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	08 95       	ret

0000062c <__fp_pscA>:
 62c:	00 24       	eor	r0, r0
 62e:	0a 94       	dec	r0
 630:	16 16       	cp	r1, r22
 632:	17 06       	cpc	r1, r23
 634:	18 06       	cpc	r1, r24
 636:	09 06       	cpc	r0, r25
 638:	08 95       	ret

0000063a <__fp_pscB>:
 63a:	00 24       	eor	r0, r0
 63c:	0a 94       	dec	r0
 63e:	12 16       	cp	r1, r18
 640:	13 06       	cpc	r1, r19
 642:	14 06       	cpc	r1, r20
 644:	05 06       	cpc	r0, r21
 646:	08 95       	ret

00000648 <__fp_round>:
 648:	09 2e       	mov	r0, r25
 64a:	03 94       	inc	r0
 64c:	00 0c       	add	r0, r0
 64e:	11 f4       	brne	.+4      	; 0x654 <__fp_round+0xc>
 650:	88 23       	and	r24, r24
 652:	52 f0       	brmi	.+20     	; 0x668 <__fp_round+0x20>
 654:	bb 0f       	add	r27, r27
 656:	40 f4       	brcc	.+16     	; 0x668 <__fp_round+0x20>
 658:	bf 2b       	or	r27, r31
 65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0x18>
 65c:	60 ff       	sbrs	r22, 0
 65e:	04 c0       	rjmp	.+8      	; 0x668 <__fp_round+0x20>
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	08 95       	ret

0000066a <__fp_split3>:
 66a:	57 fd       	sbrc	r21, 7
 66c:	90 58       	subi	r25, 0x80	; 128
 66e:	44 0f       	add	r20, r20
 670:	55 1f       	adc	r21, r21
 672:	59 f0       	breq	.+22     	; 0x68a <__fp_splitA+0x10>
 674:	5f 3f       	cpi	r21, 0xFF	; 255
 676:	71 f0       	breq	.+28     	; 0x694 <__fp_splitA+0x1a>
 678:	47 95       	ror	r20

0000067a <__fp_splitA>:
 67a:	88 0f       	add	r24, r24
 67c:	97 fb       	bst	r25, 7
 67e:	99 1f       	adc	r25, r25
 680:	61 f0       	breq	.+24     	; 0x69a <__fp_splitA+0x20>
 682:	9f 3f       	cpi	r25, 0xFF	; 255
 684:	79 f0       	breq	.+30     	; 0x6a4 <__fp_splitA+0x2a>
 686:	87 95       	ror	r24
 688:	08 95       	ret
 68a:	12 16       	cp	r1, r18
 68c:	13 06       	cpc	r1, r19
 68e:	14 06       	cpc	r1, r20
 690:	55 1f       	adc	r21, r21
 692:	f2 cf       	rjmp	.-28     	; 0x678 <__fp_split3+0xe>
 694:	46 95       	lsr	r20
 696:	f1 df       	rcall	.-30     	; 0x67a <__fp_splitA>
 698:	08 c0       	rjmp	.+16     	; 0x6aa <__fp_splitA+0x30>
 69a:	16 16       	cp	r1, r22
 69c:	17 06       	cpc	r1, r23
 69e:	18 06       	cpc	r1, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	f1 cf       	rjmp	.-30     	; 0x686 <__fp_splitA+0xc>
 6a4:	86 95       	lsr	r24
 6a6:	71 05       	cpc	r23, r1
 6a8:	61 05       	cpc	r22, r1
 6aa:	08 94       	sec
 6ac:	08 95       	ret

000006ae <__fp_zero>:
 6ae:	e8 94       	clt

000006b0 <__fp_szero>:
 6b0:	bb 27       	eor	r27, r27
 6b2:	66 27       	eor	r22, r22
 6b4:	77 27       	eor	r23, r23
 6b6:	cb 01       	movw	r24, r22
 6b8:	97 f9       	bld	r25, 7
 6ba:	08 95       	ret

000006bc <__mulsf3>:
 6bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__mulsf3x>
 6c0:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_round>
 6c4:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_pscA>
 6c8:	38 f0       	brcs	.+14     	; 0x6d8 <__mulsf3+0x1c>
 6ca:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_pscB>
 6ce:	20 f0       	brcs	.+8      	; 0x6d8 <__mulsf3+0x1c>
 6d0:	95 23       	and	r25, r21
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <__mulsf3+0x1c>
 6d4:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
 6d8:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_nan>
 6dc:	11 24       	eor	r1, r1
 6de:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>

000006e2 <__mulsf3x>:
 6e2:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_split3>
 6e6:	70 f3       	brcs	.-36     	; 0x6c4 <__mulsf3+0x8>

000006e8 <__mulsf3_pse>:
 6e8:	95 9f       	mul	r25, r21
 6ea:	c1 f3       	breq	.-16     	; 0x6dc <__mulsf3+0x20>
 6ec:	95 0f       	add	r25, r21
 6ee:	50 e0       	ldi	r21, 0x00	; 0
 6f0:	55 1f       	adc	r21, r21
 6f2:	62 9f       	mul	r22, r18
 6f4:	f0 01       	movw	r30, r0
 6f6:	72 9f       	mul	r23, r18
 6f8:	bb 27       	eor	r27, r27
 6fa:	f0 0d       	add	r31, r0
 6fc:	b1 1d       	adc	r27, r1
 6fe:	63 9f       	mul	r22, r19
 700:	aa 27       	eor	r26, r26
 702:	f0 0d       	add	r31, r0
 704:	b1 1d       	adc	r27, r1
 706:	aa 1f       	adc	r26, r26
 708:	64 9f       	mul	r22, r20
 70a:	66 27       	eor	r22, r22
 70c:	b0 0d       	add	r27, r0
 70e:	a1 1d       	adc	r26, r1
 710:	66 1f       	adc	r22, r22
 712:	82 9f       	mul	r24, r18
 714:	22 27       	eor	r18, r18
 716:	b0 0d       	add	r27, r0
 718:	a1 1d       	adc	r26, r1
 71a:	62 1f       	adc	r22, r18
 71c:	73 9f       	mul	r23, r19
 71e:	b0 0d       	add	r27, r0
 720:	a1 1d       	adc	r26, r1
 722:	62 1f       	adc	r22, r18
 724:	83 9f       	mul	r24, r19
 726:	a0 0d       	add	r26, r0
 728:	61 1d       	adc	r22, r1
 72a:	22 1f       	adc	r18, r18
 72c:	74 9f       	mul	r23, r20
 72e:	33 27       	eor	r19, r19
 730:	a0 0d       	add	r26, r0
 732:	61 1d       	adc	r22, r1
 734:	23 1f       	adc	r18, r19
 736:	84 9f       	mul	r24, r20
 738:	60 0d       	add	r22, r0
 73a:	21 1d       	adc	r18, r1
 73c:	82 2f       	mov	r24, r18
 73e:	76 2f       	mov	r23, r22
 740:	6a 2f       	mov	r22, r26
 742:	11 24       	eor	r1, r1
 744:	9f 57       	subi	r25, 0x7F	; 127
 746:	50 40       	sbci	r21, 0x00	; 0
 748:	9a f0       	brmi	.+38     	; 0x770 <__mulsf3_pse+0x88>
 74a:	f1 f0       	breq	.+60     	; 0x788 <__mulsf3_pse+0xa0>
 74c:	88 23       	and	r24, r24
 74e:	4a f0       	brmi	.+18     	; 0x762 <__mulsf3_pse+0x7a>
 750:	ee 0f       	add	r30, r30
 752:	ff 1f       	adc	r31, r31
 754:	bb 1f       	adc	r27, r27
 756:	66 1f       	adc	r22, r22
 758:	77 1f       	adc	r23, r23
 75a:	88 1f       	adc	r24, r24
 75c:	91 50       	subi	r25, 0x01	; 1
 75e:	50 40       	sbci	r21, 0x00	; 0
 760:	a9 f7       	brne	.-22     	; 0x74c <__mulsf3_pse+0x64>
 762:	9e 3f       	cpi	r25, 0xFE	; 254
 764:	51 05       	cpc	r21, r1
 766:	80 f0       	brcs	.+32     	; 0x788 <__mulsf3_pse+0xa0>
 768:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
 76c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>
 770:	5f 3f       	cpi	r21, 0xFF	; 255
 772:	e4 f3       	brlt	.-8      	; 0x76c <__mulsf3_pse+0x84>
 774:	98 3e       	cpi	r25, 0xE8	; 232
 776:	d4 f3       	brlt	.-12     	; 0x76c <__mulsf3_pse+0x84>
 778:	86 95       	lsr	r24
 77a:	77 95       	ror	r23
 77c:	67 95       	ror	r22
 77e:	b7 95       	ror	r27
 780:	f7 95       	ror	r31
 782:	e7 95       	ror	r30
 784:	9f 5f       	subi	r25, 0xFF	; 255
 786:	c1 f7       	brne	.-16     	; 0x778 <__mulsf3_pse+0x90>
 788:	fe 2b       	or	r31, r30
 78a:	88 0f       	add	r24, r24
 78c:	91 1d       	adc	r25, r1
 78e:	96 95       	lsr	r25
 790:	87 95       	ror	r24
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <round>:
 796:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_splitA>
 79a:	e8 f0       	brcs	.+58     	; 0x7d6 <round+0x40>
 79c:	9e 37       	cpi	r25, 0x7E	; 126
 79e:	e8 f0       	brcs	.+58     	; 0x7da <round+0x44>
 7a0:	96 39       	cpi	r25, 0x96	; 150
 7a2:	b8 f4       	brcc	.+46     	; 0x7d2 <round+0x3c>
 7a4:	9e 38       	cpi	r25, 0x8E	; 142
 7a6:	48 f4       	brcc	.+18     	; 0x7ba <round+0x24>
 7a8:	67 2f       	mov	r22, r23
 7aa:	78 2f       	mov	r23, r24
 7ac:	88 27       	eor	r24, r24
 7ae:	98 5f       	subi	r25, 0xF8	; 248
 7b0:	f9 cf       	rjmp	.-14     	; 0x7a4 <round+0xe>
 7b2:	86 95       	lsr	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	93 95       	inc	r25
 7ba:	95 39       	cpi	r25, 0x95	; 149
 7bc:	d0 f3       	brcs	.-12     	; 0x7b2 <round+0x1c>
 7be:	b6 2f       	mov	r27, r22
 7c0:	b1 70       	andi	r27, 0x01	; 1
 7c2:	6b 0f       	add	r22, r27
 7c4:	71 1d       	adc	r23, r1
 7c6:	81 1d       	adc	r24, r1
 7c8:	20 f4       	brcc	.+8      	; 0x7d2 <round+0x3c>
 7ca:	87 95       	ror	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	93 95       	inc	r25
 7d2:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_mintl>
 7d6:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_mpack>
 7da:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>

000007de <__fp_mintl>:
 7de:	88 23       	and	r24, r24
 7e0:	71 f4       	brne	.+28     	; 0x7fe <__fp_mintl+0x20>
 7e2:	77 23       	and	r23, r23
 7e4:	21 f0       	breq	.+8      	; 0x7ee <__fp_mintl+0x10>
 7e6:	98 50       	subi	r25, 0x08	; 8
 7e8:	87 2b       	or	r24, r23
 7ea:	76 2f       	mov	r23, r22
 7ec:	07 c0       	rjmp	.+14     	; 0x7fc <__fp_mintl+0x1e>
 7ee:	66 23       	and	r22, r22
 7f0:	11 f4       	brne	.+4      	; 0x7f6 <__fp_mintl+0x18>
 7f2:	99 27       	eor	r25, r25
 7f4:	0d c0       	rjmp	.+26     	; 0x810 <__fp_mintl+0x32>
 7f6:	90 51       	subi	r25, 0x10	; 16
 7f8:	86 2b       	or	r24, r22
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	2a f0       	brmi	.+10     	; 0x80a <__fp_mintl+0x2c>
 800:	9a 95       	dec	r25
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	da f7       	brpl	.-10     	; 0x800 <__fp_mintl+0x22>
 80a:	88 0f       	add	r24, r24
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__fp_mpack>:
 814:	9f 3f       	cpi	r25, 0xFF	; 255
 816:	31 f0       	breq	.+12     	; 0x824 <__fp_mpack_finite+0xc>

00000818 <__fp_mpack_finite>:
 818:	91 50       	subi	r25, 0x01	; 1
 81a:	20 f4       	brcc	.+8      	; 0x824 <__fp_mpack_finite+0xc>
 81c:	87 95       	ror	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b7 95       	ror	r27
 824:	88 0f       	add	r24, r24
 826:	91 1d       	adc	r25, r1
 828:	96 95       	lsr	r25
 82a:	87 95       	ror	r24
 82c:	97 f9       	bld	r25, 7
 82e:	08 95       	ret

00000830 <_exit>:
 830:	f8 94       	cli

00000832 <__stop_program>:
 832:	ff cf       	rjmp	.-2      	; 0x832 <__stop_program>
