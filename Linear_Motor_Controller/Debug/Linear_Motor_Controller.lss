
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000093c  000009d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000093c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000109  0080013a  0080013a  00000a0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a60  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000949  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000961  00000000  00000000  00002ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00003838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  00003a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9b  00000000  00000000  00003f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_11>
  30:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_14>
  3c:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 9c 04 	jmp	0x938	; 0x938 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

volatile float* frequency;
volatile uint8_t* mfc;

//ISR for UART receive
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	char tmp = UDR0; 
  b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(message_complete == false){
  bc:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <message_complete>
  c0:	91 11       	cpse	r25, r1
  c2:	47 c0       	rjmp	.+142    	; 0x152 <__vector_18+0xac>
		if(tmp == '{'){
  c4:	8b 37       	cpi	r24, 0x7B	; 123
  c6:	49 f4       	brne	.+18     	; 0xda <__vector_18+0x34>
			net_brackets++;
  c8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <net_brackets>
			message_start = true;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <__data_end>
  d8:	12 c0       	rjmp	.+36     	; 0xfe <__vector_18+0x58>
		}
		else if((tmp == '}') && (message_start == true)){
  da:	8d 37       	cpi	r24, 0x7D	; 125
  dc:	81 f4       	brne	.+32     	; 0xfe <__vector_18+0x58>
  de:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	61 f4       	brne	.+24     	; 0xfe <__vector_18+0x58>
			net_brackets--;
  e6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <net_brackets>
			if(net_brackets == 0){
  f0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <net_brackets>
  f4:	91 11       	cpse	r25, r1
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_18+0x58>
				message_complete = true;
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <message_complete>
			}
		}

		if(message_start == true){
  fe:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
 102:	91 30       	cpi	r25, 0x01	; 1
 104:	a9 f4       	brne	.+42     	; 0x130 <__vector_18+0x8a>
			received_message[message_index] = tmp;
 106:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <message_index>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 5b       	subi	r30, 0xBC	; 188
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 83       	st	Z, r24
			message_index++;
 112:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <message_index>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <message_index>
			if(message_complete == true){
 11c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <message_complete>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <__vector_18+0x8a>
				received_message[message_index] = '\0';
 124:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <message_index>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ec 5b       	subi	r30, 0xBC	; 188
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
			}
		}

		if((message_index == (MAX_SIZE-1)) || (net_brackets > 3)){
 130:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <message_index>
 134:	8e 3f       	cpi	r24, 0xFE	; 254
 136:	21 f0       	breq	.+8      	; 0x140 <__vector_18+0x9a>
 138:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <net_brackets>
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	48 f0       	brcs	.+18     	; 0x152 <__vector_18+0xac>
			receive_error = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <receive_error>
			message_start = false;
 146:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			message_complete = false;
 14a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <message_complete>
			message_index = 0;
 14e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <message_index>
		}
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
	//UART functionalities 
	uart_initiate(UBRR_VALUE);
 164:	83 e3       	ldi	r24, 0x33	; 51
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 4b 02 	call	0x496	; 0x496 <uart_initiate>

	//Enable Global interrupts
	sei();
 16c:	78 94       	sei

	*frequency = 12.5;
 16e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 172:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a8 e4       	ldi	r26, 0x48	; 72
 17c:	b1 e4       	ldi	r27, 0x41	; 65
 17e:	80 83       	st	Z, r24
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	a2 83       	std	Z+2, r26	; 0x02
 184:	b3 83       	std	Z+3, r27	; 0x03
	*mfc = 150;
 186:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 18a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 18e:	86 e9       	ldi	r24, 0x96	; 150
 190:	80 83       	st	Z, r24

	//enable timers
	driver_timer_initiate();
 192:	0e 94 29 01 	call	0x252	; 0x252 <driver_timer_initiate>
	set_parameters(*frequency, *mfc);
 196:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 19a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 19e:	40 81       	ld	r20, Z
 1a0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 1a4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 1a8:	60 81       	ld	r22, Z
 1aa:	71 81       	ldd	r23, Z+1	; 0x01
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	93 81       	ldd	r25, Z+3	; 0x03
 1b0:	0e 94 40 01 	call	0x280	; 0x280 <set_parameters>
			message_start = false;
			message_index = 0;
			UCSR0B |= (1 << RXEN0);
		}
		else if(receive_error == true){
			UCSR0B &= ~(1 << RXEN0);
 1b4:	c1 ec       	ldi	r28, 0xC1	; 193
 1b6:	d0 e0       	ldi	r29, 0x00	; 0

		#ifdef SITH
			project_skywalker();
		#endif

		if(message_complete == true){
 1b8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <message_complete>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	81 f5       	brne	.+96     	; 0x220 <main+0xbc>
			UCSR0B &= ~(1 << RXEN0);
 1c0:	88 81       	ld	r24, Y
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uart_transmit>
			uart_transmit((char*)received_message);
 1ce:	84 e4       	ldi	r24, 0x44	; 68
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uart_transmit>
			process_message((char*)received_message, (int*)mfc);
 1d6:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <mfc>
 1da:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <mfc+0x1>
 1de:	84 e4       	ldi	r24, 0x44	; 68
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 76 02 	call	0x4ec	; 0x4ec <process_message>
			set_parameters(*frequency, *mfc);
 1e6:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <mfc>
 1ea:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <mfc+0x1>
 1ee:	40 81       	ld	r20, Z
 1f0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <frequency>
 1f4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <frequency+0x1>
 1f8:	60 81       	ld	r22, Z
 1fa:	71 81       	ldd	r23, Z+1	; 0x01
 1fc:	82 81       	ldd	r24, Z+2	; 0x02
 1fe:	93 81       	ldd	r25, Z+3	; 0x03
 200:	0e 94 40 01 	call	0x280	; 0x280 <set_parameters>
			uart_transmit("\n\r");
 204:	86 e3       	ldi	r24, 0x36	; 54
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uart_transmit>
			message_complete = false;
 20c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <message_complete>
			message_start = false;
 210:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			message_index = 0;
 214:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <message_index>
			UCSR0B |= (1 << RXEN0);
 218:	88 81       	ld	r24, Y
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	88 83       	st	Y, r24
 21e:	cc cf       	rjmp	.-104    	; 0x1b8 <main+0x54>
		}
		else if(receive_error == true){
 220:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <receive_error>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	41 f6       	brne	.-112    	; 0x1b8 <main+0x54>
			UCSR0B &= ~(1 << RXEN0);
 228:	88 81       	ld	r24, Y
 22a:	8f 7e       	andi	r24, 0xEF	; 239
 22c:	88 83       	st	Y, r24
			uart_transmit("\n\rFrom Microcontroller: ");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uart_transmit>
			uart_transmit("Error! The command is invalid\n\r");
 236:	89 e1       	ldi	r24, 0x19	; 25
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uart_transmit>
			receive_error = false;
 23e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <receive_error>
			message_start = false;
 242:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			net_brackets = 0;
 246:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <net_brackets>
			UCSR0B |= (1 << RXEN0);
 24a:	88 81       	ld	r24, Y
 24c:	80 61       	ori	r24, 0x10	; 16
 24e:	88 83       	st	Y, r24
 250:	b3 cf       	rjmp	.-154    	; 0x1b8 <main+0x54>

00000252 <driver_timer_initiate>:
		//Initialise timer interrupt
		TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
	}
}

void soft_start(float* req_freq, int* req_mfc){
 252:	85 b5       	in	r24, 0x25	; 37
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 bd       	out	0x25, r24	; 37
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	87 bd       	out	0x27, r24	; 39
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	88 bd       	out	0x28, r24	; 40
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
 26a:	20 9a       	sbi	0x04, 0	; 4
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 6e       	ori	r24, 0xE0	; 224
 270:	8a b9       	out	0x0a, r24	; 10
 272:	28 98       	cbi	0x05, 0	; 5
 274:	5e 98       	cbi	0x0b, 6	; 11
 276:	5d 98       	cbi	0x0b, 5	; 11
 278:	5f 98       	cbi	0x0b, 7	; 11
 27a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <isNegative>
 27e:	08 95       	ret

00000280 <set_parameters>:
 280:	4f 92       	push	r4
 282:	5f 92       	push	r5
 284:	6f 92       	push	r6
 286:	7f 92       	push	r7
 288:	8f 92       	push	r8
 28a:	9f 92       	push	r9
 28c:	af 92       	push	r10
 28e:	bf 92       	push	r11
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	41 11       	cpse	r20, r1
 29a:	19 c0       	rjmp	.+50     	; 0x2ce <set_parameters+0x4e>
 29c:	5f 9a       	sbi	0x0b, 7	; 11
 29e:	5e 9a       	sbi	0x0b, 6	; 11
 2a0:	28 98       	cbi	0x05, 0	; 5
 2a2:	5d 98       	cbi	0x0b, 5	; 11
 2a4:	ef e6       	ldi	r30, 0x6F	; 111
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	8d 7f       	andi	r24, 0xFD	; 253
 2ac:	80 83       	st	Z, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	8b 7f       	andi	r24, 0xFB	; 251
 2b2:	80 83       	st	Z, r24
 2b4:	ee e6       	ldi	r30, 0x6E	; 110
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	8d 7f       	andi	r24, 0xFD	; 253
 2bc:	80 83       	st	Z, r24
 2be:	80 81       	ld	r24, Z
 2c0:	8b 7f       	andi	r24, 0xFB	; 251
 2c2:	80 83       	st	Z, r24
 2c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2cc:	5c c0       	rjmp	.+184    	; 0x386 <set_parameters+0x106>
 2ce:	6b 01       	movw	r12, r22
 2d0:	7c 01       	movw	r14, r24
 2d2:	64 2f       	mov	r22, r20
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 a1 03 	call	0x742	; 0x742 <__floatunsisf>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	4f e7       	ldi	r20, 0x7F	; 127
 2e4:	53 e4       	ldi	r21, 0x43	; 67
 2e6:	0e 94 00 03 	call	0x600	; 0x600 <__divsf3>
 2ea:	4b 01       	movw	r8, r22
 2ec:	5c 01       	movw	r10, r24
 2ee:	a7 01       	movw	r20, r14
 2f0:	96 01       	movw	r18, r12
 2f2:	c7 01       	movw	r24, r14
 2f4:	b6 01       	movw	r22, r12
 2f6:	0e 94 94 02 	call	0x528	; 0x528 <__addsf3>
 2fa:	9b 01       	movw	r18, r22
 2fc:	ac 01       	movw	r20, r24
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	8a e7       	ldi	r24, 0x7A	; 122
 304:	94 e4       	ldi	r25, 0x44	; 68
 306:	0e 94 00 03 	call	0x600	; 0x600 <__divsf3>
 30a:	2b 01       	movw	r4, r22
 30c:	3c 01       	movw	r6, r24
 30e:	9b 01       	movw	r18, r22
 310:	ac 01       	movw	r20, r24
 312:	c5 01       	movw	r24, r10
 314:	b4 01       	movw	r22, r8
 316:	0e 94 2f 04 	call	0x85e	; 0x85e <__mulsf3>
 31a:	6b 01       	movw	r12, r22
 31c:	7c 01       	movw	r14, r24
 31e:	a5 01       	movw	r20, r10
 320:	94 01       	movw	r18, r8
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	9f e3       	ldi	r25, 0x3F	; 63
 32a:	0e 94 93 02 	call	0x526	; 0x526 <__subsf3>
 32e:	a3 01       	movw	r20, r6
 330:	92 01       	movw	r18, r4
 332:	0e 94 2f 04 	call	0x85e	; 0x85e <__mulsf3>
 336:	a7 01       	movw	r20, r14
 338:	96 01       	movw	r18, r12
 33a:	0e 94 94 02 	call	0x528	; 0x528 <__addsf3>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	a9 01       	movw	r20, r18
 344:	0e 94 94 02 	call	0x528	; 0x528 <__addsf3>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	4a e7       	ldi	r20, 0x7A	; 122
 34e:	54 e4       	ldi	r21, 0x44	; 68
 350:	0e 94 2f 04 	call	0x85e	; 0x85e <__mulsf3>
 354:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__fixunssfsi>
 358:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 35c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	4a e7       	ldi	r20, 0x7A	; 122
 366:	54 e4       	ldi	r21, 0x44	; 68
 368:	c7 01       	movw	r24, r14
 36a:	b6 01       	movw	r22, r12
 36c:	0e 94 2f 04 	call	0x85e	; 0x85e <__mulsf3>
 370:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__fixunssfsi>
 374:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 378:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 37c:	ef e6       	ldi	r30, 0x6F	; 111
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	86 60       	ori	r24, 0x06	; 6
 384:	80 83       	st	Z, r24
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	cf 90       	pop	r12
 38e:	bf 90       	pop	r11
 390:	af 90       	pop	r10
 392:	9f 90       	pop	r9
 394:	8f 90       	pop	r8
 396:	7f 90       	pop	r7
 398:	6f 90       	pop	r6
 39a:	5f 90       	pop	r5
 39c:	4f 90       	pop	r4
 39e:	08 95       	ret

000003a0 <__vector_14>:

}

ISR(TIMER0_COMPA_vect){	
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8f 93       	push	r24
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0A);
 3b0:	ee e6       	ldi	r30, 0x6E	; 110
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	8d 7f       	andi	r24, 0xFD	; 253
 3b8:	80 83       	st	Z, r24
	if(isNegative == false){
 3ba:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <isNegative>
 3be:	81 11       	cpse	r24, r1
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <__vector_14+0x26>
		SET_SW3;
 3c2:	5f 9a       	sbi	0x0b, 7	; 11
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <__vector_14+0x28>
	}
	else{
		SET_SW4;
 3c6:	5e 9a       	sbi	0x0b, 6	; 11
	}

}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	8f 91       	pop	r24
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8f 93       	push	r24
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
	if(isNegative == false){
 3e8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <isNegative>
 3ec:	81 11       	cpse	r24, r1
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <__vector_11+0x1c>
		CLR_SW4;
 3f0:	5e 98       	cbi	0x0b, 6	; 11
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <__vector_11+0x1e>
	}
	else{
		CLR_SW3;
 3f4:	5f 98       	cbi	0x0b, 7	; 11
	}
	TCNT0 = 0;
 3f6:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE1B);
 3f8:	ee e6       	ldi	r30, 0x6E	; 110
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	84 60       	ori	r24, 0x04	; 4
 400:	80 83       	st	Z, r24
}
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	8f 91       	pop	r24
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__vector_15>:

ISR(TIMER0_COMPB_vect){
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	8f 93       	push	r24
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	TIMSK0 &= ~(1 << OCIE0B);
 422:	ee e6       	ldi	r30, 0x6E	; 110
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	8b 7f       	andi	r24, 0xFB	; 251
 42a:	80 83       	st	Z, r24
	if(isNegative == false){
 42c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <isNegative>
 430:	81 11       	cpse	r24, r1
 432:	05 c0       	rjmp	.+10     	; 0x43e <__vector_15+0x2c>
		SET_SW2;
 434:	5d 9a       	sbi	0x0b, 5	; 11
		isNegative = true;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <isNegative>
 43c:	03 c0       	rjmp	.+6      	; 0x444 <__vector_15+0x32>
	}
	else{
		SET_SW1;
 43e:	28 9a       	sbi	0x05, 0	; 5
		isNegative = false;
 440:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <isNegative>
	}
	TCNT1 = 0;
 444:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 448:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	8f 91       	pop	r24
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_12>:

ISR(TIMER1_COMPB_vect){
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	8f 93       	push	r24
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
	if(isNegative == false){
 46c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <isNegative>
 470:	81 11       	cpse	r24, r1
 472:	02 c0       	rjmp	.+4      	; 0x478 <__vector_12+0x1c>
		CLR_SW1;
 474:	28 98       	cbi	0x05, 0	; 5
 476:	01 c0       	rjmp	.+2      	; 0x47a <__vector_12+0x1e>
	}
	else{
		CLR_SW2;
 478:	5d 98       	cbi	0x0b, 5	; 11
	}
	TCNT0 = 0;
 47a:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);
 47c:	ee e6       	ldi	r30, 0x6E	; 110
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
}
 486:	ff 91       	pop	r31
 488:	ef 91       	pop	r30
 48a:	8f 91       	pop	r24
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <uart_initiate>:

volatile static char comparison_command[MAX_SIZE] = "{\"x\":{\"mfc\":{\"req\":\"xxx\"},\"clr\":\"xx\"}}"; 

//This function initializes UART receive and transmit 
void uart_initiate(uint16_t UBRR_VALUE){
	UCSR0A = 0x00;
 496:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Setting up UBRR value
	UBRR0L = UBRR_VALUE;
 49a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable transmitter
	UCSR0B |= (1 << TXEN0);
 49e:	e1 ec       	ldi	r30, 0xC1	; 193
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	88 60       	ori	r24, 0x08	; 8
 4a6:	80 83       	st	Z, r24

	//Enable receiver
	UCSR0B |= (1 << RXEN0);
 4a8:	80 81       	ld	r24, Z
 4aa:	80 61       	ori	r24, 0x10	; 16
 4ac:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
 4ae:	80 81       	ld	r24, Z
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	80 83       	st	Z, r24

	//Setting the character size to 8 bits
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 4b4:	e2 ec       	ldi	r30, 0xC2	; 194
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	86 60       	ori	r24, 0x06	; 6
 4bc:	80 83       	st	Z, r24
 4be:	08 95       	ret

000004c0 <uart_transmit>:
}

//This function transmit a message via UART
void uart_transmit(char* message){
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
	unsigned int i = 0;
	while(message[i] != '\0'){
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 81       	ld	r18, Z
 4c8:	22 23       	and	r18, r18
 4ca:	69 f0       	breq	.+26     	; 0x4e6 <uart_transmit+0x26>
 4cc:	dc 01       	movw	r26, r24
 4ce:	11 96       	adiw	r26, 0x01	; 1
		while(UDR_FULL);
 4d0:	e0 ec       	ldi	r30, 0xC0	; 192
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = message[i];
 4d4:	c6 ec       	ldi	r28, 0xC6	; 198
 4d6:	d0 e0       	ldi	r29, 0x00	; 0

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
		while(UDR_FULL);
 4d8:	90 81       	ld	r25, Z
 4da:	95 ff       	sbrs	r25, 5
 4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <uart_transmit+0x18>
		UDR0 = message[i];
 4de:	28 83       	st	Y, r18
}

//This function transmit a message via UART
void uart_transmit(char* message){
	unsigned int i = 0;
	while(message[i] != '\0'){
 4e0:	2d 91       	ld	r18, X+
 4e2:	21 11       	cpse	r18, r1
 4e4:	f9 cf       	rjmp	.-14     	; 0x4d8 <uart_transmit+0x18>
		while(UDR_FULL);
		UDR0 = message[i];
		i++;
	}
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <process_message>:

//This function processes a message received by UART
void process_message(char* message, int* mfc){
 4ec:	fc 01       	movw	r30, r24
 4ee:	31 96       	adiw	r30, 0x01	; 1
 4f0:	04 96       	adiw	r24, 0x04	; 4
	int value = 0;
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
		value = value*10 + (message[i] - 48);
 4f6:	a9 01       	movw	r20, r18
 4f8:	44 0f       	add	r20, r20
 4fa:	55 1f       	adc	r21, r21
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	24 0f       	add	r18, r20
 50a:	35 1f       	adc	r19, r21
 50c:	41 91       	ld	r20, Z+
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	40 53       	subi	r20, 0x30	; 48
 512:	51 09       	sbc	r21, r1
 514:	24 0f       	add	r18, r20
 516:	35 1f       	adc	r19, r21

//This function processes a message received by UART
void process_message(char* message, int* mfc){
	int value = 0;
	//char tmp[3];
	for(unsigned int i = 1; i < 4; i++){
 518:	e8 17       	cp	r30, r24
 51a:	f9 07       	cpc	r31, r25
 51c:	61 f7       	brne	.-40     	; 0x4f6 <process_message+0xa>
// 	}

// 	for(unsigned int i = 0; i < 3; i++){
// 		value = value*10 + (tmp[i] - 48);
// 	}
	*mfc = value;
 51e:	fb 01       	movw	r30, r22
 520:	31 83       	std	Z+1, r19	; 0x01
 522:	20 83       	st	Z, r18
 524:	08 95       	ret

00000526 <__subsf3>:
 526:	50 58       	subi	r21, 0x80	; 128

00000528 <__addsf3>:
 528:	bb 27       	eor	r27, r27
 52a:	aa 27       	eor	r26, r26
 52c:	0e 94 ab 02 	call	0x556	; 0x556 <__addsf3x>
 530:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_round>
 534:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_pscA>
 538:	38 f0       	brcs	.+14     	; 0x548 <__addsf3+0x20>
 53a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscB>
 53e:	20 f0       	brcs	.+8      	; 0x548 <__addsf3+0x20>
 540:	39 f4       	brne	.+14     	; 0x550 <__addsf3+0x28>
 542:	9f 3f       	cpi	r25, 0xFF	; 255
 544:	19 f4       	brne	.+6      	; 0x54c <__addsf3+0x24>
 546:	26 f4       	brtc	.+8      	; 0x550 <__addsf3+0x28>
 548:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_nan>
 54c:	0e f4       	brtc	.+2      	; 0x550 <__addsf3+0x28>
 54e:	e0 95       	com	r30
 550:	e7 fb       	bst	r30, 7
 552:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_inf>

00000556 <__addsf3x>:
 556:	e9 2f       	mov	r30, r25
 558:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_split3>
 55c:	58 f3       	brcs	.-42     	; 0x534 <__addsf3+0xc>
 55e:	ba 17       	cp	r27, r26
 560:	62 07       	cpc	r22, r18
 562:	73 07       	cpc	r23, r19
 564:	84 07       	cpc	r24, r20
 566:	95 07       	cpc	r25, r21
 568:	20 f0       	brcs	.+8      	; 0x572 <__addsf3x+0x1c>
 56a:	79 f4       	brne	.+30     	; 0x58a <__addsf3x+0x34>
 56c:	a6 f5       	brtc	.+104    	; 0x5d6 <__addsf3x+0x80>
 56e:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_zero>
 572:	0e f4       	brtc	.+2      	; 0x576 <__addsf3x+0x20>
 574:	e0 95       	com	r30
 576:	0b 2e       	mov	r0, r27
 578:	ba 2f       	mov	r27, r26
 57a:	a0 2d       	mov	r26, r0
 57c:	0b 01       	movw	r0, r22
 57e:	b9 01       	movw	r22, r18
 580:	90 01       	movw	r18, r0
 582:	0c 01       	movw	r0, r24
 584:	ca 01       	movw	r24, r20
 586:	a0 01       	movw	r20, r0
 588:	11 24       	eor	r1, r1
 58a:	ff 27       	eor	r31, r31
 58c:	59 1b       	sub	r21, r25
 58e:	99 f0       	breq	.+38     	; 0x5b6 <__addsf3x+0x60>
 590:	59 3f       	cpi	r21, 0xF9	; 249
 592:	50 f4       	brcc	.+20     	; 0x5a8 <__addsf3x+0x52>
 594:	50 3e       	cpi	r21, 0xE0	; 224
 596:	68 f1       	brcs	.+90     	; 0x5f2 <__addsf3x+0x9c>
 598:	1a 16       	cp	r1, r26
 59a:	f0 40       	sbci	r31, 0x00	; 0
 59c:	a2 2f       	mov	r26, r18
 59e:	23 2f       	mov	r18, r19
 5a0:	34 2f       	mov	r19, r20
 5a2:	44 27       	eor	r20, r20
 5a4:	58 5f       	subi	r21, 0xF8	; 248
 5a6:	f3 cf       	rjmp	.-26     	; 0x58e <__addsf3x+0x38>
 5a8:	46 95       	lsr	r20
 5aa:	37 95       	ror	r19
 5ac:	27 95       	ror	r18
 5ae:	a7 95       	ror	r26
 5b0:	f0 40       	sbci	r31, 0x00	; 0
 5b2:	53 95       	inc	r21
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__addsf3x+0x52>
 5b6:	7e f4       	brtc	.+30     	; 0x5d6 <__addsf3x+0x80>
 5b8:	1f 16       	cp	r1, r31
 5ba:	ba 0b       	sbc	r27, r26
 5bc:	62 0b       	sbc	r22, r18
 5be:	73 0b       	sbc	r23, r19
 5c0:	84 0b       	sbc	r24, r20
 5c2:	ba f0       	brmi	.+46     	; 0x5f2 <__addsf3x+0x9c>
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	a1 f0       	breq	.+40     	; 0x5f0 <__addsf3x+0x9a>
 5c8:	ff 0f       	add	r31, r31
 5ca:	bb 1f       	adc	r27, r27
 5cc:	66 1f       	adc	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	c2 f7       	brpl	.-16     	; 0x5c4 <__addsf3x+0x6e>
 5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <__addsf3x+0x9c>
 5d6:	ba 0f       	add	r27, r26
 5d8:	62 1f       	adc	r22, r18
 5da:	73 1f       	adc	r23, r19
 5dc:	84 1f       	adc	r24, r20
 5de:	48 f4       	brcc	.+18     	; 0x5f2 <__addsf3x+0x9c>
 5e0:	87 95       	ror	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f7 95       	ror	r31
 5ea:	9e 3f       	cpi	r25, 0xFE	; 254
 5ec:	08 f0       	brcs	.+2      	; 0x5f0 <__addsf3x+0x9a>
 5ee:	b0 cf       	rjmp	.-160    	; 0x550 <__addsf3+0x28>
 5f0:	93 95       	inc	r25
 5f2:	88 0f       	add	r24, r24
 5f4:	08 f0       	brcs	.+2      	; 0x5f8 <__addsf3x+0xa2>
 5f6:	99 27       	eor	r25, r25
 5f8:	ee 0f       	add	r30, r30
 5fa:	97 95       	ror	r25
 5fc:	87 95       	ror	r24
 5fe:	08 95       	ret

00000600 <__divsf3>:
 600:	0e 94 14 03 	call	0x628	; 0x628 <__divsf3x>
 604:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_round>
 608:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscB>
 60c:	58 f0       	brcs	.+22     	; 0x624 <__divsf3+0x24>
 60e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_pscA>
 612:	40 f0       	brcs	.+16     	; 0x624 <__divsf3+0x24>
 614:	29 f4       	brne	.+10     	; 0x620 <__divsf3+0x20>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	29 f0       	breq	.+10     	; 0x624 <__divsf3+0x24>
 61a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_inf>
 61e:	51 11       	cpse	r21, r1
 620:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_szero>
 624:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_nan>

00000628 <__divsf3x>:
 628:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_split3>
 62c:	68 f3       	brcs	.-38     	; 0x608 <__divsf3+0x8>

0000062e <__divsf3_pse>:
 62e:	99 23       	and	r25, r25
 630:	b1 f3       	breq	.-20     	; 0x61e <__divsf3+0x1e>
 632:	55 23       	and	r21, r21
 634:	91 f3       	breq	.-28     	; 0x61a <__divsf3+0x1a>
 636:	95 1b       	sub	r25, r21
 638:	55 0b       	sbc	r21, r21
 63a:	bb 27       	eor	r27, r27
 63c:	aa 27       	eor	r26, r26
 63e:	62 17       	cp	r22, r18
 640:	73 07       	cpc	r23, r19
 642:	84 07       	cpc	r24, r20
 644:	38 f0       	brcs	.+14     	; 0x654 <__divsf3_pse+0x26>
 646:	9f 5f       	subi	r25, 0xFF	; 255
 648:	5f 4f       	sbci	r21, 0xFF	; 255
 64a:	22 0f       	add	r18, r18
 64c:	33 1f       	adc	r19, r19
 64e:	44 1f       	adc	r20, r20
 650:	aa 1f       	adc	r26, r26
 652:	a9 f3       	breq	.-22     	; 0x63e <__divsf3_pse+0x10>
 654:	35 d0       	rcall	.+106    	; 0x6c0 <__divsf3_pse+0x92>
 656:	0e 2e       	mov	r0, r30
 658:	3a f0       	brmi	.+14     	; 0x668 <__divsf3_pse+0x3a>
 65a:	e0 e8       	ldi	r30, 0x80	; 128
 65c:	32 d0       	rcall	.+100    	; 0x6c2 <__divsf3_pse+0x94>
 65e:	91 50       	subi	r25, 0x01	; 1
 660:	50 40       	sbci	r21, 0x00	; 0
 662:	e6 95       	lsr	r30
 664:	00 1c       	adc	r0, r0
 666:	ca f7       	brpl	.-14     	; 0x65a <__divsf3_pse+0x2c>
 668:	2b d0       	rcall	.+86     	; 0x6c0 <__divsf3_pse+0x92>
 66a:	fe 2f       	mov	r31, r30
 66c:	29 d0       	rcall	.+82     	; 0x6c0 <__divsf3_pse+0x92>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	bb 1f       	adc	r27, r27
 676:	26 17       	cp	r18, r22
 678:	37 07       	cpc	r19, r23
 67a:	48 07       	cpc	r20, r24
 67c:	ab 07       	cpc	r26, r27
 67e:	b0 e8       	ldi	r27, 0x80	; 128
 680:	09 f0       	breq	.+2      	; 0x684 <__divsf3_pse+0x56>
 682:	bb 0b       	sbc	r27, r27
 684:	80 2d       	mov	r24, r0
 686:	bf 01       	movw	r22, r30
 688:	ff 27       	eor	r31, r31
 68a:	93 58       	subi	r25, 0x83	; 131
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	3a f0       	brmi	.+14     	; 0x69e <__divsf3_pse+0x70>
 690:	9e 3f       	cpi	r25, 0xFE	; 254
 692:	51 05       	cpc	r21, r1
 694:	78 f0       	brcs	.+30     	; 0x6b4 <__divsf3_pse+0x86>
 696:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_inf>
 69a:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_szero>
 69e:	5f 3f       	cpi	r21, 0xFF	; 255
 6a0:	e4 f3       	brlt	.-8      	; 0x69a <__divsf3_pse+0x6c>
 6a2:	98 3e       	cpi	r25, 0xE8	; 232
 6a4:	d4 f3       	brlt	.-12     	; 0x69a <__divsf3_pse+0x6c>
 6a6:	86 95       	lsr	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b7 95       	ror	r27
 6ae:	f7 95       	ror	r31
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__divsf3_pse+0x78>
 6b4:	88 0f       	add	r24, r24
 6b6:	91 1d       	adc	r25, r1
 6b8:	96 95       	lsr	r25
 6ba:	87 95       	ror	r24
 6bc:	97 f9       	bld	r25, 7
 6be:	08 95       	ret
 6c0:	e1 e0       	ldi	r30, 0x01	; 1
 6c2:	66 0f       	add	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	bb 1f       	adc	r27, r27
 6ca:	62 17       	cp	r22, r18
 6cc:	73 07       	cpc	r23, r19
 6ce:	84 07       	cpc	r24, r20
 6d0:	ba 07       	cpc	r27, r26
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__divsf3_pse+0xae>
 6d4:	62 1b       	sub	r22, r18
 6d6:	73 0b       	sbc	r23, r19
 6d8:	84 0b       	sbc	r24, r20
 6da:	ba 0b       	sbc	r27, r26
 6dc:	ee 1f       	adc	r30, r30
 6de:	88 f7       	brcc	.-30     	; 0x6c2 <__divsf3_pse+0x94>
 6e0:	e0 95       	com	r30
 6e2:	08 95       	ret

000006e4 <__fixunssfsi>:
 6e4:	0e 94 0e 04 	call	0x81c	; 0x81c <__fp_splitA>
 6e8:	88 f0       	brcs	.+34     	; 0x70c <__fixunssfsi+0x28>
 6ea:	9f 57       	subi	r25, 0x7F	; 127
 6ec:	98 f0       	brcs	.+38     	; 0x714 <__fixunssfsi+0x30>
 6ee:	b9 2f       	mov	r27, r25
 6f0:	99 27       	eor	r25, r25
 6f2:	b7 51       	subi	r27, 0x17	; 23
 6f4:	b0 f0       	brcs	.+44     	; 0x722 <__fixunssfsi+0x3e>
 6f6:	e1 f0       	breq	.+56     	; 0x730 <__fixunssfsi+0x4c>
 6f8:	66 0f       	add	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	88 1f       	adc	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	1a f0       	brmi	.+6      	; 0x708 <__fixunssfsi+0x24>
 702:	ba 95       	dec	r27
 704:	c9 f7       	brne	.-14     	; 0x6f8 <__fixunssfsi+0x14>
 706:	14 c0       	rjmp	.+40     	; 0x730 <__fixunssfsi+0x4c>
 708:	b1 30       	cpi	r27, 0x01	; 1
 70a:	91 f0       	breq	.+36     	; 0x730 <__fixunssfsi+0x4c>
 70c:	0e 94 28 04 	call	0x850	; 0x850 <__fp_zero>
 710:	b1 e0       	ldi	r27, 0x01	; 1
 712:	08 95       	ret
 714:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_zero>
 718:	67 2f       	mov	r22, r23
 71a:	78 2f       	mov	r23, r24
 71c:	88 27       	eor	r24, r24
 71e:	b8 5f       	subi	r27, 0xF8	; 248
 720:	39 f0       	breq	.+14     	; 0x730 <__fixunssfsi+0x4c>
 722:	b9 3f       	cpi	r27, 0xF9	; 249
 724:	cc f3       	brlt	.-14     	; 0x718 <__fixunssfsi+0x34>
 726:	86 95       	lsr	r24
 728:	77 95       	ror	r23
 72a:	67 95       	ror	r22
 72c:	b3 95       	inc	r27
 72e:	d9 f7       	brne	.-10     	; 0x726 <__fixunssfsi+0x42>
 730:	3e f4       	brtc	.+14     	; 0x740 <__fixunssfsi+0x5c>
 732:	90 95       	com	r25
 734:	80 95       	com	r24
 736:	70 95       	com	r23
 738:	61 95       	neg	r22
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <__floatunsisf>:
 742:	e8 94       	clt
 744:	09 c0       	rjmp	.+18     	; 0x758 <__floatsisf+0x12>

00000746 <__floatsisf>:
 746:	97 fb       	bst	r25, 7
 748:	3e f4       	brtc	.+14     	; 0x758 <__floatsisf+0x12>
 74a:	90 95       	com	r25
 74c:	80 95       	com	r24
 74e:	70 95       	com	r23
 750:	61 95       	neg	r22
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	99 23       	and	r25, r25
 75a:	a9 f0       	breq	.+42     	; 0x786 <__floatsisf+0x40>
 75c:	f9 2f       	mov	r31, r25
 75e:	96 e9       	ldi	r25, 0x96	; 150
 760:	bb 27       	eor	r27, r27
 762:	93 95       	inc	r25
 764:	f6 95       	lsr	r31
 766:	87 95       	ror	r24
 768:	77 95       	ror	r23
 76a:	67 95       	ror	r22
 76c:	b7 95       	ror	r27
 76e:	f1 11       	cpse	r31, r1
 770:	f8 cf       	rjmp	.-16     	; 0x762 <__floatsisf+0x1c>
 772:	fa f4       	brpl	.+62     	; 0x7b2 <__floatsisf+0x6c>
 774:	bb 0f       	add	r27, r27
 776:	11 f4       	brne	.+4      	; 0x77c <__floatsisf+0x36>
 778:	60 ff       	sbrs	r22, 0
 77a:	1b c0       	rjmp	.+54     	; 0x7b2 <__floatsisf+0x6c>
 77c:	6f 5f       	subi	r22, 0xFF	; 255
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	16 c0       	rjmp	.+44     	; 0x7b2 <__floatsisf+0x6c>
 786:	88 23       	and	r24, r24
 788:	11 f0       	breq	.+4      	; 0x78e <__floatsisf+0x48>
 78a:	96 e9       	ldi	r25, 0x96	; 150
 78c:	11 c0       	rjmp	.+34     	; 0x7b0 <__floatsisf+0x6a>
 78e:	77 23       	and	r23, r23
 790:	21 f0       	breq	.+8      	; 0x79a <__floatsisf+0x54>
 792:	9e e8       	ldi	r25, 0x8E	; 142
 794:	87 2f       	mov	r24, r23
 796:	76 2f       	mov	r23, r22
 798:	05 c0       	rjmp	.+10     	; 0x7a4 <__floatsisf+0x5e>
 79a:	66 23       	and	r22, r22
 79c:	71 f0       	breq	.+28     	; 0x7ba <__floatsisf+0x74>
 79e:	96 e8       	ldi	r25, 0x86	; 134
 7a0:	86 2f       	mov	r24, r22
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	2a f0       	brmi	.+10     	; 0x7b2 <__floatsisf+0x6c>
 7a8:	9a 95       	dec	r25
 7aa:	66 0f       	add	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	88 1f       	adc	r24, r24
 7b0:	da f7       	brpl	.-10     	; 0x7a8 <__floatsisf+0x62>
 7b2:	88 0f       	add	r24, r24
 7b4:	96 95       	lsr	r25
 7b6:	87 95       	ror	r24
 7b8:	97 f9       	bld	r25, 7
 7ba:	08 95       	ret

000007bc <__fp_inf>:
 7bc:	97 f9       	bld	r25, 7
 7be:	9f 67       	ori	r25, 0x7F	; 127
 7c0:	80 e8       	ldi	r24, 0x80	; 128
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	08 95       	ret

000007c8 <__fp_nan>:
 7c8:	9f ef       	ldi	r25, 0xFF	; 255
 7ca:	80 ec       	ldi	r24, 0xC0	; 192
 7cc:	08 95       	ret

000007ce <__fp_pscA>:
 7ce:	00 24       	eor	r0, r0
 7d0:	0a 94       	dec	r0
 7d2:	16 16       	cp	r1, r22
 7d4:	17 06       	cpc	r1, r23
 7d6:	18 06       	cpc	r1, r24
 7d8:	09 06       	cpc	r0, r25
 7da:	08 95       	ret

000007dc <__fp_pscB>:
 7dc:	00 24       	eor	r0, r0
 7de:	0a 94       	dec	r0
 7e0:	12 16       	cp	r1, r18
 7e2:	13 06       	cpc	r1, r19
 7e4:	14 06       	cpc	r1, r20
 7e6:	05 06       	cpc	r0, r21
 7e8:	08 95       	ret

000007ea <__fp_round>:
 7ea:	09 2e       	mov	r0, r25
 7ec:	03 94       	inc	r0
 7ee:	00 0c       	add	r0, r0
 7f0:	11 f4       	brne	.+4      	; 0x7f6 <__fp_round+0xc>
 7f2:	88 23       	and	r24, r24
 7f4:	52 f0       	brmi	.+20     	; 0x80a <__fp_round+0x20>
 7f6:	bb 0f       	add	r27, r27
 7f8:	40 f4       	brcc	.+16     	; 0x80a <__fp_round+0x20>
 7fa:	bf 2b       	or	r27, r31
 7fc:	11 f4       	brne	.+4      	; 0x802 <__fp_round+0x18>
 7fe:	60 ff       	sbrs	r22, 0
 800:	04 c0       	rjmp	.+8      	; 0x80a <__fp_round+0x20>
 802:	6f 5f       	subi	r22, 0xFF	; 255
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__fp_split3>:
 80c:	57 fd       	sbrc	r21, 7
 80e:	90 58       	subi	r25, 0x80	; 128
 810:	44 0f       	add	r20, r20
 812:	55 1f       	adc	r21, r21
 814:	59 f0       	breq	.+22     	; 0x82c <__fp_splitA+0x10>
 816:	5f 3f       	cpi	r21, 0xFF	; 255
 818:	71 f0       	breq	.+28     	; 0x836 <__fp_splitA+0x1a>
 81a:	47 95       	ror	r20

0000081c <__fp_splitA>:
 81c:	88 0f       	add	r24, r24
 81e:	97 fb       	bst	r25, 7
 820:	99 1f       	adc	r25, r25
 822:	61 f0       	breq	.+24     	; 0x83c <__fp_splitA+0x20>
 824:	9f 3f       	cpi	r25, 0xFF	; 255
 826:	79 f0       	breq	.+30     	; 0x846 <__fp_splitA+0x2a>
 828:	87 95       	ror	r24
 82a:	08 95       	ret
 82c:	12 16       	cp	r1, r18
 82e:	13 06       	cpc	r1, r19
 830:	14 06       	cpc	r1, r20
 832:	55 1f       	adc	r21, r21
 834:	f2 cf       	rjmp	.-28     	; 0x81a <__fp_split3+0xe>
 836:	46 95       	lsr	r20
 838:	f1 df       	rcall	.-30     	; 0x81c <__fp_splitA>
 83a:	08 c0       	rjmp	.+16     	; 0x84c <__fp_splitA+0x30>
 83c:	16 16       	cp	r1, r22
 83e:	17 06       	cpc	r1, r23
 840:	18 06       	cpc	r1, r24
 842:	99 1f       	adc	r25, r25
 844:	f1 cf       	rjmp	.-30     	; 0x828 <__fp_splitA+0xc>
 846:	86 95       	lsr	r24
 848:	71 05       	cpc	r23, r1
 84a:	61 05       	cpc	r22, r1
 84c:	08 94       	sec
 84e:	08 95       	ret

00000850 <__fp_zero>:
 850:	e8 94       	clt

00000852 <__fp_szero>:
 852:	bb 27       	eor	r27, r27
 854:	66 27       	eor	r22, r22
 856:	77 27       	eor	r23, r23
 858:	cb 01       	movw	r24, r22
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <__mulsf3>:
 85e:	0e 94 42 04 	call	0x884	; 0x884 <__mulsf3x>
 862:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_round>
 866:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_pscA>
 86a:	38 f0       	brcs	.+14     	; 0x87a <__mulsf3+0x1c>
 86c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscB>
 870:	20 f0       	brcs	.+8      	; 0x87a <__mulsf3+0x1c>
 872:	95 23       	and	r25, r21
 874:	11 f0       	breq	.+4      	; 0x87a <__mulsf3+0x1c>
 876:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_inf>
 87a:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_nan>
 87e:	11 24       	eor	r1, r1
 880:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_szero>

00000884 <__mulsf3x>:
 884:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_split3>
 888:	70 f3       	brcs	.-36     	; 0x866 <__mulsf3+0x8>

0000088a <__mulsf3_pse>:
 88a:	95 9f       	mul	r25, r21
 88c:	c1 f3       	breq	.-16     	; 0x87e <__mulsf3+0x20>
 88e:	95 0f       	add	r25, r21
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	55 1f       	adc	r21, r21
 894:	62 9f       	mul	r22, r18
 896:	f0 01       	movw	r30, r0
 898:	72 9f       	mul	r23, r18
 89a:	bb 27       	eor	r27, r27
 89c:	f0 0d       	add	r31, r0
 89e:	b1 1d       	adc	r27, r1
 8a0:	63 9f       	mul	r22, r19
 8a2:	aa 27       	eor	r26, r26
 8a4:	f0 0d       	add	r31, r0
 8a6:	b1 1d       	adc	r27, r1
 8a8:	aa 1f       	adc	r26, r26
 8aa:	64 9f       	mul	r22, r20
 8ac:	66 27       	eor	r22, r22
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	66 1f       	adc	r22, r22
 8b4:	82 9f       	mul	r24, r18
 8b6:	22 27       	eor	r18, r18
 8b8:	b0 0d       	add	r27, r0
 8ba:	a1 1d       	adc	r26, r1
 8bc:	62 1f       	adc	r22, r18
 8be:	73 9f       	mul	r23, r19
 8c0:	b0 0d       	add	r27, r0
 8c2:	a1 1d       	adc	r26, r1
 8c4:	62 1f       	adc	r22, r18
 8c6:	83 9f       	mul	r24, r19
 8c8:	a0 0d       	add	r26, r0
 8ca:	61 1d       	adc	r22, r1
 8cc:	22 1f       	adc	r18, r18
 8ce:	74 9f       	mul	r23, r20
 8d0:	33 27       	eor	r19, r19
 8d2:	a0 0d       	add	r26, r0
 8d4:	61 1d       	adc	r22, r1
 8d6:	23 1f       	adc	r18, r19
 8d8:	84 9f       	mul	r24, r20
 8da:	60 0d       	add	r22, r0
 8dc:	21 1d       	adc	r18, r1
 8de:	82 2f       	mov	r24, r18
 8e0:	76 2f       	mov	r23, r22
 8e2:	6a 2f       	mov	r22, r26
 8e4:	11 24       	eor	r1, r1
 8e6:	9f 57       	subi	r25, 0x7F	; 127
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	9a f0       	brmi	.+38     	; 0x912 <__stack+0x13>
 8ec:	f1 f0       	breq	.+60     	; 0x92a <__stack+0x2b>
 8ee:	88 23       	and	r24, r24
 8f0:	4a f0       	brmi	.+18     	; 0x904 <__stack+0x5>
 8f2:	ee 0f       	add	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	bb 1f       	adc	r27, r27
 8f8:	66 1f       	adc	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	91 50       	subi	r25, 0x01	; 1
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	a9 f7       	brne	.-22     	; 0x8ee <__mulsf3_pse+0x64>
 904:	9e 3f       	cpi	r25, 0xFE	; 254
 906:	51 05       	cpc	r21, r1
 908:	80 f0       	brcs	.+32     	; 0x92a <__stack+0x2b>
 90a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_inf>
 90e:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_szero>
 912:	5f 3f       	cpi	r21, 0xFF	; 255
 914:	e4 f3       	brlt	.-8      	; 0x90e <__stack+0xf>
 916:	98 3e       	cpi	r25, 0xE8	; 232
 918:	d4 f3       	brlt	.-12     	; 0x90e <__stack+0xf>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b7 95       	ror	r27
 922:	f7 95       	ror	r31
 924:	e7 95       	ror	r30
 926:	9f 5f       	subi	r25, 0xFF	; 255
 928:	c1 f7       	brne	.-16     	; 0x91a <__stack+0x1b>
 92a:	fe 2b       	or	r31, r30
 92c:	88 0f       	add	r24, r24
 92e:	91 1d       	adc	r25, r1
 930:	96 95       	lsr	r25
 932:	87 95       	ror	r24
 934:	97 f9       	bld	r25, 7
 936:	08 95       	ret

00000938 <_exit>:
 938:	f8 94       	cli

0000093a <__stop_program>:
 93a:	ff cf       	rjmp	.-2      	; 0x93a <__stop_program>
